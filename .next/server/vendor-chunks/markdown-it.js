"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/markdown-it";
exports.ids = ["vendor-chunks/markdown-it"];
exports.modules = {

/***/ "(rsc)/./node_modules/markdown-it/index.js":
/*!*******************************************!*\
  !*** ./node_modules/markdown-it/index.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = __webpack_require__(/*! ./lib/ */ \"(rsc)/./node_modules/markdown-it/lib/index.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFHQUEsbUdBQXlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvZy8uL25vZGVfbW9kdWxlcy9tYXJrZG93bi1pdC9pbmRleC5qcz9mODU0Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliLycpO1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/markdown-it/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/markdown-it/lib/common/entities.js":
/*!*********************************************************!*\
  !*** ./node_modules/markdown-it/lib/common/entities.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// HTML5 entities map: { name -> utf16string }\n//\n\n/*eslint quotes:0*/ module.exports = __webpack_require__(/*! entities/lib/maps/entities.json */ \"(rsc)/./node_modules/entities/lib/maps/entities.json\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL2NvbW1vbi9lbnRpdGllcy5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4Q0FBOEM7QUFDOUMsRUFBRTtBQUNGO0FBRUEsaUJBQWlCLEdBQ2pCQSxtSUFBeUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9nLy4vbm9kZV9tb2R1bGVzL21hcmtkb3duLWl0L2xpYi9jb21tb24vZW50aXRpZXMuanM/N2Q2ZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBIVE1MNSBlbnRpdGllcyBtYXA6IHsgbmFtZSAtPiB1dGYxNnN0cmluZyB9XG4vL1xuJ3VzZSBzdHJpY3QnO1xuXG4vKmVzbGludCBxdW90ZXM6MCovXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJ2VudGl0aWVzL2xpYi9tYXBzL2VudGl0aWVzLmpzb24nKTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwicmVxdWlyZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/markdown-it/lib/common/entities.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/markdown-it/lib/common/html_blocks.js":
/*!************************************************************!*\
  !*** ./node_modules/markdown-it/lib/common/html_blocks.js ***!
  \************************************************************/
/***/ ((module) => {

eval("// List of valid html blocks names, accorting to commonmark spec\n// http://jgm.github.io/CommonMark/spec.html#html-blocks\n\nmodule.exports = [\n    \"address\",\n    \"article\",\n    \"aside\",\n    \"base\",\n    \"basefont\",\n    \"blockquote\",\n    \"body\",\n    \"caption\",\n    \"center\",\n    \"col\",\n    \"colgroup\",\n    \"dd\",\n    \"details\",\n    \"dialog\",\n    \"dir\",\n    \"div\",\n    \"dl\",\n    \"dt\",\n    \"fieldset\",\n    \"figcaption\",\n    \"figure\",\n    \"footer\",\n    \"form\",\n    \"frame\",\n    \"frameset\",\n    \"h1\",\n    \"h2\",\n    \"h3\",\n    \"h4\",\n    \"h5\",\n    \"h6\",\n    \"head\",\n    \"header\",\n    \"hr\",\n    \"html\",\n    \"iframe\",\n    \"legend\",\n    \"li\",\n    \"link\",\n    \"main\",\n    \"menu\",\n    \"menuitem\",\n    \"nav\",\n    \"noframes\",\n    \"ol\",\n    \"optgroup\",\n    \"option\",\n    \"p\",\n    \"param\",\n    \"section\",\n    \"source\",\n    \"summary\",\n    \"table\",\n    \"tbody\",\n    \"td\",\n    \"tfoot\",\n    \"th\",\n    \"thead\",\n    \"title\",\n    \"tr\",\n    \"track\",\n    \"ul\"\n];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL2NvbW1vbi9odG1sX2Jsb2Nrcy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxnRUFBZ0U7QUFDaEUsd0RBQXdEO0FBRXhEO0FBR0FBLE9BQU9DLE9BQU8sR0FBRztJQUNmO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7Q0FDRCIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2cvLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL2NvbW1vbi9odG1sX2Jsb2Nrcy5qcz9hNTRkIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIExpc3Qgb2YgdmFsaWQgaHRtbCBibG9ja3MgbmFtZXMsIGFjY29ydGluZyB0byBjb21tb25tYXJrIHNwZWNcbi8vIGh0dHA6Ly9qZ20uZ2l0aHViLmlvL0NvbW1vbk1hcmsvc3BlYy5odG1sI2h0bWwtYmxvY2tzXG5cbid1c2Ugc3RyaWN0JztcblxuXG5tb2R1bGUuZXhwb3J0cyA9IFtcbiAgJ2FkZHJlc3MnLFxuICAnYXJ0aWNsZScsXG4gICdhc2lkZScsXG4gICdiYXNlJyxcbiAgJ2Jhc2Vmb250JyxcbiAgJ2Jsb2NrcXVvdGUnLFxuICAnYm9keScsXG4gICdjYXB0aW9uJyxcbiAgJ2NlbnRlcicsXG4gICdjb2wnLFxuICAnY29sZ3JvdXAnLFxuICAnZGQnLFxuICAnZGV0YWlscycsXG4gICdkaWFsb2cnLFxuICAnZGlyJyxcbiAgJ2RpdicsXG4gICdkbCcsXG4gICdkdCcsXG4gICdmaWVsZHNldCcsXG4gICdmaWdjYXB0aW9uJyxcbiAgJ2ZpZ3VyZScsXG4gICdmb290ZXInLFxuICAnZm9ybScsXG4gICdmcmFtZScsXG4gICdmcmFtZXNldCcsXG4gICdoMScsXG4gICdoMicsXG4gICdoMycsXG4gICdoNCcsXG4gICdoNScsXG4gICdoNicsXG4gICdoZWFkJyxcbiAgJ2hlYWRlcicsXG4gICdocicsXG4gICdodG1sJyxcbiAgJ2lmcmFtZScsXG4gICdsZWdlbmQnLFxuICAnbGknLFxuICAnbGluaycsXG4gICdtYWluJyxcbiAgJ21lbnUnLFxuICAnbWVudWl0ZW0nLFxuICAnbmF2JyxcbiAgJ25vZnJhbWVzJyxcbiAgJ29sJyxcbiAgJ29wdGdyb3VwJyxcbiAgJ29wdGlvbicsXG4gICdwJyxcbiAgJ3BhcmFtJyxcbiAgJ3NlY3Rpb24nLFxuICAnc291cmNlJyxcbiAgJ3N1bW1hcnknLFxuICAndGFibGUnLFxuICAndGJvZHknLFxuICAndGQnLFxuICAndGZvb3QnLFxuICAndGgnLFxuICAndGhlYWQnLFxuICAndGl0bGUnLFxuICAndHInLFxuICAndHJhY2snLFxuICAndWwnXG5dO1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/markdown-it/lib/common/html_blocks.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/markdown-it/lib/common/html_re.js":
/*!********************************************************!*\
  !*** ./node_modules/markdown-it/lib/common/html_re.js ***!
  \********************************************************/
/***/ ((module) => {

eval("// Regexps to match html elements\n\nvar attr_name = \"[a-zA-Z_:][a-zA-Z0-9:._-]*\";\nvar unquoted = \"[^\\\"'=<>`\\\\x00-\\\\x20]+\";\nvar single_quoted = \"'[^']*'\";\nvar double_quoted = '\"[^\"]*\"';\nvar attr_value = \"(?:\" + unquoted + \"|\" + single_quoted + \"|\" + double_quoted + \")\";\nvar attribute = \"(?:\\\\s+\" + attr_name + \"(?:\\\\s*=\\\\s*\" + attr_value + \")?)\";\nvar open_tag = \"<[A-Za-z][A-Za-z0-9\\\\-]*\" + attribute + \"*\\\\s*\\\\/?>\";\nvar close_tag = \"<\\\\/[A-Za-z][A-Za-z0-9\\\\-]*\\\\s*>\";\nvar comment = \"<!---->|<!--(?:-?[^>-])(?:-?[^-])*-->\";\nvar processing = \"<[?][\\\\s\\\\S]*?[?]>\";\nvar declaration = \"<![A-Z]+\\\\s+[^>]*>\";\nvar cdata = \"<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>\";\nvar HTML_TAG_RE = new RegExp(\"^(?:\" + open_tag + \"|\" + close_tag + \"|\" + comment + \"|\" + processing + \"|\" + declaration + \"|\" + cdata + \")\");\nvar HTML_OPEN_CLOSE_TAG_RE = new RegExp(\"^(?:\" + open_tag + \"|\" + close_tag + \")\");\nmodule.exports.HTML_TAG_RE = HTML_TAG_RE;\nmodule.exports.HTML_OPEN_CLOSE_TAG_RE = HTML_OPEN_CLOSE_TAG_RE;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL2NvbW1vbi9odG1sX3JlLmpzIiwibWFwcGluZ3MiOiJBQUFBLGlDQUFpQztBQUVqQztBQUVBLElBQUlBLFlBQWdCO0FBRXBCLElBQUlDLFdBQWdCO0FBQ3BCLElBQUlDLGdCQUFnQjtBQUNwQixJQUFJQyxnQkFBZ0I7QUFFcEIsSUFBSUMsYUFBYyxRQUFRSCxXQUFXLE1BQU1DLGdCQUFnQixNQUFNQyxnQkFBZ0I7QUFFakYsSUFBSUUsWUFBYyxZQUFZTCxZQUFZLGlCQUFpQkksYUFBYTtBQUV4RSxJQUFJRSxXQUFjLDZCQUE2QkQsWUFBWTtBQUUzRCxJQUFJRSxZQUFjO0FBQ2xCLElBQUlDLFVBQWM7QUFDbEIsSUFBSUMsYUFBYztBQUNsQixJQUFJQyxjQUFjO0FBQ2xCLElBQUlDLFFBQWM7QUFFbEIsSUFBSUMsY0FBYyxJQUFJQyxPQUFPLFNBQVNQLFdBQVcsTUFBTUMsWUFBWSxNQUFNQyxVQUNqRCxNQUFNQyxhQUFhLE1BQU1DLGNBQWMsTUFBTUMsUUFBUTtBQUM3RSxJQUFJRyx5QkFBeUIsSUFBSUQsT0FBTyxTQUFTUCxXQUFXLE1BQU1DLFlBQVk7QUFFOUVRLDBCQUEwQixHQUFHSDtBQUM3QkcscUNBQXFDLEdBQUdEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvZy8uL25vZGVfbW9kdWxlcy9tYXJrZG93bi1pdC9saWIvY29tbW9uL2h0bWxfcmUuanM/YWRlNiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBSZWdleHBzIHRvIG1hdGNoIGh0bWwgZWxlbWVudHNcblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgYXR0cl9uYW1lICAgICA9ICdbYS16QS1aXzpdW2EtekEtWjAtOTouXy1dKic7XG5cbnZhciB1bnF1b3RlZCAgICAgID0gJ1teXCJcXCc9PD5gXFxcXHgwMC1cXFxceDIwXSsnO1xudmFyIHNpbmdsZV9xdW90ZWQgPSBcIidbXiddKidcIjtcbnZhciBkb3VibGVfcXVvdGVkID0gJ1wiW15cIl0qXCInO1xuXG52YXIgYXR0cl92YWx1ZSAgPSAnKD86JyArIHVucXVvdGVkICsgJ3wnICsgc2luZ2xlX3F1b3RlZCArICd8JyArIGRvdWJsZV9xdW90ZWQgKyAnKSc7XG5cbnZhciBhdHRyaWJ1dGUgICA9ICcoPzpcXFxccysnICsgYXR0cl9uYW1lICsgJyg/OlxcXFxzKj1cXFxccyonICsgYXR0cl92YWx1ZSArICcpPyknO1xuXG52YXIgb3Blbl90YWcgICAgPSAnPFtBLVphLXpdW0EtWmEtejAtOVxcXFwtXSonICsgYXR0cmlidXRlICsgJypcXFxccypcXFxcLz8+JztcblxudmFyIGNsb3NlX3RhZyAgID0gJzxcXFxcL1tBLVphLXpdW0EtWmEtejAtOVxcXFwtXSpcXFxccyo+JztcbnZhciBjb21tZW50ICAgICA9ICc8IS0tLS0+fDwhLS0oPzotP1tePi1dKSg/Oi0/W14tXSkqLS0+JztcbnZhciBwcm9jZXNzaW5nICA9ICc8Wz9dW1xcXFxzXFxcXFNdKj9bP10+JztcbnZhciBkZWNsYXJhdGlvbiA9ICc8IVtBLVpdK1xcXFxzK1tePl0qPic7XG52YXIgY2RhdGEgICAgICAgPSAnPCFcXFxcW0NEQVRBXFxcXFtbXFxcXHNcXFxcU10qP1xcXFxdXFxcXF0+JztcblxudmFyIEhUTUxfVEFHX1JFID0gbmV3IFJlZ0V4cCgnXig/OicgKyBvcGVuX3RhZyArICd8JyArIGNsb3NlX3RhZyArICd8JyArIGNvbW1lbnQgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ3wnICsgcHJvY2Vzc2luZyArICd8JyArIGRlY2xhcmF0aW9uICsgJ3wnICsgY2RhdGEgKyAnKScpO1xudmFyIEhUTUxfT1BFTl9DTE9TRV9UQUdfUkUgPSBuZXcgUmVnRXhwKCdeKD86JyArIG9wZW5fdGFnICsgJ3wnICsgY2xvc2VfdGFnICsgJyknKTtcblxubW9kdWxlLmV4cG9ydHMuSFRNTF9UQUdfUkUgPSBIVE1MX1RBR19SRTtcbm1vZHVsZS5leHBvcnRzLkhUTUxfT1BFTl9DTE9TRV9UQUdfUkUgPSBIVE1MX09QRU5fQ0xPU0VfVEFHX1JFO1xuIl0sIm5hbWVzIjpbImF0dHJfbmFtZSIsInVucXVvdGVkIiwic2luZ2xlX3F1b3RlZCIsImRvdWJsZV9xdW90ZWQiLCJhdHRyX3ZhbHVlIiwiYXR0cmlidXRlIiwib3Blbl90YWciLCJjbG9zZV90YWciLCJjb21tZW50IiwicHJvY2Vzc2luZyIsImRlY2xhcmF0aW9uIiwiY2RhdGEiLCJIVE1MX1RBR19SRSIsIlJlZ0V4cCIsIkhUTUxfT1BFTl9DTE9TRV9UQUdfUkUiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/markdown-it/lib/common/html_re.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/markdown-it/lib/common/utils.js":
/*!******************************************************!*\
  !*** ./node_modules/markdown-it/lib/common/utils.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("// Utilities\n//\n\nfunction _class(obj) {\n    return Object.prototype.toString.call(obj);\n}\nfunction isString(obj) {\n    return _class(obj) === \"[object String]\";\n}\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction has(object, key) {\n    return _hasOwnProperty.call(object, key);\n}\n// Merge objects\n//\nfunction assign(obj /*from1, from2, from3, ...*/ ) {\n    var sources = Array.prototype.slice.call(arguments, 1);\n    sources.forEach(function(source) {\n        if (!source) {\n            return;\n        }\n        if (typeof source !== \"object\") {\n            throw new TypeError(source + \"must be object\");\n        }\n        Object.keys(source).forEach(function(key) {\n            obj[key] = source[key];\n        });\n    });\n    return obj;\n}\n// Remove element from array and put another array at those position.\n// Useful for some operations with tokens\nfunction arrayReplaceAt(src, pos, newElements) {\n    return [].concat(src.slice(0, pos), newElements, src.slice(pos + 1));\n}\n////////////////////////////////////////////////////////////////////////////////\nfunction isValidEntityCode(c) {\n    /*eslint no-bitwise:0*/ // broken sequence\n    if (c >= 0xD800 && c <= 0xDFFF) {\n        return false;\n    }\n    // never used\n    if (c >= 0xFDD0 && c <= 0xFDEF) {\n        return false;\n    }\n    if ((c & 0xFFFF) === 0xFFFF || (c & 0xFFFF) === 0xFFFE) {\n        return false;\n    }\n    // control codes\n    if (c >= 0x00 && c <= 0x08) {\n        return false;\n    }\n    if (c === 0x0B) {\n        return false;\n    }\n    if (c >= 0x0E && c <= 0x1F) {\n        return false;\n    }\n    if (c >= 0x7F && c <= 0x9F) {\n        return false;\n    }\n    // out of range\n    if (c > 0x10FFFF) {\n        return false;\n    }\n    return true;\n}\nfunction fromCodePoint(c) {\n    /*eslint no-bitwise:0*/ if (c > 0xffff) {\n        c -= 0x10000;\n        var surrogate1 = 0xd800 + (c >> 10), surrogate2 = 0xdc00 + (c & 0x3ff);\n        return String.fromCharCode(surrogate1, surrogate2);\n    }\n    return String.fromCharCode(c);\n}\nvar UNESCAPE_MD_RE = /\\\\([!\"#$%&'()*+,\\-.\\/:;<=>?@[\\\\\\]^_`{|}~])/g;\nvar ENTITY_RE = /&([a-z#][a-z0-9]{1,31});/gi;\nvar UNESCAPE_ALL_RE = new RegExp(UNESCAPE_MD_RE.source + \"|\" + ENTITY_RE.source, \"gi\");\nvar DIGITAL_ENTITY_TEST_RE = /^#((?:x[a-f0-9]{1,8}|[0-9]{1,8}))$/i;\nvar entities = __webpack_require__(/*! ./entities */ \"(rsc)/./node_modules/markdown-it/lib/common/entities.js\");\nfunction replaceEntityPattern(match, name) {\n    var code;\n    if (has(entities, name)) {\n        return entities[name];\n    }\n    if (name.charCodeAt(0) === 0x23 /* # */  && DIGITAL_ENTITY_TEST_RE.test(name)) {\n        code = name[1].toLowerCase() === \"x\" ? parseInt(name.slice(2), 16) : parseInt(name.slice(1), 10);\n        if (isValidEntityCode(code)) {\n            return fromCodePoint(code);\n        }\n    }\n    return match;\n}\n/*function replaceEntities(str) {\n  if (str.indexOf('&') < 0) { return str; }\n\n  return str.replace(ENTITY_RE, replaceEntityPattern);\n}*/ function unescapeMd(str) {\n    if (str.indexOf(\"\\\\\") < 0) {\n        return str;\n    }\n    return str.replace(UNESCAPE_MD_RE, \"$1\");\n}\nfunction unescapeAll(str) {\n    if (str.indexOf(\"\\\\\") < 0 && str.indexOf(\"&\") < 0) {\n        return str;\n    }\n    return str.replace(UNESCAPE_ALL_RE, function(match, escaped, entity) {\n        if (escaped) {\n            return escaped;\n        }\n        return replaceEntityPattern(match, entity);\n    });\n}\n////////////////////////////////////////////////////////////////////////////////\nvar HTML_ESCAPE_TEST_RE = /[&<>\"]/;\nvar HTML_ESCAPE_REPLACE_RE = /[&<>\"]/g;\nvar HTML_REPLACEMENTS = {\n    \"&\": \"&amp;\",\n    \"<\": \"&lt;\",\n    \">\": \"&gt;\",\n    '\"': \"&quot;\"\n};\nfunction replaceUnsafeChar(ch) {\n    return HTML_REPLACEMENTS[ch];\n}\nfunction escapeHtml(str) {\n    if (HTML_ESCAPE_TEST_RE.test(str)) {\n        return str.replace(HTML_ESCAPE_REPLACE_RE, replaceUnsafeChar);\n    }\n    return str;\n}\n////////////////////////////////////////////////////////////////////////////////\nvar REGEXP_ESCAPE_RE = /[.?*+^$[\\]\\\\(){}|-]/g;\nfunction escapeRE(str) {\n    return str.replace(REGEXP_ESCAPE_RE, \"\\\\$&\");\n}\n////////////////////////////////////////////////////////////////////////////////\nfunction isSpace(code) {\n    switch(code){\n        case 0x09:\n        case 0x20:\n            return true;\n    }\n    return false;\n}\n// Zs (unicode class) || [\\t\\f\\v\\r\\n]\nfunction isWhiteSpace(code) {\n    if (code >= 0x2000 && code <= 0x200A) {\n        return true;\n    }\n    switch(code){\n        case 0x09:\n        case 0x0A:\n        case 0x0B:\n        case 0x0C:\n        case 0x0D:\n        case 0x20:\n        case 0xA0:\n        case 0x1680:\n        case 0x202F:\n        case 0x205F:\n        case 0x3000:\n            return true;\n    }\n    return false;\n}\n////////////////////////////////////////////////////////////////////////////////\n/*eslint-disable max-len*/ var UNICODE_PUNCT_RE = __webpack_require__(/*! uc.micro/categories/P/regex */ \"(rsc)/./node_modules/uc.micro/categories/P/regex.js\");\n// Currently without astral characters support.\nfunction isPunctChar(ch) {\n    return UNICODE_PUNCT_RE.test(ch);\n}\n// Markdown ASCII punctuation characters.\n//\n// !, \", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \\, ], ^, _, `, {, |, }, or ~\n// http://spec.commonmark.org/0.15/#ascii-punctuation-character\n//\n// Don't confuse with unicode punctuation !!! It lacks some chars in ascii range.\n//\nfunction isMdAsciiPunct(ch) {\n    switch(ch){\n        case 0x21 /* ! */ :\n        case 0x22 /* \" */ :\n        case 0x23 /* # */ :\n        case 0x24 /* $ */ :\n        case 0x25 /* % */ :\n        case 0x26 /* & */ :\n        case 0x27 /* ' */ :\n        case 0x28 /* ( */ :\n        case 0x29 /* ) */ :\n        case 0x2A /* * */ :\n        case 0x2B /* + */ :\n        case 0x2C /* , */ :\n        case 0x2D /* - */ :\n        case 0x2E /* . */ :\n        case 0x2F /* / */ :\n        case 0x3A /* : */ :\n        case 0x3B /* ; */ :\n        case 0x3C /* < */ :\n        case 0x3D /* = */ :\n        case 0x3E /* > */ :\n        case 0x3F /* ? */ :\n        case 0x40 /* @ */ :\n        case 0x5B /* [ */ :\n        case 0x5C /* \\ */ :\n        case 0x5D /* ] */ :\n        case 0x5E /* ^ */ :\n        case 0x5F /* _ */ :\n        case 0x60 /* ` */ :\n        case 0x7B /* { */ :\n        case 0x7C /* | */ :\n        case 0x7D /* } */ :\n        case 0x7E /* ~ */ :\n            return true;\n        default:\n            return false;\n    }\n}\n// Hepler to unify [reference labels].\n//\nfunction normalizeReference(str) {\n    // Trim and collapse whitespace\n    //\n    str = str.trim().replace(/\\s+/g, \" \");\n    // In node v10 'ẞ'.toLowerCase() === 'Ṿ', which is presumed to be a bug\n    // fixed in v12 (couldn't find any details).\n    //\n    // So treat this one as a special case\n    // (remove this when node v10 is no longer supported).\n    //\n    if (\"ẞ\".toLowerCase() === \"Ṿ\") {\n        str = str.replace(/ẞ/g, \"\\xdf\");\n    }\n    // .toLowerCase().toUpperCase() should get rid of all differences\n    // between letter variants.\n    //\n    // Simple .toLowerCase() doesn't normalize 125 code points correctly,\n    // and .toUpperCase doesn't normalize 6 of them (list of exceptions:\n    // İ, ϴ, ẞ, Ω, K, Å - those are already uppercased, but have differently\n    // uppercased versions).\n    //\n    // Here's an example showing how it happens. Lets take greek letter omega:\n    // uppercase U+0398 (Θ), U+03f4 (ϴ) and lowercase U+03b8 (θ), U+03d1 (ϑ)\n    //\n    // Unicode entries:\n    // 0398;GREEK CAPITAL LETTER THETA;Lu;0;L;;;;;N;;;;03B8;\n    // 03B8;GREEK SMALL LETTER THETA;Ll;0;L;;;;;N;;;0398;;0398\n    // 03D1;GREEK THETA SYMBOL;Ll;0;L;<compat> 03B8;;;;N;GREEK SMALL LETTER SCRIPT THETA;;0398;;0398\n    // 03F4;GREEK CAPITAL THETA SYMBOL;Lu;0;L;<compat> 0398;;;;N;;;;03B8;\n    //\n    // Case-insensitive comparison should treat all of them as equivalent.\n    //\n    // But .toLowerCase() doesn't change ϑ (it's already lowercase),\n    // and .toUpperCase() doesn't change ϴ (already uppercase).\n    //\n    // Applying first lower then upper case normalizes any character:\n    // '\\u0398\\u03f4\\u03b8\\u03d1'.toLowerCase().toUpperCase() === '\\u0398\\u0398\\u0398\\u0398'\n    //\n    // Note: this is equivalent to unicode case folding; unicode normalization\n    // is a different step that is not required here.\n    //\n    // Final result should be uppercased, because it's later stored in an object\n    // (this avoid a conflict with Object.prototype members,\n    // most notably, `__proto__`)\n    //\n    return str.toLowerCase().toUpperCase();\n}\n////////////////////////////////////////////////////////////////////////////////\n// Re-export libraries commonly used in both markdown-it and its plugins,\n// so plugins won't have to depend on them explicitly, which reduces their\n// bundled size (e.g. a browser build).\n//\nexports.lib = {};\nexports.lib.mdurl = __webpack_require__(/*! mdurl */ \"(rsc)/./node_modules/mdurl/index.js\");\nexports.lib.ucmicro = __webpack_require__(/*! uc.micro */ \"(rsc)/./node_modules/uc.micro/index.js\");\nexports.assign = assign;\nexports.isString = isString;\nexports.has = has;\nexports.unescapeMd = unescapeMd;\nexports.unescapeAll = unescapeAll;\nexports.isValidEntityCode = isValidEntityCode;\nexports.fromCodePoint = fromCodePoint;\n// exports.replaceEntities     = replaceEntities;\nexports.escapeHtml = escapeHtml;\nexports.arrayReplaceAt = arrayReplaceAt;\nexports.isSpace = isSpace;\nexports.isWhiteSpace = isWhiteSpace;\nexports.isMdAsciiPunct = isMdAsciiPunct;\nexports.isPunctChar = isPunctChar;\nexports.escapeRE = escapeRE;\nexports.normalizeReference = normalizeReference;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/markdown-it/lib/common/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/markdown-it/lib/helpers/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/markdown-it/lib/helpers/index.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("// Just a shortcut for bulk export\n\nexports.parseLinkLabel = __webpack_require__(/*! ./parse_link_label */ \"(rsc)/./node_modules/markdown-it/lib/helpers/parse_link_label.js\");\nexports.parseLinkDestination = __webpack_require__(/*! ./parse_link_destination */ \"(rsc)/./node_modules/markdown-it/lib/helpers/parse_link_destination.js\");\nexports.parseLinkTitle = __webpack_require__(/*! ./parse_link_title */ \"(rsc)/./node_modules/markdown-it/lib/helpers/parse_link_title.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL2hlbHBlcnMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUEsa0NBQWtDO0FBQ2xDO0FBR0FBLDBJQUF1QztBQUN2Q0EsNEpBQXVDO0FBQ3ZDQSwwSUFBdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9nLy4vbm9kZV9tb2R1bGVzL21hcmtkb3duLWl0L2xpYi9oZWxwZXJzL2luZGV4LmpzPzcyNzkiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSnVzdCBhIHNob3J0Y3V0IGZvciBidWxrIGV4cG9ydFxuJ3VzZSBzdHJpY3QnO1xuXG5cbmV4cG9ydHMucGFyc2VMaW5rTGFiZWwgICAgICAgPSByZXF1aXJlKCcuL3BhcnNlX2xpbmtfbGFiZWwnKTtcbmV4cG9ydHMucGFyc2VMaW5rRGVzdGluYXRpb24gPSByZXF1aXJlKCcuL3BhcnNlX2xpbmtfZGVzdGluYXRpb24nKTtcbmV4cG9ydHMucGFyc2VMaW5rVGl0bGUgICAgICAgPSByZXF1aXJlKCcuL3BhcnNlX2xpbmtfdGl0bGUnKTtcbiJdLCJuYW1lcyI6WyJleHBvcnRzIiwicGFyc2VMaW5rTGFiZWwiLCJyZXF1aXJlIiwicGFyc2VMaW5rRGVzdGluYXRpb24iLCJwYXJzZUxpbmtUaXRsZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/markdown-it/lib/helpers/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/markdown-it/lib/helpers/parse_link_destination.js":
/*!************************************************************************!*\
  !*** ./node_modules/markdown-it/lib/helpers/parse_link_destination.js ***!
  \************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Parse link destination\n//\n\nvar unescapeAll = (__webpack_require__(/*! ../common/utils */ \"(rsc)/./node_modules/markdown-it/lib/common/utils.js\").unescapeAll);\nmodule.exports = function parseLinkDestination(str, start, max) {\n    var code, level, pos = start, result = {\n        ok: false,\n        pos: 0,\n        lines: 0,\n        str: \"\"\n    };\n    if (str.charCodeAt(pos) === 0x3C /* < */ ) {\n        pos++;\n        while(pos < max){\n            code = str.charCodeAt(pos);\n            if (code === 0x0A /* \\n */ ) {\n                return result;\n            }\n            if (code === 0x3C /* < */ ) {\n                return result;\n            }\n            if (code === 0x3E /* > */ ) {\n                result.pos = pos + 1;\n                result.str = unescapeAll(str.slice(start + 1, pos));\n                result.ok = true;\n                return result;\n            }\n            if (code === 0x5C /* \\ */  && pos + 1 < max) {\n                pos += 2;\n                continue;\n            }\n            pos++;\n        }\n        // no closing '>'\n        return result;\n    }\n    // this should be ... } else { ... branch\n    level = 0;\n    while(pos < max){\n        code = str.charCodeAt(pos);\n        if (code === 0x20) {\n            break;\n        }\n        // ascii control characters\n        if (code < 0x20 || code === 0x7F) {\n            break;\n        }\n        if (code === 0x5C /* \\ */  && pos + 1 < max) {\n            if (str.charCodeAt(pos + 1) === 0x20) {\n                break;\n            }\n            pos += 2;\n            continue;\n        }\n        if (code === 0x28 /* ( */ ) {\n            level++;\n            if (level > 32) {\n                return result;\n            }\n        }\n        if (code === 0x29 /* ) */ ) {\n            if (level === 0) {\n                break;\n            }\n            level--;\n        }\n        pos++;\n    }\n    if (start === pos) {\n        return result;\n    }\n    if (level !== 0) {\n        return result;\n    }\n    result.str = unescapeAll(str.slice(start, pos));\n    result.pos = pos;\n    result.ok = true;\n    return result;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL2hlbHBlcnMvcGFyc2VfbGlua19kZXN0aW5hdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBQSx5QkFBeUI7QUFDekIsRUFBRTtBQUNGO0FBR0EsSUFBSUEsY0FBY0MsZ0hBQXNDO0FBR3hEQyxPQUFPQyxPQUFPLEdBQUcsU0FBU0MscUJBQXFCQyxHQUFHLEVBQUVDLEtBQUssRUFBRUMsR0FBRztJQUM1RCxJQUFJQyxNQUFNQyxPQUNOQyxNQUFNSixPQUNOSyxTQUFTO1FBQ1BDLElBQUk7UUFDSkYsS0FBSztRQUNMRyxPQUFPO1FBQ1BSLEtBQUs7SUFDUDtJQUVKLElBQUlBLElBQUlTLFVBQVUsQ0FBQ0osU0FBUyxLQUFLLEtBQUssS0FBSTtRQUN4Q0E7UUFDQSxNQUFPQSxNQUFNSCxJQUFLO1lBQ2hCQyxPQUFPSCxJQUFJUyxVQUFVLENBQUNKO1lBQ3RCLElBQUlGLFNBQVMsS0FBSyxNQUFNLEtBQUk7Z0JBQUUsT0FBT0c7WUFBUTtZQUM3QyxJQUFJSCxTQUFTLEtBQUssS0FBSyxLQUFJO2dCQUFFLE9BQU9HO1lBQVE7WUFDNUMsSUFBSUgsU0FBUyxLQUFLLEtBQUssS0FBSTtnQkFDekJHLE9BQU9ELEdBQUcsR0FBR0EsTUFBTTtnQkFDbkJDLE9BQU9OLEdBQUcsR0FBR0wsWUFBWUssSUFBSVUsS0FBSyxDQUFDVCxRQUFRLEdBQUdJO2dCQUM5Q0MsT0FBT0MsRUFBRSxHQUFHO2dCQUNaLE9BQU9EO1lBQ1Q7WUFDQSxJQUFJSCxTQUFTLEtBQUssS0FBSyxPQUFNRSxNQUFNLElBQUlILEtBQUs7Z0JBQzFDRyxPQUFPO2dCQUNQO1lBQ0Y7WUFFQUE7UUFDRjtRQUVBLGlCQUFpQjtRQUNqQixPQUFPQztJQUNUO0lBRUEseUNBQXlDO0lBRXpDRixRQUFRO0lBQ1IsTUFBT0MsTUFBTUgsSUFBSztRQUNoQkMsT0FBT0gsSUFBSVMsVUFBVSxDQUFDSjtRQUV0QixJQUFJRixTQUFTLE1BQU07WUFBRTtRQUFPO1FBRTVCLDJCQUEyQjtRQUMzQixJQUFJQSxPQUFPLFFBQVFBLFNBQVMsTUFBTTtZQUFFO1FBQU87UUFFM0MsSUFBSUEsU0FBUyxLQUFLLEtBQUssT0FBTUUsTUFBTSxJQUFJSCxLQUFLO1lBQzFDLElBQUlGLElBQUlTLFVBQVUsQ0FBQ0osTUFBTSxPQUFPLE1BQU07Z0JBQUU7WUFBTztZQUMvQ0EsT0FBTztZQUNQO1FBQ0Y7UUFFQSxJQUFJRixTQUFTLEtBQUssS0FBSyxLQUFJO1lBQ3pCQztZQUNBLElBQUlBLFFBQVEsSUFBSTtnQkFBRSxPQUFPRTtZQUFRO1FBQ25DO1FBRUEsSUFBSUgsU0FBUyxLQUFLLEtBQUssS0FBSTtZQUN6QixJQUFJQyxVQUFVLEdBQUc7Z0JBQUU7WUFBTztZQUMxQkE7UUFDRjtRQUVBQztJQUNGO0lBRUEsSUFBSUosVUFBVUksS0FBSztRQUFFLE9BQU9DO0lBQVE7SUFDcEMsSUFBSUYsVUFBVSxHQUFHO1FBQUUsT0FBT0U7SUFBUTtJQUVsQ0EsT0FBT04sR0FBRyxHQUFHTCxZQUFZSyxJQUFJVSxLQUFLLENBQUNULE9BQU9JO0lBQzFDQyxPQUFPRCxHQUFHLEdBQUdBO0lBQ2JDLE9BQU9DLEVBQUUsR0FBRztJQUNaLE9BQU9EO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9nLy4vbm9kZV9tb2R1bGVzL21hcmtkb3duLWl0L2xpYi9oZWxwZXJzL3BhcnNlX2xpbmtfZGVzdGluYXRpb24uanM/N2FmYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBQYXJzZSBsaW5rIGRlc3RpbmF0aW9uXG4vL1xuJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciB1bmVzY2FwZUFsbCA9IHJlcXVpcmUoJy4uL2NvbW1vbi91dGlscycpLnVuZXNjYXBlQWxsO1xuXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcGFyc2VMaW5rRGVzdGluYXRpb24oc3RyLCBzdGFydCwgbWF4KSB7XG4gIHZhciBjb2RlLCBsZXZlbCxcbiAgICAgIHBvcyA9IHN0YXJ0LFxuICAgICAgcmVzdWx0ID0ge1xuICAgICAgICBvazogZmFsc2UsXG4gICAgICAgIHBvczogMCxcbiAgICAgICAgbGluZXM6IDAsXG4gICAgICAgIHN0cjogJydcbiAgICAgIH07XG5cbiAgaWYgKHN0ci5jaGFyQ29kZUF0KHBvcykgPT09IDB4M0MgLyogPCAqLykge1xuICAgIHBvcysrO1xuICAgIHdoaWxlIChwb3MgPCBtYXgpIHtcbiAgICAgIGNvZGUgPSBzdHIuY2hhckNvZGVBdChwb3MpO1xuICAgICAgaWYgKGNvZGUgPT09IDB4MEEgLyogXFxuICovKSB7IHJldHVybiByZXN1bHQ7IH1cbiAgICAgIGlmIChjb2RlID09PSAweDNDIC8qIDwgKi8pIHsgcmV0dXJuIHJlc3VsdDsgfVxuICAgICAgaWYgKGNvZGUgPT09IDB4M0UgLyogPiAqLykge1xuICAgICAgICByZXN1bHQucG9zID0gcG9zICsgMTtcbiAgICAgICAgcmVzdWx0LnN0ciA9IHVuZXNjYXBlQWxsKHN0ci5zbGljZShzdGFydCArIDEsIHBvcykpO1xuICAgICAgICByZXN1bHQub2sgPSB0cnVlO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgaWYgKGNvZGUgPT09IDB4NUMgLyogXFwgKi8gJiYgcG9zICsgMSA8IG1heCkge1xuICAgICAgICBwb3MgKz0gMjtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIHBvcysrO1xuICAgIH1cblxuICAgIC8vIG5vIGNsb3NpbmcgJz4nXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8vIHRoaXMgc2hvdWxkIGJlIC4uLiB9IGVsc2UgeyAuLi4gYnJhbmNoXG5cbiAgbGV2ZWwgPSAwO1xuICB3aGlsZSAocG9zIDwgbWF4KSB7XG4gICAgY29kZSA9IHN0ci5jaGFyQ29kZUF0KHBvcyk7XG5cbiAgICBpZiAoY29kZSA9PT0gMHgyMCkgeyBicmVhazsgfVxuXG4gICAgLy8gYXNjaWkgY29udHJvbCBjaGFyYWN0ZXJzXG4gICAgaWYgKGNvZGUgPCAweDIwIHx8IGNvZGUgPT09IDB4N0YpIHsgYnJlYWs7IH1cblxuICAgIGlmIChjb2RlID09PSAweDVDIC8qIFxcICovICYmIHBvcyArIDEgPCBtYXgpIHtcbiAgICAgIGlmIChzdHIuY2hhckNvZGVBdChwb3MgKyAxKSA9PT0gMHgyMCkgeyBicmVhazsgfVxuICAgICAgcG9zICs9IDI7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAoY29kZSA9PT0gMHgyOCAvKiAoICovKSB7XG4gICAgICBsZXZlbCsrO1xuICAgICAgaWYgKGxldmVsID4gMzIpIHsgcmV0dXJuIHJlc3VsdDsgfVxuICAgIH1cblxuICAgIGlmIChjb2RlID09PSAweDI5IC8qICkgKi8pIHtcbiAgICAgIGlmIChsZXZlbCA9PT0gMCkgeyBicmVhazsgfVxuICAgICAgbGV2ZWwtLTtcbiAgICB9XG5cbiAgICBwb3MrKztcbiAgfVxuXG4gIGlmIChzdGFydCA9PT0gcG9zKSB7IHJldHVybiByZXN1bHQ7IH1cbiAgaWYgKGxldmVsICE9PSAwKSB7IHJldHVybiByZXN1bHQ7IH1cblxuICByZXN1bHQuc3RyID0gdW5lc2NhcGVBbGwoc3RyLnNsaWNlKHN0YXJ0LCBwb3MpKTtcbiAgcmVzdWx0LnBvcyA9IHBvcztcbiAgcmVzdWx0Lm9rID0gdHJ1ZTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iXSwibmFtZXMiOlsidW5lc2NhcGVBbGwiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsInBhcnNlTGlua0Rlc3RpbmF0aW9uIiwic3RyIiwic3RhcnQiLCJtYXgiLCJjb2RlIiwibGV2ZWwiLCJwb3MiLCJyZXN1bHQiLCJvayIsImxpbmVzIiwiY2hhckNvZGVBdCIsInNsaWNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/markdown-it/lib/helpers/parse_link_destination.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/markdown-it/lib/helpers/parse_link_label.js":
/*!******************************************************************!*\
  !*** ./node_modules/markdown-it/lib/helpers/parse_link_label.js ***!
  \******************************************************************/
/***/ ((module) => {

eval("// Parse link label\n//\n// this function assumes that first character (\"[\") already matches;\n// returns the end of the label\n//\n\nmodule.exports = function parseLinkLabel(state, start, disableNested) {\n    var level, found, marker, prevPos, labelEnd = -1, max = state.posMax, oldPos = state.pos;\n    state.pos = start + 1;\n    level = 1;\n    while(state.pos < max){\n        marker = state.src.charCodeAt(state.pos);\n        if (marker === 0x5D /* ] */ ) {\n            level--;\n            if (level === 0) {\n                found = true;\n                break;\n            }\n        }\n        prevPos = state.pos;\n        state.md.inline.skipToken(state);\n        if (marker === 0x5B /* [ */ ) {\n            if (prevPos === state.pos - 1) {\n                // increase level if we find text `[`, which is not a part of any token\n                level++;\n            } else if (disableNested) {\n                state.pos = oldPos;\n                return -1;\n            }\n        }\n    }\n    if (found) {\n        labelEnd = state.pos;\n    }\n    // restore old state\n    state.pos = oldPos;\n    return labelEnd;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL2hlbHBlcnMvcGFyc2VfbGlua19sYWJlbC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxtQkFBbUI7QUFDbkIsRUFBRTtBQUNGLG9FQUFvRTtBQUNwRSwrQkFBK0I7QUFDL0IsRUFBRTtBQUNGO0FBRUFBLE9BQU9DLE9BQU8sR0FBRyxTQUFTQyxlQUFlQyxLQUFLLEVBQUVDLEtBQUssRUFBRUMsYUFBYTtJQUNsRSxJQUFJQyxPQUFPQyxPQUFPQyxRQUFRQyxTQUN0QkMsV0FBVyxDQUFDLEdBQ1pDLE1BQU1SLE1BQU1TLE1BQU0sRUFDbEJDLFNBQVNWLE1BQU1XLEdBQUc7SUFFdEJYLE1BQU1XLEdBQUcsR0FBR1YsUUFBUTtJQUNwQkUsUUFBUTtJQUVSLE1BQU9ILE1BQU1XLEdBQUcsR0FBR0gsSUFBSztRQUN0QkgsU0FBU0wsTUFBTVksR0FBRyxDQUFDQyxVQUFVLENBQUNiLE1BQU1XLEdBQUc7UUFDdkMsSUFBSU4sV0FBVyxLQUFLLEtBQUssS0FBSTtZQUMzQkY7WUFDQSxJQUFJQSxVQUFVLEdBQUc7Z0JBQ2ZDLFFBQVE7Z0JBQ1I7WUFDRjtRQUNGO1FBRUFFLFVBQVVOLE1BQU1XLEdBQUc7UUFDbkJYLE1BQU1jLEVBQUUsQ0FBQ0MsTUFBTSxDQUFDQyxTQUFTLENBQUNoQjtRQUMxQixJQUFJSyxXQUFXLEtBQUssS0FBSyxLQUFJO1lBQzNCLElBQUlDLFlBQVlOLE1BQU1XLEdBQUcsR0FBRyxHQUFHO2dCQUM3Qix1RUFBdUU7Z0JBQ3ZFUjtZQUNGLE9BQU8sSUFBSUQsZUFBZTtnQkFDeEJGLE1BQU1XLEdBQUcsR0FBR0Q7Z0JBQ1osT0FBTyxDQUFDO1lBQ1Y7UUFDRjtJQUNGO0lBRUEsSUFBSU4sT0FBTztRQUNURyxXQUFXUCxNQUFNVyxHQUFHO0lBQ3RCO0lBRUEsb0JBQW9CO0lBQ3BCWCxNQUFNVyxHQUFHLEdBQUdEO0lBRVosT0FBT0g7QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2cvLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL2hlbHBlcnMvcGFyc2VfbGlua19sYWJlbC5qcz9jMGY1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIFBhcnNlIGxpbmsgbGFiZWxcbi8vXG4vLyB0aGlzIGZ1bmN0aW9uIGFzc3VtZXMgdGhhdCBmaXJzdCBjaGFyYWN0ZXIgKFwiW1wiKSBhbHJlYWR5IG1hdGNoZXM7XG4vLyByZXR1cm5zIHRoZSBlbmQgb2YgdGhlIGxhYmVsXG4vL1xuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHBhcnNlTGlua0xhYmVsKHN0YXRlLCBzdGFydCwgZGlzYWJsZU5lc3RlZCkge1xuICB2YXIgbGV2ZWwsIGZvdW5kLCBtYXJrZXIsIHByZXZQb3MsXG4gICAgICBsYWJlbEVuZCA9IC0xLFxuICAgICAgbWF4ID0gc3RhdGUucG9zTWF4LFxuICAgICAgb2xkUG9zID0gc3RhdGUucG9zO1xuXG4gIHN0YXRlLnBvcyA9IHN0YXJ0ICsgMTtcbiAgbGV2ZWwgPSAxO1xuXG4gIHdoaWxlIChzdGF0ZS5wb3MgPCBtYXgpIHtcbiAgICBtYXJrZXIgPSBzdGF0ZS5zcmMuY2hhckNvZGVBdChzdGF0ZS5wb3MpO1xuICAgIGlmIChtYXJrZXIgPT09IDB4NUQgLyogXSAqLykge1xuICAgICAgbGV2ZWwtLTtcbiAgICAgIGlmIChsZXZlbCA9PT0gMCkge1xuICAgICAgICBmb3VuZCA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIHByZXZQb3MgPSBzdGF0ZS5wb3M7XG4gICAgc3RhdGUubWQuaW5saW5lLnNraXBUb2tlbihzdGF0ZSk7XG4gICAgaWYgKG1hcmtlciA9PT0gMHg1QiAvKiBbICovKSB7XG4gICAgICBpZiAocHJldlBvcyA9PT0gc3RhdGUucG9zIC0gMSkge1xuICAgICAgICAvLyBpbmNyZWFzZSBsZXZlbCBpZiB3ZSBmaW5kIHRleHQgYFtgLCB3aGljaCBpcyBub3QgYSBwYXJ0IG9mIGFueSB0b2tlblxuICAgICAgICBsZXZlbCsrO1xuICAgICAgfSBlbHNlIGlmIChkaXNhYmxlTmVzdGVkKSB7XG4gICAgICAgIHN0YXRlLnBvcyA9IG9sZFBvcztcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChmb3VuZCkge1xuICAgIGxhYmVsRW5kID0gc3RhdGUucG9zO1xuICB9XG5cbiAgLy8gcmVzdG9yZSBvbGQgc3RhdGVcbiAgc3RhdGUucG9zID0gb2xkUG9zO1xuXG4gIHJldHVybiBsYWJlbEVuZDtcbn07XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInBhcnNlTGlua0xhYmVsIiwic3RhdGUiLCJzdGFydCIsImRpc2FibGVOZXN0ZWQiLCJsZXZlbCIsImZvdW5kIiwibWFya2VyIiwicHJldlBvcyIsImxhYmVsRW5kIiwibWF4IiwicG9zTWF4Iiwib2xkUG9zIiwicG9zIiwic3JjIiwiY2hhckNvZGVBdCIsIm1kIiwiaW5saW5lIiwic2tpcFRva2VuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/markdown-it/lib/helpers/parse_link_label.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/markdown-it/lib/helpers/parse_link_title.js":
/*!******************************************************************!*\
  !*** ./node_modules/markdown-it/lib/helpers/parse_link_title.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Parse link title\n//\n\nvar unescapeAll = (__webpack_require__(/*! ../common/utils */ \"(rsc)/./node_modules/markdown-it/lib/common/utils.js\").unescapeAll);\nmodule.exports = function parseLinkTitle(str, start, max) {\n    var code, marker, lines = 0, pos = start, result = {\n        ok: false,\n        pos: 0,\n        lines: 0,\n        str: \"\"\n    };\n    if (pos >= max) {\n        return result;\n    }\n    marker = str.charCodeAt(pos);\n    if (marker !== 0x22 /* \" */  && marker !== 0x27 /* ' */  && marker !== 0x28 /* ( */ ) {\n        return result;\n    }\n    pos++;\n    // if opening marker is \"(\", switch it to closing marker \")\"\n    if (marker === 0x28) {\n        marker = 0x29;\n    }\n    while(pos < max){\n        code = str.charCodeAt(pos);\n        if (code === marker) {\n            result.pos = pos + 1;\n            result.lines = lines;\n            result.str = unescapeAll(str.slice(start + 1, pos));\n            result.ok = true;\n            return result;\n        } else if (code === 0x28 /* ( */  && marker === 0x29 /* ) */ ) {\n            return result;\n        } else if (code === 0x0A) {\n            lines++;\n        } else if (code === 0x5C /* \\ */  && pos + 1 < max) {\n            pos++;\n            if (str.charCodeAt(pos) === 0x0A) {\n                lines++;\n            }\n        }\n        pos++;\n    }\n    return result;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL2hlbHBlcnMvcGFyc2VfbGlua190aXRsZS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxtQkFBbUI7QUFDbkIsRUFBRTtBQUNGO0FBR0EsSUFBSUEsY0FBY0MsZ0hBQXNDO0FBR3hEQyxPQUFPQyxPQUFPLEdBQUcsU0FBU0MsZUFBZUMsR0FBRyxFQUFFQyxLQUFLLEVBQUVDLEdBQUc7SUFDdEQsSUFBSUMsTUFDQUMsUUFDQUMsUUFBUSxHQUNSQyxNQUFNTCxPQUNOTSxTQUFTO1FBQ1BDLElBQUk7UUFDSkYsS0FBSztRQUNMRCxPQUFPO1FBQ1BMLEtBQUs7SUFDUDtJQUVKLElBQUlNLE9BQU9KLEtBQUs7UUFBRSxPQUFPSztJQUFRO0lBRWpDSCxTQUFTSixJQUFJUyxVQUFVLENBQUNIO0lBRXhCLElBQUlGLFdBQVcsS0FBSyxLQUFLLE9BQU1BLFdBQVcsS0FBSyxLQUFLLE9BQU1BLFdBQVcsS0FBSyxLQUFLLEtBQUk7UUFBRSxPQUFPRztJQUFRO0lBRXBHRDtJQUVBLDREQUE0RDtJQUM1RCxJQUFJRixXQUFXLE1BQU07UUFBRUEsU0FBUztJQUFNO0lBRXRDLE1BQU9FLE1BQU1KLElBQUs7UUFDaEJDLE9BQU9ILElBQUlTLFVBQVUsQ0FBQ0g7UUFDdEIsSUFBSUgsU0FBU0MsUUFBUTtZQUNuQkcsT0FBT0QsR0FBRyxHQUFHQSxNQUFNO1lBQ25CQyxPQUFPRixLQUFLLEdBQUdBO1lBQ2ZFLE9BQU9QLEdBQUcsR0FBR0wsWUFBWUssSUFBSVUsS0FBSyxDQUFDVCxRQUFRLEdBQUdLO1lBQzlDQyxPQUFPQyxFQUFFLEdBQUc7WUFDWixPQUFPRDtRQUNULE9BQU8sSUFBSUosU0FBUyxLQUFLLEtBQUssT0FBTUMsV0FBVyxLQUFLLEtBQUssS0FBSTtZQUMzRCxPQUFPRztRQUNULE9BQU8sSUFBSUosU0FBUyxNQUFNO1lBQ3hCRTtRQUNGLE9BQU8sSUFBSUYsU0FBUyxLQUFLLEtBQUssT0FBTUcsTUFBTSxJQUFJSixLQUFLO1lBQ2pESTtZQUNBLElBQUlOLElBQUlTLFVBQVUsQ0FBQ0gsU0FBUyxNQUFNO2dCQUNoQ0Q7WUFDRjtRQUNGO1FBRUFDO0lBQ0Y7SUFFQSxPQUFPQztBQUNUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvZy8uL25vZGVfbW9kdWxlcy9tYXJrZG93bi1pdC9saWIvaGVscGVycy9wYXJzZV9saW5rX3RpdGxlLmpzPzM2YTkiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gUGFyc2UgbGluayB0aXRsZVxuLy9cbid1c2Ugc3RyaWN0JztcblxuXG52YXIgdW5lc2NhcGVBbGwgPSByZXF1aXJlKCcuLi9jb21tb24vdXRpbHMnKS51bmVzY2FwZUFsbDtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHBhcnNlTGlua1RpdGxlKHN0ciwgc3RhcnQsIG1heCkge1xuICB2YXIgY29kZSxcbiAgICAgIG1hcmtlcixcbiAgICAgIGxpbmVzID0gMCxcbiAgICAgIHBvcyA9IHN0YXJ0LFxuICAgICAgcmVzdWx0ID0ge1xuICAgICAgICBvazogZmFsc2UsXG4gICAgICAgIHBvczogMCxcbiAgICAgICAgbGluZXM6IDAsXG4gICAgICAgIHN0cjogJydcbiAgICAgIH07XG5cbiAgaWYgKHBvcyA+PSBtYXgpIHsgcmV0dXJuIHJlc3VsdDsgfVxuXG4gIG1hcmtlciA9IHN0ci5jaGFyQ29kZUF0KHBvcyk7XG5cbiAgaWYgKG1hcmtlciAhPT0gMHgyMiAvKiBcIiAqLyAmJiBtYXJrZXIgIT09IDB4MjcgLyogJyAqLyAmJiBtYXJrZXIgIT09IDB4MjggLyogKCAqLykgeyByZXR1cm4gcmVzdWx0OyB9XG5cbiAgcG9zKys7XG5cbiAgLy8gaWYgb3BlbmluZyBtYXJrZXIgaXMgXCIoXCIsIHN3aXRjaCBpdCB0byBjbG9zaW5nIG1hcmtlciBcIilcIlxuICBpZiAobWFya2VyID09PSAweDI4KSB7IG1hcmtlciA9IDB4Mjk7IH1cblxuICB3aGlsZSAocG9zIDwgbWF4KSB7XG4gICAgY29kZSA9IHN0ci5jaGFyQ29kZUF0KHBvcyk7XG4gICAgaWYgKGNvZGUgPT09IG1hcmtlcikge1xuICAgICAgcmVzdWx0LnBvcyA9IHBvcyArIDE7XG4gICAgICByZXN1bHQubGluZXMgPSBsaW5lcztcbiAgICAgIHJlc3VsdC5zdHIgPSB1bmVzY2FwZUFsbChzdHIuc2xpY2Uoc3RhcnQgKyAxLCBwb3MpKTtcbiAgICAgIHJlc3VsdC5vayA9IHRydWU7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0gZWxzZSBpZiAoY29kZSA9PT0gMHgyOCAvKiAoICovICYmIG1hcmtlciA9PT0gMHgyOSAvKiApICovKSB7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0gZWxzZSBpZiAoY29kZSA9PT0gMHgwQSkge1xuICAgICAgbGluZXMrKztcbiAgICB9IGVsc2UgaWYgKGNvZGUgPT09IDB4NUMgLyogXFwgKi8gJiYgcG9zICsgMSA8IG1heCkge1xuICAgICAgcG9zKys7XG4gICAgICBpZiAoc3RyLmNoYXJDb2RlQXQocG9zKSA9PT0gMHgwQSkge1xuICAgICAgICBsaW5lcysrO1xuICAgICAgfVxuICAgIH1cblxuICAgIHBvcysrO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iXSwibmFtZXMiOlsidW5lc2NhcGVBbGwiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsInBhcnNlTGlua1RpdGxlIiwic3RyIiwic3RhcnQiLCJtYXgiLCJjb2RlIiwibWFya2VyIiwibGluZXMiLCJwb3MiLCJyZXN1bHQiLCJvayIsImNoYXJDb2RlQXQiLCJzbGljZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/markdown-it/lib/helpers/parse_link_title.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/markdown-it/lib/index.js":
/*!***********************************************!*\
  !*** ./node_modules/markdown-it/lib/index.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Main parser class\n\nvar utils = __webpack_require__(/*! ./common/utils */ \"(rsc)/./node_modules/markdown-it/lib/common/utils.js\");\nvar helpers = __webpack_require__(/*! ./helpers */ \"(rsc)/./node_modules/markdown-it/lib/helpers/index.js\");\nvar Renderer = __webpack_require__(/*! ./renderer */ \"(rsc)/./node_modules/markdown-it/lib/renderer.js\");\nvar ParserCore = __webpack_require__(/*! ./parser_core */ \"(rsc)/./node_modules/markdown-it/lib/parser_core.js\");\nvar ParserBlock = __webpack_require__(/*! ./parser_block */ \"(rsc)/./node_modules/markdown-it/lib/parser_block.js\");\nvar ParserInline = __webpack_require__(/*! ./parser_inline */ \"(rsc)/./node_modules/markdown-it/lib/parser_inline.js\");\nvar LinkifyIt = __webpack_require__(/*! linkify-it */ \"(rsc)/./node_modules/linkify-it/index.js\");\nvar mdurl = __webpack_require__(/*! mdurl */ \"(rsc)/./node_modules/mdurl/index.js\");\nvar punycode = __webpack_require__(/*! punycode */ \"punycode\");\nvar config = {\n    default: __webpack_require__(/*! ./presets/default */ \"(rsc)/./node_modules/markdown-it/lib/presets/default.js\"),\n    zero: __webpack_require__(/*! ./presets/zero */ \"(rsc)/./node_modules/markdown-it/lib/presets/zero.js\"),\n    commonmark: __webpack_require__(/*! ./presets/commonmark */ \"(rsc)/./node_modules/markdown-it/lib/presets/commonmark.js\")\n};\n////////////////////////////////////////////////////////////////////////////////\n//\n// This validator can prohibit more than really needed to prevent XSS. It's a\n// tradeoff to keep code simple and to be secure by default.\n//\n// If you need different setup - override validator method as you wish. Or\n// replace it with dummy function and use external sanitizer.\n//\nvar BAD_PROTO_RE = /^(vbscript|javascript|file|data):/;\nvar GOOD_DATA_RE = /^data:image\\/(gif|png|jpeg|webp);/;\nfunction validateLink(url) {\n    // url should be normalized at this point, and existing entities are decoded\n    var str = url.trim().toLowerCase();\n    return BAD_PROTO_RE.test(str) ? GOOD_DATA_RE.test(str) ? true : false : true;\n}\n////////////////////////////////////////////////////////////////////////////////\nvar RECODE_HOSTNAME_FOR = [\n    \"http:\",\n    \"https:\",\n    \"mailto:\"\n];\nfunction normalizeLink(url) {\n    var parsed = mdurl.parse(url, true);\n    if (parsed.hostname) {\n        // Encode hostnames in urls like:\n        // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`\n        //\n        // We don't encode unknown schemas, because it's likely that we encode\n        // something we shouldn't (e.g. `skype:name` treated as `skype:host`)\n        //\n        if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {\n            try {\n                parsed.hostname = punycode.toASCII(parsed.hostname);\n            } catch (er) {}\n        }\n    }\n    return mdurl.encode(mdurl.format(parsed));\n}\nfunction normalizeLinkText(url) {\n    var parsed = mdurl.parse(url, true);\n    if (parsed.hostname) {\n        // Encode hostnames in urls like:\n        // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`\n        //\n        // We don't encode unknown schemas, because it's likely that we encode\n        // something we shouldn't (e.g. `skype:name` treated as `skype:host`)\n        //\n        if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {\n            try {\n                parsed.hostname = punycode.toUnicode(parsed.hostname);\n            } catch (er) {}\n        }\n    }\n    // add '%' to exclude list because of https://github.com/markdown-it/markdown-it/issues/720\n    return mdurl.decode(mdurl.format(parsed), mdurl.decode.defaultChars + \"%\");\n}\n/**\n * class MarkdownIt\n *\n * Main parser/renderer class.\n *\n * ##### Usage\n *\n * ```javascript\n * // node.js, \"classic\" way:\n * var MarkdownIt = require('markdown-it'),\n *     md = new MarkdownIt();\n * var result = md.render('# markdown-it rulezz!');\n *\n * // node.js, the same, but with sugar:\n * var md = require('markdown-it')();\n * var result = md.render('# markdown-it rulezz!');\n *\n * // browser without AMD, added to \"window\" on script load\n * // Note, there are no dash.\n * var md = window.markdownit();\n * var result = md.render('# markdown-it rulezz!');\n * ```\n *\n * Single line rendering, without paragraph wrap:\n *\n * ```javascript\n * var md = require('markdown-it')();\n * var result = md.renderInline('__markdown-it__ rulezz!');\n * ```\n **/ /**\n * new MarkdownIt([presetName, options])\n * - presetName (String): optional, `commonmark` / `zero`\n * - options (Object)\n *\n * Creates parser instanse with given config. Can be called without `new`.\n *\n * ##### presetName\n *\n * MarkdownIt provides named presets as a convenience to quickly\n * enable/disable active syntax rules and options for common use cases.\n *\n * - [\"commonmark\"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/commonmark.js) -\n *   configures parser to strict [CommonMark](http://commonmark.org/) mode.\n * - [default](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/default.js) -\n *   similar to GFM, used when no preset name given. Enables all available rules,\n *   but still without html, typographer & autolinker.\n * - [\"zero\"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/zero.js) -\n *   all rules disabled. Useful to quickly setup your config via `.enable()`.\n *   For example, when you need only `bold` and `italic` markup and nothing else.\n *\n * ##### options:\n *\n * - __html__ - `false`. Set `true` to enable HTML tags in source. Be careful!\n *   That's not safe! You may need external sanitizer to protect output from XSS.\n *   It's better to extend features via plugins, instead of enabling HTML.\n * - __xhtmlOut__ - `false`. Set `true` to add '/' when closing single tags\n *   (`<br />`). This is needed only for full CommonMark compatibility. In real\n *   world you will need HTML output.\n * - __breaks__ - `false`. Set `true` to convert `\\n` in paragraphs into `<br>`.\n * - __langPrefix__ - `language-`. CSS language class prefix for fenced blocks.\n *   Can be useful for external highlighters.\n * - __linkify__ - `false`. Set `true` to autoconvert URL-like text to links.\n * - __typographer__  - `false`. Set `true` to enable [some language-neutral\n *   replacement](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/replacements.js) +\n *   quotes beautification (smartquotes).\n * - __quotes__ - `“”‘’`, String or Array. Double + single quotes replacement\n *   pairs, when typographer enabled and smartquotes on. For example, you can\n *   use `'«»„“'` for Russian, `'„“‚‘'` for German, and\n *   `['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›']` for French (including nbsp).\n * - __highlight__ - `null`. Highlighter function for fenced code blocks.\n *   Highlighter `function (str, lang)` should return escaped HTML. It can also\n *   return empty string if the source was not changed and should be escaped\n *   externaly. If result starts with <pre... internal wrapper is skipped.\n *\n * ##### Example\n *\n * ```javascript\n * // commonmark mode\n * var md = require('markdown-it')('commonmark');\n *\n * // default mode\n * var md = require('markdown-it')();\n *\n * // enable everything\n * var md = require('markdown-it')({\n *   html: true,\n *   linkify: true,\n *   typographer: true\n * });\n * ```\n *\n * ##### Syntax highlighting\n *\n * ```js\n * var hljs = require('highlight.js') // https://highlightjs.org/\n *\n * var md = require('markdown-it')({\n *   highlight: function (str, lang) {\n *     if (lang && hljs.getLanguage(lang)) {\n *       try {\n *         return hljs.highlight(str, { language: lang, ignoreIllegals: true }).value;\n *       } catch (__) {}\n *     }\n *\n *     return ''; // use external default escaping\n *   }\n * });\n * ```\n *\n * Or with full wrapper override (if you need assign class to `<pre>`):\n *\n * ```javascript\n * var hljs = require('highlight.js') // https://highlightjs.org/\n *\n * // Actual default values\n * var md = require('markdown-it')({\n *   highlight: function (str, lang) {\n *     if (lang && hljs.getLanguage(lang)) {\n *       try {\n *         return '<pre class=\"hljs\"><code>' +\n *                hljs.highlight(str, { language: lang, ignoreIllegals: true }).value +\n *                '</code></pre>';\n *       } catch (__) {}\n *     }\n *\n *     return '<pre class=\"hljs\"><code>' + md.utils.escapeHtml(str) + '</code></pre>';\n *   }\n * });\n * ```\n *\n **/ function MarkdownIt(presetName, options) {\n    if (!(this instanceof MarkdownIt)) {\n        return new MarkdownIt(presetName, options);\n    }\n    if (!options) {\n        if (!utils.isString(presetName)) {\n            options = presetName || {};\n            presetName = \"default\";\n        }\n    }\n    /**\n   * MarkdownIt#inline -> ParserInline\n   *\n   * Instance of [[ParserInline]]. You may need it to add new rules when\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n   * [[MarkdownIt.enable]].\n   **/ this.inline = new ParserInline();\n    /**\n   * MarkdownIt#block -> ParserBlock\n   *\n   * Instance of [[ParserBlock]]. You may need it to add new rules when\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n   * [[MarkdownIt.enable]].\n   **/ this.block = new ParserBlock();\n    /**\n   * MarkdownIt#core -> Core\n   *\n   * Instance of [[Core]] chain executor. You may need it to add new rules when\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n   * [[MarkdownIt.enable]].\n   **/ this.core = new ParserCore();\n    /**\n   * MarkdownIt#renderer -> Renderer\n   *\n   * Instance of [[Renderer]]. Use it to modify output look. Or to add rendering\n   * rules for new token types, generated by plugins.\n   *\n   * ##### Example\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   *\n   * function myToken(tokens, idx, options, env, self) {\n   *   //...\n   *   return result;\n   * };\n   *\n   * md.renderer.rules['my_token'] = myToken\n   * ```\n   *\n   * See [[Renderer]] docs and [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.js).\n   **/ this.renderer = new Renderer();\n    /**\n   * MarkdownIt#linkify -> LinkifyIt\n   *\n   * [linkify-it](https://github.com/markdown-it/linkify-it) instance.\n   * Used by [linkify](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/linkify.js)\n   * rule.\n   **/ this.linkify = new LinkifyIt();\n    /**\n   * MarkdownIt#validateLink(url) -> Boolean\n   *\n   * Link validation function. CommonMark allows too much in links. By default\n   * we disable `javascript:`, `vbscript:`, `file:` schemas, and almost all `data:...` schemas\n   * except some embedded image types.\n   *\n   * You can change this behaviour:\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   * // enable everything\n   * md.validateLink = function () { return true; }\n   * ```\n   **/ this.validateLink = validateLink;\n    /**\n   * MarkdownIt#normalizeLink(url) -> String\n   *\n   * Function used to encode link url to a machine-readable format,\n   * which includes url-encoding, punycode, etc.\n   **/ this.normalizeLink = normalizeLink;\n    /**\n   * MarkdownIt#normalizeLinkText(url) -> String\n   *\n   * Function used to decode link url to a human-readable format`\n   **/ this.normalizeLinkText = normalizeLinkText;\n    // Expose utils & helpers for easy acces from plugins\n    /**\n   * MarkdownIt#utils -> utils\n   *\n   * Assorted utility functions, useful to write plugins. See details\n   * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/common/utils.js).\n   **/ this.utils = utils;\n    /**\n   * MarkdownIt#helpers -> helpers\n   *\n   * Link components parser functions, useful to write plugins. See details\n   * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/helpers).\n   **/ this.helpers = utils.assign({}, helpers);\n    this.options = {};\n    this.configure(presetName);\n    if (options) {\n        this.set(options);\n    }\n}\n/** chainable\n * MarkdownIt.set(options)\n *\n * Set parser options (in the same format as in constructor). Probably, you\n * will never need it, but you can change options after constructor call.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')()\n *             .set({ html: true, breaks: true })\n *             .set({ typographer, true });\n * ```\n *\n * __Note:__ To achieve the best possible performance, don't modify a\n * `markdown-it` instance options on the fly. If you need multiple configurations\n * it's best to create multiple instances and initialize each with separate\n * config.\n **/ MarkdownIt.prototype.set = function(options) {\n    utils.assign(this.options, options);\n    return this;\n};\n/** chainable, internal\n * MarkdownIt.configure(presets)\n *\n * Batch load of all options and compenent settings. This is internal method,\n * and you probably will not need it. But if you will - see available presets\n * and data structure [here](https://github.com/markdown-it/markdown-it/tree/master/lib/presets)\n *\n * We strongly recommend to use presets instead of direct config loads. That\n * will give better compatibility with next versions.\n **/ MarkdownIt.prototype.configure = function(presets) {\n    var self = this, presetName;\n    if (utils.isString(presets)) {\n        presetName = presets;\n        presets = config[presetName];\n        if (!presets) {\n            throw new Error('Wrong `markdown-it` preset \"' + presetName + '\", check name');\n        }\n    }\n    if (!presets) {\n        throw new Error(\"Wrong `markdown-it` preset, can't be empty\");\n    }\n    if (presets.options) {\n        self.set(presets.options);\n    }\n    if (presets.components) {\n        Object.keys(presets.components).forEach(function(name) {\n            if (presets.components[name].rules) {\n                self[name].ruler.enableOnly(presets.components[name].rules);\n            }\n            if (presets.components[name].rules2) {\n                self[name].ruler2.enableOnly(presets.components[name].rules2);\n            }\n        });\n    }\n    return this;\n};\n/** chainable\n * MarkdownIt.enable(list, ignoreInvalid)\n * - list (String|Array): rule name or list of rule names to enable\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Enable list or rules. It will automatically find appropriate components,\n * containing rules with given names. If rule not found, and `ignoreInvalid`\n * not set - throws exception.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')()\n *             .enable(['sub', 'sup'])\n *             .disable('smartquotes');\n * ```\n **/ MarkdownIt.prototype.enable = function(list, ignoreInvalid) {\n    var result = [];\n    if (!Array.isArray(list)) {\n        list = [\n            list\n        ];\n    }\n    [\n        \"core\",\n        \"block\",\n        \"inline\"\n    ].forEach(function(chain) {\n        result = result.concat(this[chain].ruler.enable(list, true));\n    }, this);\n    result = result.concat(this.inline.ruler2.enable(list, true));\n    var missed = list.filter(function(name) {\n        return result.indexOf(name) < 0;\n    });\n    if (missed.length && !ignoreInvalid) {\n        throw new Error(\"MarkdownIt. Failed to enable unknown rule(s): \" + missed);\n    }\n    return this;\n};\n/** chainable\n * MarkdownIt.disable(list, ignoreInvalid)\n * - list (String|Array): rule name or list of rule names to disable.\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * The same as [[MarkdownIt.enable]], but turn specified rules off.\n **/ MarkdownIt.prototype.disable = function(list, ignoreInvalid) {\n    var result = [];\n    if (!Array.isArray(list)) {\n        list = [\n            list\n        ];\n    }\n    [\n        \"core\",\n        \"block\",\n        \"inline\"\n    ].forEach(function(chain) {\n        result = result.concat(this[chain].ruler.disable(list, true));\n    }, this);\n    result = result.concat(this.inline.ruler2.disable(list, true));\n    var missed = list.filter(function(name) {\n        return result.indexOf(name) < 0;\n    });\n    if (missed.length && !ignoreInvalid) {\n        throw new Error(\"MarkdownIt. Failed to disable unknown rule(s): \" + missed);\n    }\n    return this;\n};\n/** chainable\n * MarkdownIt.use(plugin, params)\n *\n * Load specified plugin with given params into current parser instance.\n * It's just a sugar to call `plugin(md, params)` with curring.\n *\n * ##### Example\n *\n * ```javascript\n * var iterator = require('markdown-it-for-inline');\n * var md = require('markdown-it')()\n *             .use(iterator, 'foo_replace', 'text', function (tokens, idx) {\n *               tokens[idx].content = tokens[idx].content.replace(/foo/g, 'bar');\n *             });\n * ```\n **/ MarkdownIt.prototype.use = function(plugin /*, params, ... */ ) {\n    var args = [\n        this\n    ].concat(Array.prototype.slice.call(arguments, 1));\n    plugin.apply(plugin, args);\n    return this;\n};\n/** internal\n * MarkdownIt.parse(src, env) -> Array\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * Parse input string and return list of block tokens (special token type\n * \"inline\" will contain list of inline tokens). You should not call this\n * method directly, until you write custom renderer (for example, to produce\n * AST).\n *\n * `env` is used to pass data between \"distributed\" rules and return additional\n * metadata like reference info, needed for the renderer. It also can be used to\n * inject data in specific cases. Usually, you will be ok to pass `{}`,\n * and then pass updated object to renderer.\n **/ MarkdownIt.prototype.parse = function(src, env) {\n    if (typeof src !== \"string\") {\n        throw new Error(\"Input data should be a String\");\n    }\n    var state = new this.core.State(src, this, env);\n    this.core.process(state);\n    return state.tokens;\n};\n/**\n * MarkdownIt.render(src [, env]) -> String\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * Render markdown string into html. It does all magic for you :).\n *\n * `env` can be used to inject additional metadata (`{}` by default).\n * But you will not need it with high probability. See also comment\n * in [[MarkdownIt.parse]].\n **/ MarkdownIt.prototype.render = function(src, env) {\n    env = env || {};\n    return this.renderer.render(this.parse(src, env), this.options, env);\n};\n/** internal\n * MarkdownIt.parseInline(src, env) -> Array\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * The same as [[MarkdownIt.parse]] but skip all block rules. It returns the\n * block tokens list with the single `inline` element, containing parsed inline\n * tokens in `children` property. Also updates `env` object.\n **/ MarkdownIt.prototype.parseInline = function(src, env) {\n    var state = new this.core.State(src, this, env);\n    state.inlineMode = true;\n    this.core.process(state);\n    return state.tokens;\n};\n/**\n * MarkdownIt.renderInline(src [, env]) -> String\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * Similar to [[MarkdownIt.render]] but for single paragraph content. Result\n * will NOT be wrapped into `<p>` tags.\n **/ MarkdownIt.prototype.renderInline = function(src, env) {\n    env = env || {};\n    return this.renderer.render(this.parseInline(src, env), this.options, env);\n};\nmodule.exports = MarkdownIt;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/markdown-it/lib/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/markdown-it/lib/parser_block.js":
/*!******************************************************!*\
  !*** ./node_modules/markdown-it/lib/parser_block.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/** internal\n * class ParserBlock\n *\n * Block-level tokenizer.\n **/ \nvar Ruler = __webpack_require__(/*! ./ruler */ \"(rsc)/./node_modules/markdown-it/lib/ruler.js\");\nvar _rules = [\n    // First 2 params - rule name & source. Secondary array - list of rules,\n    // which can be terminated by this one.\n    [\n        \"table\",\n        __webpack_require__(/*! ./rules_block/table */ \"(rsc)/./node_modules/markdown-it/lib/rules_block/table.js\"),\n        [\n            \"paragraph\",\n            \"reference\"\n        ]\n    ],\n    [\n        \"code\",\n        __webpack_require__(/*! ./rules_block/code */ \"(rsc)/./node_modules/markdown-it/lib/rules_block/code.js\")\n    ],\n    [\n        \"fence\",\n        __webpack_require__(/*! ./rules_block/fence */ \"(rsc)/./node_modules/markdown-it/lib/rules_block/fence.js\"),\n        [\n            \"paragraph\",\n            \"reference\",\n            \"blockquote\",\n            \"list\"\n        ]\n    ],\n    [\n        \"blockquote\",\n        __webpack_require__(/*! ./rules_block/blockquote */ \"(rsc)/./node_modules/markdown-it/lib/rules_block/blockquote.js\"),\n        [\n            \"paragraph\",\n            \"reference\",\n            \"blockquote\",\n            \"list\"\n        ]\n    ],\n    [\n        \"hr\",\n        __webpack_require__(/*! ./rules_block/hr */ \"(rsc)/./node_modules/markdown-it/lib/rules_block/hr.js\"),\n        [\n            \"paragraph\",\n            \"reference\",\n            \"blockquote\",\n            \"list\"\n        ]\n    ],\n    [\n        \"list\",\n        __webpack_require__(/*! ./rules_block/list */ \"(rsc)/./node_modules/markdown-it/lib/rules_block/list.js\"),\n        [\n            \"paragraph\",\n            \"reference\",\n            \"blockquote\"\n        ]\n    ],\n    [\n        \"reference\",\n        __webpack_require__(/*! ./rules_block/reference */ \"(rsc)/./node_modules/markdown-it/lib/rules_block/reference.js\")\n    ],\n    [\n        \"html_block\",\n        __webpack_require__(/*! ./rules_block/html_block */ \"(rsc)/./node_modules/markdown-it/lib/rules_block/html_block.js\"),\n        [\n            \"paragraph\",\n            \"reference\",\n            \"blockquote\"\n        ]\n    ],\n    [\n        \"heading\",\n        __webpack_require__(/*! ./rules_block/heading */ \"(rsc)/./node_modules/markdown-it/lib/rules_block/heading.js\"),\n        [\n            \"paragraph\",\n            \"reference\",\n            \"blockquote\"\n        ]\n    ],\n    [\n        \"lheading\",\n        __webpack_require__(/*! ./rules_block/lheading */ \"(rsc)/./node_modules/markdown-it/lib/rules_block/lheading.js\")\n    ],\n    [\n        \"paragraph\",\n        __webpack_require__(/*! ./rules_block/paragraph */ \"(rsc)/./node_modules/markdown-it/lib/rules_block/paragraph.js\")\n    ]\n];\n/**\n * new ParserBlock()\n **/ function ParserBlock() {\n    /**\n   * ParserBlock#ruler -> Ruler\n   *\n   * [[Ruler]] instance. Keep configuration of block rules.\n   **/ this.ruler = new Ruler();\n    for(var i = 0; i < _rules.length; i++){\n        this.ruler.push(_rules[i][0], _rules[i][1], {\n            alt: (_rules[i][2] || []).slice()\n        });\n    }\n}\n// Generate tokens for input range\n//\nParserBlock.prototype.tokenize = function(state, startLine, endLine) {\n    var ok, i, prevLine, rules = this.ruler.getRules(\"\"), len = rules.length, line = startLine, hasEmptyLines = false, maxNesting = state.md.options.maxNesting;\n    while(line < endLine){\n        state.line = line = state.skipEmptyLines(line);\n        if (line >= endLine) {\n            break;\n        }\n        // Termination condition for nested calls.\n        // Nested calls currently used for blockquotes & lists\n        if (state.sCount[line] < state.blkIndent) {\n            break;\n        }\n        // If nesting level exceeded - skip tail to the end. That's not ordinary\n        // situation and we should not care about content.\n        if (state.level >= maxNesting) {\n            state.line = endLine;\n            break;\n        }\n        // Try all possible rules.\n        // On success, rule should:\n        //\n        // - update `state.line`\n        // - update `state.tokens`\n        // - return true\n        prevLine = state.line;\n        for(i = 0; i < len; i++){\n            ok = rules[i](state, line, endLine, false);\n            if (ok) {\n                if (prevLine >= state.line) {\n                    throw new Error(\"block rule didn't increment state.line\");\n                }\n                break;\n            }\n        }\n        // this can only happen if user disables paragraph rule\n        if (!ok) throw new Error(\"none of the block rules matched\");\n        // set state.tight if we had an empty line before current tag\n        // i.e. latest empty line should not count\n        state.tight = !hasEmptyLines;\n        // paragraph might \"eat\" one newline after it in nested lists\n        if (state.isEmpty(state.line - 1)) {\n            hasEmptyLines = true;\n        }\n        line = state.line;\n        if (line < endLine && state.isEmpty(line)) {\n            hasEmptyLines = true;\n            line++;\n            state.line = line;\n        }\n    }\n};\n/**\n * ParserBlock.parse(str, md, env, outTokens)\n *\n * Process input string and push block tokens into `outTokens`\n **/ ParserBlock.prototype.parse = function(src, md, env, outTokens) {\n    var state;\n    if (!src) {\n        return;\n    }\n    state = new this.State(src, md, env, outTokens);\n    this.tokenize(state, state.line, state.lineMax);\n};\nParserBlock.prototype.State = __webpack_require__(/*! ./rules_block/state_block */ \"(rsc)/./node_modules/markdown-it/lib/rules_block/state_block.js\");\nmodule.exports = ParserBlock;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/markdown-it/lib/parser_block.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/markdown-it/lib/parser_core.js":
/*!*****************************************************!*\
  !*** ./node_modules/markdown-it/lib/parser_core.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/** internal\n * class Core\n *\n * Top-level rules executor. Glues block/inline parsers and does intermediate\n * transformations.\n **/ \nvar Ruler = __webpack_require__(/*! ./ruler */ \"(rsc)/./node_modules/markdown-it/lib/ruler.js\");\nvar _rules = [\n    [\n        \"normalize\",\n        __webpack_require__(/*! ./rules_core/normalize */ \"(rsc)/./node_modules/markdown-it/lib/rules_core/normalize.js\")\n    ],\n    [\n        \"block\",\n        __webpack_require__(/*! ./rules_core/block */ \"(rsc)/./node_modules/markdown-it/lib/rules_core/block.js\")\n    ],\n    [\n        \"inline\",\n        __webpack_require__(/*! ./rules_core/inline */ \"(rsc)/./node_modules/markdown-it/lib/rules_core/inline.js\")\n    ],\n    [\n        \"linkify\",\n        __webpack_require__(/*! ./rules_core/linkify */ \"(rsc)/./node_modules/markdown-it/lib/rules_core/linkify.js\")\n    ],\n    [\n        \"replacements\",\n        __webpack_require__(/*! ./rules_core/replacements */ \"(rsc)/./node_modules/markdown-it/lib/rules_core/replacements.js\")\n    ],\n    [\n        \"smartquotes\",\n        __webpack_require__(/*! ./rules_core/smartquotes */ \"(rsc)/./node_modules/markdown-it/lib/rules_core/smartquotes.js\")\n    ],\n    // `text_join` finds `text_special` tokens (for escape sequences)\n    // and joins them with the rest of the text\n    [\n        \"text_join\",\n        __webpack_require__(/*! ./rules_core/text_join */ \"(rsc)/./node_modules/markdown-it/lib/rules_core/text_join.js\")\n    ]\n];\n/**\n * new Core()\n **/ function Core() {\n    /**\n   * Core#ruler -> Ruler\n   *\n   * [[Ruler]] instance. Keep configuration of core rules.\n   **/ this.ruler = new Ruler();\n    for(var i = 0; i < _rules.length; i++){\n        this.ruler.push(_rules[i][0], _rules[i][1]);\n    }\n}\n/**\n * Core.process(state)\n *\n * Executes core chain rules.\n **/ Core.prototype.process = function(state) {\n    var i, l, rules;\n    rules = this.ruler.getRules(\"\");\n    for(i = 0, l = rules.length; i < l; i++){\n        rules[i](state);\n    }\n};\nCore.prototype.State = __webpack_require__(/*! ./rules_core/state_core */ \"(rsc)/./node_modules/markdown-it/lib/rules_core/state_core.js\");\nmodule.exports = Core;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3BhcnNlcl9jb3JlLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7OztFQUtFLEdBQ0Y7QUFHQSxJQUFJQSxRQUFTQyxtQkFBT0EsQ0FBQztBQUdyQixJQUFJQyxTQUFTO0lBQ1g7UUFBRTtRQUFrQkQsbUJBQU9BLENBQUM7S0FBZ0M7SUFDNUQ7UUFBRTtRQUFrQkEsbUJBQU9BLENBQUM7S0FBZ0M7SUFDNUQ7UUFBRTtRQUFrQkEsbUJBQU9BLENBQUM7S0FBZ0M7SUFDNUQ7UUFBRTtRQUFrQkEsbUJBQU9BLENBQUM7S0FBZ0M7SUFDNUQ7UUFBRTtRQUFrQkEsbUJBQU9BLENBQUM7S0FBZ0M7SUFDNUQ7UUFBRTtRQUFrQkEsbUJBQU9BLENBQUM7S0FBZ0M7SUFDNUQsaUVBQWlFO0lBQ2pFLDJDQUEyQztJQUMzQztRQUFFO1FBQWtCQSxtQkFBT0EsQ0FBQztLQUFnQztDQUM3RDtBQUdEOztFQUVFLEdBQ0YsU0FBU0U7SUFDUDs7OztJQUlFLEdBQ0YsSUFBSSxDQUFDQyxLQUFLLEdBQUcsSUFBSUo7SUFFakIsSUFBSyxJQUFJSyxJQUFJLEdBQUdBLElBQUlILE9BQU9JLE1BQU0sRUFBRUQsSUFBSztRQUN0QyxJQUFJLENBQUNELEtBQUssQ0FBQ0csSUFBSSxDQUFDTCxNQUFNLENBQUNHLEVBQUUsQ0FBQyxFQUFFLEVBQUVILE1BQU0sQ0FBQ0csRUFBRSxDQUFDLEVBQUU7SUFDNUM7QUFDRjtBQUdBOzs7O0VBSUUsR0FDRkYsS0FBS0ssU0FBUyxDQUFDQyxPQUFPLEdBQUcsU0FBVUMsS0FBSztJQUN0QyxJQUFJTCxHQUFHTSxHQUFHQztJQUVWQSxRQUFRLElBQUksQ0FBQ1IsS0FBSyxDQUFDUyxRQUFRLENBQUM7SUFFNUIsSUFBS1IsSUFBSSxHQUFHTSxJQUFJQyxNQUFNTixNQUFNLEVBQUVELElBQUlNLEdBQUdOLElBQUs7UUFDeENPLEtBQUssQ0FBQ1AsRUFBRSxDQUFDSztJQUNYO0FBQ0Y7QUFFQVAsS0FBS0ssU0FBUyxDQUFDTSxLQUFLLEdBQUdiLG1CQUFPQSxDQUFDO0FBRy9CYyxPQUFPQyxPQUFPLEdBQUdiIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvZy8uL25vZGVfbW9kdWxlcy9tYXJrZG93bi1pdC9saWIvcGFyc2VyX2NvcmUuanM/NmE5NyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiogaW50ZXJuYWxcbiAqIGNsYXNzIENvcmVcbiAqXG4gKiBUb3AtbGV2ZWwgcnVsZXMgZXhlY3V0b3IuIEdsdWVzIGJsb2NrL2lubGluZSBwYXJzZXJzIGFuZCBkb2VzIGludGVybWVkaWF0ZVxuICogdHJhbnNmb3JtYXRpb25zLlxuICoqL1xuJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBSdWxlciAgPSByZXF1aXJlKCcuL3J1bGVyJyk7XG5cblxudmFyIF9ydWxlcyA9IFtcbiAgWyAnbm9ybWFsaXplJywgICAgICByZXF1aXJlKCcuL3J1bGVzX2NvcmUvbm9ybWFsaXplJykgICAgICBdLFxuICBbICdibG9jaycsICAgICAgICAgIHJlcXVpcmUoJy4vcnVsZXNfY29yZS9ibG9jaycpICAgICAgICAgIF0sXG4gIFsgJ2lubGluZScsICAgICAgICAgcmVxdWlyZSgnLi9ydWxlc19jb3JlL2lubGluZScpICAgICAgICAgXSxcbiAgWyAnbGlua2lmeScsICAgICAgICByZXF1aXJlKCcuL3J1bGVzX2NvcmUvbGlua2lmeScpICAgICAgICBdLFxuICBbICdyZXBsYWNlbWVudHMnLCAgIHJlcXVpcmUoJy4vcnVsZXNfY29yZS9yZXBsYWNlbWVudHMnKSAgIF0sXG4gIFsgJ3NtYXJ0cXVvdGVzJywgICAgcmVxdWlyZSgnLi9ydWxlc19jb3JlL3NtYXJ0cXVvdGVzJykgICAgXSxcbiAgLy8gYHRleHRfam9pbmAgZmluZHMgYHRleHRfc3BlY2lhbGAgdG9rZW5zIChmb3IgZXNjYXBlIHNlcXVlbmNlcylcbiAgLy8gYW5kIGpvaW5zIHRoZW0gd2l0aCB0aGUgcmVzdCBvZiB0aGUgdGV4dFxuICBbICd0ZXh0X2pvaW4nLCAgICAgIHJlcXVpcmUoJy4vcnVsZXNfY29yZS90ZXh0X2pvaW4nKSAgICAgIF1cbl07XG5cblxuLyoqXG4gKiBuZXcgQ29yZSgpXG4gKiovXG5mdW5jdGlvbiBDb3JlKCkge1xuICAvKipcbiAgICogQ29yZSNydWxlciAtPiBSdWxlclxuICAgKlxuICAgKiBbW1J1bGVyXV0gaW5zdGFuY2UuIEtlZXAgY29uZmlndXJhdGlvbiBvZiBjb3JlIHJ1bGVzLlxuICAgKiovXG4gIHRoaXMucnVsZXIgPSBuZXcgUnVsZXIoKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IF9ydWxlcy5sZW5ndGg7IGkrKykge1xuICAgIHRoaXMucnVsZXIucHVzaChfcnVsZXNbaV1bMF0sIF9ydWxlc1tpXVsxXSk7XG4gIH1cbn1cblxuXG4vKipcbiAqIENvcmUucHJvY2VzcyhzdGF0ZSlcbiAqXG4gKiBFeGVjdXRlcyBjb3JlIGNoYWluIHJ1bGVzLlxuICoqL1xuQ29yZS5wcm90b3R5cGUucHJvY2VzcyA9IGZ1bmN0aW9uIChzdGF0ZSkge1xuICB2YXIgaSwgbCwgcnVsZXM7XG5cbiAgcnVsZXMgPSB0aGlzLnJ1bGVyLmdldFJ1bGVzKCcnKTtcblxuICBmb3IgKGkgPSAwLCBsID0gcnVsZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgcnVsZXNbaV0oc3RhdGUpO1xuICB9XG59O1xuXG5Db3JlLnByb3RvdHlwZS5TdGF0ZSA9IHJlcXVpcmUoJy4vcnVsZXNfY29yZS9zdGF0ZV9jb3JlJyk7XG5cblxubW9kdWxlLmV4cG9ydHMgPSBDb3JlO1xuIl0sIm5hbWVzIjpbIlJ1bGVyIiwicmVxdWlyZSIsIl9ydWxlcyIsIkNvcmUiLCJydWxlciIsImkiLCJsZW5ndGgiLCJwdXNoIiwicHJvdG90eXBlIiwicHJvY2VzcyIsInN0YXRlIiwibCIsInJ1bGVzIiwiZ2V0UnVsZXMiLCJTdGF0ZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/markdown-it/lib/parser_core.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/markdown-it/lib/parser_inline.js":
/*!*******************************************************!*\
  !*** ./node_modules/markdown-it/lib/parser_inline.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/** internal\n * class ParserInline\n *\n * Tokenizes paragraph content.\n **/ \nvar Ruler = __webpack_require__(/*! ./ruler */ \"(rsc)/./node_modules/markdown-it/lib/ruler.js\");\n////////////////////////////////////////////////////////////////////////////////\n// Parser rules\nvar _rules = [\n    [\n        \"text\",\n        __webpack_require__(/*! ./rules_inline/text */ \"(rsc)/./node_modules/markdown-it/lib/rules_inline/text.js\")\n    ],\n    [\n        \"linkify\",\n        __webpack_require__(/*! ./rules_inline/linkify */ \"(rsc)/./node_modules/markdown-it/lib/rules_inline/linkify.js\")\n    ],\n    [\n        \"newline\",\n        __webpack_require__(/*! ./rules_inline/newline */ \"(rsc)/./node_modules/markdown-it/lib/rules_inline/newline.js\")\n    ],\n    [\n        \"escape\",\n        __webpack_require__(/*! ./rules_inline/escape */ \"(rsc)/./node_modules/markdown-it/lib/rules_inline/escape.js\")\n    ],\n    [\n        \"backticks\",\n        __webpack_require__(/*! ./rules_inline/backticks */ \"(rsc)/./node_modules/markdown-it/lib/rules_inline/backticks.js\")\n    ],\n    [\n        \"strikethrough\",\n        (__webpack_require__(/*! ./rules_inline/strikethrough */ \"(rsc)/./node_modules/markdown-it/lib/rules_inline/strikethrough.js\").tokenize)\n    ],\n    [\n        \"emphasis\",\n        (__webpack_require__(/*! ./rules_inline/emphasis */ \"(rsc)/./node_modules/markdown-it/lib/rules_inline/emphasis.js\").tokenize)\n    ],\n    [\n        \"link\",\n        __webpack_require__(/*! ./rules_inline/link */ \"(rsc)/./node_modules/markdown-it/lib/rules_inline/link.js\")\n    ],\n    [\n        \"image\",\n        __webpack_require__(/*! ./rules_inline/image */ \"(rsc)/./node_modules/markdown-it/lib/rules_inline/image.js\")\n    ],\n    [\n        \"autolink\",\n        __webpack_require__(/*! ./rules_inline/autolink */ \"(rsc)/./node_modules/markdown-it/lib/rules_inline/autolink.js\")\n    ],\n    [\n        \"html_inline\",\n        __webpack_require__(/*! ./rules_inline/html_inline */ \"(rsc)/./node_modules/markdown-it/lib/rules_inline/html_inline.js\")\n    ],\n    [\n        \"entity\",\n        __webpack_require__(/*! ./rules_inline/entity */ \"(rsc)/./node_modules/markdown-it/lib/rules_inline/entity.js\")\n    ]\n];\n// `rule2` ruleset was created specifically for emphasis/strikethrough\n// post-processing and may be changed in the future.\n//\n// Don't use this for anything except pairs (plugins working with `balance_pairs`).\n//\nvar _rules2 = [\n    [\n        \"balance_pairs\",\n        __webpack_require__(/*! ./rules_inline/balance_pairs */ \"(rsc)/./node_modules/markdown-it/lib/rules_inline/balance_pairs.js\")\n    ],\n    [\n        \"strikethrough\",\n        (__webpack_require__(/*! ./rules_inline/strikethrough */ \"(rsc)/./node_modules/markdown-it/lib/rules_inline/strikethrough.js\").postProcess)\n    ],\n    [\n        \"emphasis\",\n        (__webpack_require__(/*! ./rules_inline/emphasis */ \"(rsc)/./node_modules/markdown-it/lib/rules_inline/emphasis.js\").postProcess)\n    ],\n    // rules for pairs separate '**' into its own text tokens, which may be left unused,\n    // rule below merges unused segments back with the rest of the text\n    [\n        \"fragments_join\",\n        __webpack_require__(/*! ./rules_inline/fragments_join */ \"(rsc)/./node_modules/markdown-it/lib/rules_inline/fragments_join.js\")\n    ]\n];\n/**\n * new ParserInline()\n **/ function ParserInline() {\n    var i;\n    /**\n   * ParserInline#ruler -> Ruler\n   *\n   * [[Ruler]] instance. Keep configuration of inline rules.\n   **/ this.ruler = new Ruler();\n    for(i = 0; i < _rules.length; i++){\n        this.ruler.push(_rules[i][0], _rules[i][1]);\n    }\n    /**\n   * ParserInline#ruler2 -> Ruler\n   *\n   * [[Ruler]] instance. Second ruler used for post-processing\n   * (e.g. in emphasis-like rules).\n   **/ this.ruler2 = new Ruler();\n    for(i = 0; i < _rules2.length; i++){\n        this.ruler2.push(_rules2[i][0], _rules2[i][1]);\n    }\n}\n// Skip single token by running all rules in validation mode;\n// returns `true` if any rule reported success\n//\nParserInline.prototype.skipToken = function(state) {\n    var ok, i, pos = state.pos, rules = this.ruler.getRules(\"\"), len = rules.length, maxNesting = state.md.options.maxNesting, cache = state.cache;\n    if (typeof cache[pos] !== \"undefined\") {\n        state.pos = cache[pos];\n        return;\n    }\n    if (state.level < maxNesting) {\n        for(i = 0; i < len; i++){\n            // Increment state.level and decrement it later to limit recursion.\n            // It's harmless to do here, because no tokens are created. But ideally,\n            // we'd need a separate private state variable for this purpose.\n            //\n            state.level++;\n            ok = rules[i](state, true);\n            state.level--;\n            if (ok) {\n                if (pos >= state.pos) {\n                    throw new Error(\"inline rule didn't increment state.pos\");\n                }\n                break;\n            }\n        }\n    } else {\n        // Too much nesting, just skip until the end of the paragraph.\n        //\n        // NOTE: this will cause links to behave incorrectly in the following case,\n        //       when an amount of `[` is exactly equal to `maxNesting + 1`:\n        //\n        //       [[[[[[[[[[[[[[[[[[[[[foo]()\n        //\n        // TODO: remove this workaround when CM standard will allow nested links\n        //       (we can replace it by preventing links from being parsed in\n        //       validation mode)\n        //\n        state.pos = state.posMax;\n    }\n    if (!ok) {\n        state.pos++;\n    }\n    cache[pos] = state.pos;\n};\n// Generate tokens for input range\n//\nParserInline.prototype.tokenize = function(state) {\n    var ok, i, prevPos, rules = this.ruler.getRules(\"\"), len = rules.length, end = state.posMax, maxNesting = state.md.options.maxNesting;\n    while(state.pos < end){\n        // Try all possible rules.\n        // On success, rule should:\n        //\n        // - update `state.pos`\n        // - update `state.tokens`\n        // - return true\n        prevPos = state.pos;\n        if (state.level < maxNesting) {\n            for(i = 0; i < len; i++){\n                ok = rules[i](state, false);\n                if (ok) {\n                    if (prevPos >= state.pos) {\n                        throw new Error(\"inline rule didn't increment state.pos\");\n                    }\n                    break;\n                }\n            }\n        }\n        if (ok) {\n            if (state.pos >= end) {\n                break;\n            }\n            continue;\n        }\n        state.pending += state.src[state.pos++];\n    }\n    if (state.pending) {\n        state.pushPending();\n    }\n};\n/**\n * ParserInline.parse(str, md, env, outTokens)\n *\n * Process input string and push inline tokens into `outTokens`\n **/ ParserInline.prototype.parse = function(str, md, env, outTokens) {\n    var i, rules, len;\n    var state = new this.State(str, md, env, outTokens);\n    this.tokenize(state);\n    rules = this.ruler2.getRules(\"\");\n    len = rules.length;\n    for(i = 0; i < len; i++){\n        rules[i](state);\n    }\n};\nParserInline.prototype.State = __webpack_require__(/*! ./rules_inline/state_inline */ \"(rsc)/./node_modules/markdown-it/lib/rules_inline/state_inline.js\");\nmodule.exports = ParserInline;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/markdown-it/lib/parser_inline.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/markdown-it/lib/presets/commonmark.js":
/*!************************************************************!*\
  !*** ./node_modules/markdown-it/lib/presets/commonmark.js ***!
  \************************************************************/
/***/ ((module) => {

eval("// Commonmark default options\n\nmodule.exports = {\n    options: {\n        html: true,\n        xhtmlOut: true,\n        breaks: false,\n        langPrefix: \"language-\",\n        linkify: false,\n        // Enable some language-neutral replacements + quotes beautification\n        typographer: false,\n        // Double + single quotes replacement pairs, when typographer enabled,\n        // and smartquotes on. Could be either a String or an Array.\n        //\n        // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n        // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n        quotes: \"“”‘’\",\n        /* “”‘’ */ // Highlighter function. Should return escaped HTML,\n        // or '' if the source string is not changed and should be escaped externaly.\n        // If result starts with <pre... internal wrapper is skipped.\n        //\n        // function (/*str, lang*/) { return ''; }\n        //\n        highlight: null,\n        maxNesting: 20 // Internal protection, recursion limit\n    },\n    components: {\n        core: {\n            rules: [\n                \"normalize\",\n                \"block\",\n                \"inline\",\n                \"text_join\"\n            ]\n        },\n        block: {\n            rules: [\n                \"blockquote\",\n                \"code\",\n                \"fence\",\n                \"heading\",\n                \"hr\",\n                \"html_block\",\n                \"lheading\",\n                \"list\",\n                \"reference\",\n                \"paragraph\"\n            ]\n        },\n        inline: {\n            rules: [\n                \"autolink\",\n                \"backticks\",\n                \"emphasis\",\n                \"entity\",\n                \"escape\",\n                \"html_inline\",\n                \"image\",\n                \"link\",\n                \"newline\",\n                \"text\"\n            ],\n            rules2: [\n                \"balance_pairs\",\n                \"emphasis\",\n                \"fragments_join\"\n            ]\n        }\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3ByZXNldHMvY29tbW9ubWFyay5qcyIsIm1hcHBpbmdzIjoiQUFBQSw2QkFBNkI7QUFFN0I7QUFHQUEsT0FBT0MsT0FBTyxHQUFHO0lBQ2ZDLFNBQVM7UUFDUEMsTUFBYztRQUNkQyxVQUFjO1FBQ2RDLFFBQWM7UUFDZEMsWUFBYztRQUNkQyxTQUFjO1FBRWQsb0VBQW9FO1FBQ3BFQyxhQUFjO1FBRWQsc0VBQXNFO1FBQ3RFLDREQUE0RDtRQUM1RCxFQUFFO1FBQ0Ysa0VBQWtFO1FBQ2xFLHdFQUF3RTtRQUN4RUMsUUFBUTtRQUE0QixRQUFRLEdBRTVDLG9EQUFvRDtRQUNwRCw2RUFBNkU7UUFDN0UsNkRBQTZEO1FBQzdELEVBQUU7UUFDRiwwQ0FBMEM7UUFDMUMsRUFBRTtRQUNGQyxXQUFXO1FBRVhDLFlBQWMsR0FBYyx1Q0FBdUM7SUFDckU7SUFFQUMsWUFBWTtRQUVWQyxNQUFNO1lBQ0pDLE9BQU87Z0JBQ0w7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7YUFDRDtRQUNIO1FBRUFDLE9BQU87WUFDTEQsT0FBTztnQkFDTDtnQkFDQTtnQkFDQTtnQkFDQTtnQkFDQTtnQkFDQTtnQkFDQTtnQkFDQTtnQkFDQTtnQkFDQTthQUNEO1FBQ0g7UUFFQUUsUUFBUTtZQUNORixPQUFPO2dCQUNMO2dCQUNBO2dCQUNBO2dCQUNBO2dCQUNBO2dCQUNBO2dCQUNBO2dCQUNBO2dCQUNBO2dCQUNBO2FBQ0Q7WUFDREcsUUFBUTtnQkFDTjtnQkFDQTtnQkFDQTthQUNEO1FBQ0g7SUFDRjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvZy8uL25vZGVfbW9kdWxlcy9tYXJrZG93bi1pdC9saWIvcHJlc2V0cy9jb21tb25tYXJrLmpzPzRmM2UiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29tbW9ubWFyayBkZWZhdWx0IG9wdGlvbnNcblxuJ3VzZSBzdHJpY3QnO1xuXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBvcHRpb25zOiB7XG4gICAgaHRtbDogICAgICAgICB0cnVlLCAgICAgICAgIC8vIEVuYWJsZSBIVE1MIHRhZ3MgaW4gc291cmNlXG4gICAgeGh0bWxPdXQ6ICAgICB0cnVlLCAgICAgICAgIC8vIFVzZSAnLycgdG8gY2xvc2Ugc2luZ2xlIHRhZ3MgKDxiciAvPilcbiAgICBicmVha3M6ICAgICAgIGZhbHNlLCAgICAgICAgLy8gQ29udmVydCAnXFxuJyBpbiBwYXJhZ3JhcGhzIGludG8gPGJyPlxuICAgIGxhbmdQcmVmaXg6ICAgJ2xhbmd1YWdlLScsICAvLyBDU1MgbGFuZ3VhZ2UgcHJlZml4IGZvciBmZW5jZWQgYmxvY2tzXG4gICAgbGlua2lmeTogICAgICBmYWxzZSwgICAgICAgIC8vIGF1dG9jb252ZXJ0IFVSTC1saWtlIHRleHRzIHRvIGxpbmtzXG5cbiAgICAvLyBFbmFibGUgc29tZSBsYW5ndWFnZS1uZXV0cmFsIHJlcGxhY2VtZW50cyArIHF1b3RlcyBiZWF1dGlmaWNhdGlvblxuICAgIHR5cG9ncmFwaGVyOiAgZmFsc2UsXG5cbiAgICAvLyBEb3VibGUgKyBzaW5nbGUgcXVvdGVzIHJlcGxhY2VtZW50IHBhaXJzLCB3aGVuIHR5cG9ncmFwaGVyIGVuYWJsZWQsXG4gICAgLy8gYW5kIHNtYXJ0cXVvdGVzIG9uLiBDb3VsZCBiZSBlaXRoZXIgYSBTdHJpbmcgb3IgYW4gQXJyYXkuXG4gICAgLy9cbiAgICAvLyBGb3IgZXhhbXBsZSwgeW91IGNhbiB1c2UgJ8KrwrvigJ7igJwnIGZvciBSdXNzaWFuLCAn4oCe4oCc4oCa4oCYJyBmb3IgR2VybWFuLFxuICAgIC8vIGFuZCBbJ8KrXFx4QTAnLCAnXFx4QTDCuycsICfigLlcXHhBMCcsICdcXHhBMOKAuiddIGZvciBGcmVuY2ggKGluY2x1ZGluZyBuYnNwKS5cbiAgICBxdW90ZXM6ICdcXHUyMDFjXFx1MjAxZFxcdTIwMThcXHUyMDE5JywgLyog4oCc4oCd4oCY4oCZICovXG5cbiAgICAvLyBIaWdobGlnaHRlciBmdW5jdGlvbi4gU2hvdWxkIHJldHVybiBlc2NhcGVkIEhUTUwsXG4gICAgLy8gb3IgJycgaWYgdGhlIHNvdXJjZSBzdHJpbmcgaXMgbm90IGNoYW5nZWQgYW5kIHNob3VsZCBiZSBlc2NhcGVkIGV4dGVybmFseS5cbiAgICAvLyBJZiByZXN1bHQgc3RhcnRzIHdpdGggPHByZS4uLiBpbnRlcm5hbCB3cmFwcGVyIGlzIHNraXBwZWQuXG4gICAgLy9cbiAgICAvLyBmdW5jdGlvbiAoLypzdHIsIGxhbmcqLykgeyByZXR1cm4gJyc7IH1cbiAgICAvL1xuICAgIGhpZ2hsaWdodDogbnVsbCxcblxuICAgIG1heE5lc3Rpbmc6ICAgMjAgICAgICAgICAgICAvLyBJbnRlcm5hbCBwcm90ZWN0aW9uLCByZWN1cnNpb24gbGltaXRcbiAgfSxcblxuICBjb21wb25lbnRzOiB7XG5cbiAgICBjb3JlOiB7XG4gICAgICBydWxlczogW1xuICAgICAgICAnbm9ybWFsaXplJyxcbiAgICAgICAgJ2Jsb2NrJyxcbiAgICAgICAgJ2lubGluZScsXG4gICAgICAgICd0ZXh0X2pvaW4nXG4gICAgICBdXG4gICAgfSxcblxuICAgIGJsb2NrOiB7XG4gICAgICBydWxlczogW1xuICAgICAgICAnYmxvY2txdW90ZScsXG4gICAgICAgICdjb2RlJyxcbiAgICAgICAgJ2ZlbmNlJyxcbiAgICAgICAgJ2hlYWRpbmcnLFxuICAgICAgICAnaHInLFxuICAgICAgICAnaHRtbF9ibG9jaycsXG4gICAgICAgICdsaGVhZGluZycsXG4gICAgICAgICdsaXN0JyxcbiAgICAgICAgJ3JlZmVyZW5jZScsXG4gICAgICAgICdwYXJhZ3JhcGgnXG4gICAgICBdXG4gICAgfSxcblxuICAgIGlubGluZToge1xuICAgICAgcnVsZXM6IFtcbiAgICAgICAgJ2F1dG9saW5rJyxcbiAgICAgICAgJ2JhY2t0aWNrcycsXG4gICAgICAgICdlbXBoYXNpcycsXG4gICAgICAgICdlbnRpdHknLFxuICAgICAgICAnZXNjYXBlJyxcbiAgICAgICAgJ2h0bWxfaW5saW5lJyxcbiAgICAgICAgJ2ltYWdlJyxcbiAgICAgICAgJ2xpbmsnLFxuICAgICAgICAnbmV3bGluZScsXG4gICAgICAgICd0ZXh0J1xuICAgICAgXSxcbiAgICAgIHJ1bGVzMjogW1xuICAgICAgICAnYmFsYW5jZV9wYWlycycsXG4gICAgICAgICdlbXBoYXNpcycsXG4gICAgICAgICdmcmFnbWVudHNfam9pbidcbiAgICAgIF1cbiAgICB9XG4gIH1cbn07XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIm9wdGlvbnMiLCJodG1sIiwieGh0bWxPdXQiLCJicmVha3MiLCJsYW5nUHJlZml4IiwibGlua2lmeSIsInR5cG9ncmFwaGVyIiwicXVvdGVzIiwiaGlnaGxpZ2h0IiwibWF4TmVzdGluZyIsImNvbXBvbmVudHMiLCJjb3JlIiwicnVsZXMiLCJibG9jayIsImlubGluZSIsInJ1bGVzMiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/markdown-it/lib/presets/commonmark.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/markdown-it/lib/presets/default.js":
/*!*********************************************************!*\
  !*** ./node_modules/markdown-it/lib/presets/default.js ***!
  \*********************************************************/
/***/ ((module) => {

eval("// markdown-it default options\n\nmodule.exports = {\n    options: {\n        html: false,\n        xhtmlOut: false,\n        breaks: false,\n        langPrefix: \"language-\",\n        linkify: false,\n        // Enable some language-neutral replacements + quotes beautification\n        typographer: false,\n        // Double + single quotes replacement pairs, when typographer enabled,\n        // and smartquotes on. Could be either a String or an Array.\n        //\n        // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n        // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n        quotes: \"“”‘’\",\n        /* “”‘’ */ // Highlighter function. Should return escaped HTML,\n        // or '' if the source string is not changed and should be escaped externaly.\n        // If result starts with <pre... internal wrapper is skipped.\n        //\n        // function (/*str, lang*/) { return ''; }\n        //\n        highlight: null,\n        maxNesting: 100 // Internal protection, recursion limit\n    },\n    components: {\n        core: {},\n        block: {},\n        inline: {}\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3ByZXNldHMvZGVmYXVsdC5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4QkFBOEI7QUFFOUI7QUFHQUEsT0FBT0MsT0FBTyxHQUFHO0lBQ2ZDLFNBQVM7UUFDUEMsTUFBYztRQUNkQyxVQUFjO1FBQ2RDLFFBQWM7UUFDZEMsWUFBYztRQUNkQyxTQUFjO1FBRWQsb0VBQW9FO1FBQ3BFQyxhQUFjO1FBRWQsc0VBQXNFO1FBQ3RFLDREQUE0RDtRQUM1RCxFQUFFO1FBQ0Ysa0VBQWtFO1FBQ2xFLHdFQUF3RTtRQUN4RUMsUUFBUTtRQUE0QixRQUFRLEdBRTVDLG9EQUFvRDtRQUNwRCw2RUFBNkU7UUFDN0UsNkRBQTZEO1FBQzdELEVBQUU7UUFDRiwwQ0FBMEM7UUFDMUMsRUFBRTtRQUNGQyxXQUFXO1FBRVhDLFlBQWMsSUFBZSx1Q0FBdUM7SUFDdEU7SUFFQUMsWUFBWTtRQUVWQyxNQUFNLENBQUM7UUFDUEMsT0FBTyxDQUFDO1FBQ1JDLFFBQVEsQ0FBQztJQUNYO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9nLy4vbm9kZV9tb2R1bGVzL21hcmtkb3duLWl0L2xpYi9wcmVzZXRzL2RlZmF1bHQuanM/MmFmOCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBtYXJrZG93bi1pdCBkZWZhdWx0IG9wdGlvbnNcblxuJ3VzZSBzdHJpY3QnO1xuXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBvcHRpb25zOiB7XG4gICAgaHRtbDogICAgICAgICBmYWxzZSwgICAgICAgIC8vIEVuYWJsZSBIVE1MIHRhZ3MgaW4gc291cmNlXG4gICAgeGh0bWxPdXQ6ICAgICBmYWxzZSwgICAgICAgIC8vIFVzZSAnLycgdG8gY2xvc2Ugc2luZ2xlIHRhZ3MgKDxiciAvPilcbiAgICBicmVha3M6ICAgICAgIGZhbHNlLCAgICAgICAgLy8gQ29udmVydCAnXFxuJyBpbiBwYXJhZ3JhcGhzIGludG8gPGJyPlxuICAgIGxhbmdQcmVmaXg6ICAgJ2xhbmd1YWdlLScsICAvLyBDU1MgbGFuZ3VhZ2UgcHJlZml4IGZvciBmZW5jZWQgYmxvY2tzXG4gICAgbGlua2lmeTogICAgICBmYWxzZSwgICAgICAgIC8vIGF1dG9jb252ZXJ0IFVSTC1saWtlIHRleHRzIHRvIGxpbmtzXG5cbiAgICAvLyBFbmFibGUgc29tZSBsYW5ndWFnZS1uZXV0cmFsIHJlcGxhY2VtZW50cyArIHF1b3RlcyBiZWF1dGlmaWNhdGlvblxuICAgIHR5cG9ncmFwaGVyOiAgZmFsc2UsXG5cbiAgICAvLyBEb3VibGUgKyBzaW5nbGUgcXVvdGVzIHJlcGxhY2VtZW50IHBhaXJzLCB3aGVuIHR5cG9ncmFwaGVyIGVuYWJsZWQsXG4gICAgLy8gYW5kIHNtYXJ0cXVvdGVzIG9uLiBDb3VsZCBiZSBlaXRoZXIgYSBTdHJpbmcgb3IgYW4gQXJyYXkuXG4gICAgLy9cbiAgICAvLyBGb3IgZXhhbXBsZSwgeW91IGNhbiB1c2UgJ8KrwrvigJ7igJwnIGZvciBSdXNzaWFuLCAn4oCe4oCc4oCa4oCYJyBmb3IgR2VybWFuLFxuICAgIC8vIGFuZCBbJ8KrXFx4QTAnLCAnXFx4QTDCuycsICfigLlcXHhBMCcsICdcXHhBMOKAuiddIGZvciBGcmVuY2ggKGluY2x1ZGluZyBuYnNwKS5cbiAgICBxdW90ZXM6ICdcXHUyMDFjXFx1MjAxZFxcdTIwMThcXHUyMDE5JywgLyog4oCc4oCd4oCY4oCZICovXG5cbiAgICAvLyBIaWdobGlnaHRlciBmdW5jdGlvbi4gU2hvdWxkIHJldHVybiBlc2NhcGVkIEhUTUwsXG4gICAgLy8gb3IgJycgaWYgdGhlIHNvdXJjZSBzdHJpbmcgaXMgbm90IGNoYW5nZWQgYW5kIHNob3VsZCBiZSBlc2NhcGVkIGV4dGVybmFseS5cbiAgICAvLyBJZiByZXN1bHQgc3RhcnRzIHdpdGggPHByZS4uLiBpbnRlcm5hbCB3cmFwcGVyIGlzIHNraXBwZWQuXG4gICAgLy9cbiAgICAvLyBmdW5jdGlvbiAoLypzdHIsIGxhbmcqLykgeyByZXR1cm4gJyc7IH1cbiAgICAvL1xuICAgIGhpZ2hsaWdodDogbnVsbCxcblxuICAgIG1heE5lc3Rpbmc6ICAgMTAwICAgICAgICAgICAgLy8gSW50ZXJuYWwgcHJvdGVjdGlvbiwgcmVjdXJzaW9uIGxpbWl0XG4gIH0sXG5cbiAgY29tcG9uZW50czoge1xuXG4gICAgY29yZToge30sXG4gICAgYmxvY2s6IHt9LFxuICAgIGlubGluZToge31cbiAgfVxufTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwib3B0aW9ucyIsImh0bWwiLCJ4aHRtbE91dCIsImJyZWFrcyIsImxhbmdQcmVmaXgiLCJsaW5raWZ5IiwidHlwb2dyYXBoZXIiLCJxdW90ZXMiLCJoaWdobGlnaHQiLCJtYXhOZXN0aW5nIiwiY29tcG9uZW50cyIsImNvcmUiLCJibG9jayIsImlubGluZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/markdown-it/lib/presets/default.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/markdown-it/lib/presets/zero.js":
/*!******************************************************!*\
  !*** ./node_modules/markdown-it/lib/presets/zero.js ***!
  \******************************************************/
/***/ ((module) => {

eval("// \"Zero\" preset, with nothing enabled. Useful for manual configuring of simple\n// modes. For example, to parse bold/italic only.\n\nmodule.exports = {\n    options: {\n        html: false,\n        xhtmlOut: false,\n        breaks: false,\n        langPrefix: \"language-\",\n        linkify: false,\n        // Enable some language-neutral replacements + quotes beautification\n        typographer: false,\n        // Double + single quotes replacement pairs, when typographer enabled,\n        // and smartquotes on. Could be either a String or an Array.\n        //\n        // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n        // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n        quotes: \"“”‘’\",\n        /* “”‘’ */ // Highlighter function. Should return escaped HTML,\n        // or '' if the source string is not changed and should be escaped externaly.\n        // If result starts with <pre... internal wrapper is skipped.\n        //\n        // function (/*str, lang*/) { return ''; }\n        //\n        highlight: null,\n        maxNesting: 20 // Internal protection, recursion limit\n    },\n    components: {\n        core: {\n            rules: [\n                \"normalize\",\n                \"block\",\n                \"inline\",\n                \"text_join\"\n            ]\n        },\n        block: {\n            rules: [\n                \"paragraph\"\n            ]\n        },\n        inline: {\n            rules: [\n                \"text\"\n            ],\n            rules2: [\n                \"balance_pairs\",\n                \"fragments_join\"\n            ]\n        }\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3ByZXNldHMvemVyby5qcyIsIm1hcHBpbmdzIjoiQUFBQSwrRUFBK0U7QUFDL0UsaURBQWlEO0FBRWpEO0FBR0FBLE9BQU9DLE9BQU8sR0FBRztJQUNmQyxTQUFTO1FBQ1BDLE1BQWM7UUFDZEMsVUFBYztRQUNkQyxRQUFjO1FBQ2RDLFlBQWM7UUFDZEMsU0FBYztRQUVkLG9FQUFvRTtRQUNwRUMsYUFBYztRQUVkLHNFQUFzRTtRQUN0RSw0REFBNEQ7UUFDNUQsRUFBRTtRQUNGLGtFQUFrRTtRQUNsRSx3RUFBd0U7UUFDeEVDLFFBQVE7UUFBNEIsUUFBUSxHQUU1QyxvREFBb0Q7UUFDcEQsNkVBQTZFO1FBQzdFLDZEQUE2RDtRQUM3RCxFQUFFO1FBQ0YsMENBQTBDO1FBQzFDLEVBQUU7UUFDRkMsV0FBVztRQUVYQyxZQUFjLEdBQWMsdUNBQXVDO0lBQ3JFO0lBRUFDLFlBQVk7UUFFVkMsTUFBTTtZQUNKQyxPQUFPO2dCQUNMO2dCQUNBO2dCQUNBO2dCQUNBO2FBQ0Q7UUFDSDtRQUVBQyxPQUFPO1lBQ0xELE9BQU87Z0JBQ0w7YUFDRDtRQUNIO1FBRUFFLFFBQVE7WUFDTkYsT0FBTztnQkFDTDthQUNEO1lBQ0RHLFFBQVE7Z0JBQ047Z0JBQ0E7YUFDRDtRQUNIO0lBQ0Y7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2cvLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3ByZXNldHMvemVyby5qcz9kNDliIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFwiWmVyb1wiIHByZXNldCwgd2l0aCBub3RoaW5nIGVuYWJsZWQuIFVzZWZ1bCBmb3IgbWFudWFsIGNvbmZpZ3VyaW5nIG9mIHNpbXBsZVxuLy8gbW9kZXMuIEZvciBleGFtcGxlLCB0byBwYXJzZSBib2xkL2l0YWxpYyBvbmx5LlxuXG4ndXNlIHN0cmljdCc7XG5cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIG9wdGlvbnM6IHtcbiAgICBodG1sOiAgICAgICAgIGZhbHNlLCAgICAgICAgLy8gRW5hYmxlIEhUTUwgdGFncyBpbiBzb3VyY2VcbiAgICB4aHRtbE91dDogICAgIGZhbHNlLCAgICAgICAgLy8gVXNlICcvJyB0byBjbG9zZSBzaW5nbGUgdGFncyAoPGJyIC8+KVxuICAgIGJyZWFrczogICAgICAgZmFsc2UsICAgICAgICAvLyBDb252ZXJ0ICdcXG4nIGluIHBhcmFncmFwaHMgaW50byA8YnI+XG4gICAgbGFuZ1ByZWZpeDogICAnbGFuZ3VhZ2UtJywgIC8vIENTUyBsYW5ndWFnZSBwcmVmaXggZm9yIGZlbmNlZCBibG9ja3NcbiAgICBsaW5raWZ5OiAgICAgIGZhbHNlLCAgICAgICAgLy8gYXV0b2NvbnZlcnQgVVJMLWxpa2UgdGV4dHMgdG8gbGlua3NcblxuICAgIC8vIEVuYWJsZSBzb21lIGxhbmd1YWdlLW5ldXRyYWwgcmVwbGFjZW1lbnRzICsgcXVvdGVzIGJlYXV0aWZpY2F0aW9uXG4gICAgdHlwb2dyYXBoZXI6ICBmYWxzZSxcblxuICAgIC8vIERvdWJsZSArIHNpbmdsZSBxdW90ZXMgcmVwbGFjZW1lbnQgcGFpcnMsIHdoZW4gdHlwb2dyYXBoZXIgZW5hYmxlZCxcbiAgICAvLyBhbmQgc21hcnRxdW90ZXMgb24uIENvdWxkIGJlIGVpdGhlciBhIFN0cmluZyBvciBhbiBBcnJheS5cbiAgICAvL1xuICAgIC8vIEZvciBleGFtcGxlLCB5b3UgY2FuIHVzZSAnwqvCu+KAnuKAnCcgZm9yIFJ1c3NpYW4sICfigJ7igJzigJrigJgnIGZvciBHZXJtYW4sXG4gICAgLy8gYW5kIFsnwqtcXHhBMCcsICdcXHhBMMK7JywgJ+KAuVxceEEwJywgJ1xceEEw4oC6J10gZm9yIEZyZW5jaCAoaW5jbHVkaW5nIG5ic3ApLlxuICAgIHF1b3RlczogJ1xcdTIwMWNcXHUyMDFkXFx1MjAxOFxcdTIwMTknLCAvKiDigJzigJ3igJjigJkgKi9cblxuICAgIC8vIEhpZ2hsaWdodGVyIGZ1bmN0aW9uLiBTaG91bGQgcmV0dXJuIGVzY2FwZWQgSFRNTCxcbiAgICAvLyBvciAnJyBpZiB0aGUgc291cmNlIHN0cmluZyBpcyBub3QgY2hhbmdlZCBhbmQgc2hvdWxkIGJlIGVzY2FwZWQgZXh0ZXJuYWx5LlxuICAgIC8vIElmIHJlc3VsdCBzdGFydHMgd2l0aCA8cHJlLi4uIGludGVybmFsIHdyYXBwZXIgaXMgc2tpcHBlZC5cbiAgICAvL1xuICAgIC8vIGZ1bmN0aW9uICgvKnN0ciwgbGFuZyovKSB7IHJldHVybiAnJzsgfVxuICAgIC8vXG4gICAgaGlnaGxpZ2h0OiBudWxsLFxuXG4gICAgbWF4TmVzdGluZzogICAyMCAgICAgICAgICAgIC8vIEludGVybmFsIHByb3RlY3Rpb24sIHJlY3Vyc2lvbiBsaW1pdFxuICB9LFxuXG4gIGNvbXBvbmVudHM6IHtcblxuICAgIGNvcmU6IHtcbiAgICAgIHJ1bGVzOiBbXG4gICAgICAgICdub3JtYWxpemUnLFxuICAgICAgICAnYmxvY2snLFxuICAgICAgICAnaW5saW5lJyxcbiAgICAgICAgJ3RleHRfam9pbidcbiAgICAgIF1cbiAgICB9LFxuXG4gICAgYmxvY2s6IHtcbiAgICAgIHJ1bGVzOiBbXG4gICAgICAgICdwYXJhZ3JhcGgnXG4gICAgICBdXG4gICAgfSxcblxuICAgIGlubGluZToge1xuICAgICAgcnVsZXM6IFtcbiAgICAgICAgJ3RleHQnXG4gICAgICBdLFxuICAgICAgcnVsZXMyOiBbXG4gICAgICAgICdiYWxhbmNlX3BhaXJzJyxcbiAgICAgICAgJ2ZyYWdtZW50c19qb2luJ1xuICAgICAgXVxuICAgIH1cbiAgfVxufTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwib3B0aW9ucyIsImh0bWwiLCJ4aHRtbE91dCIsImJyZWFrcyIsImxhbmdQcmVmaXgiLCJsaW5raWZ5IiwidHlwb2dyYXBoZXIiLCJxdW90ZXMiLCJoaWdobGlnaHQiLCJtYXhOZXN0aW5nIiwiY29tcG9uZW50cyIsImNvcmUiLCJydWxlcyIsImJsb2NrIiwiaW5saW5lIiwicnVsZXMyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/markdown-it/lib/presets/zero.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/markdown-it/lib/renderer.js":
/*!**************************************************!*\
  !*** ./node_modules/markdown-it/lib/renderer.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * class Renderer\n *\n * Generates HTML from parsed token stream. Each instance has independent\n * copy of rules. Those can be rewritten with ease. Also, you can add new\n * rules if you create plugin and adds new token types.\n **/ \nvar assign = (__webpack_require__(/*! ./common/utils */ \"(rsc)/./node_modules/markdown-it/lib/common/utils.js\").assign);\nvar unescapeAll = (__webpack_require__(/*! ./common/utils */ \"(rsc)/./node_modules/markdown-it/lib/common/utils.js\").unescapeAll);\nvar escapeHtml = (__webpack_require__(/*! ./common/utils */ \"(rsc)/./node_modules/markdown-it/lib/common/utils.js\").escapeHtml);\n////////////////////////////////////////////////////////////////////////////////\nvar default_rules = {};\ndefault_rules.code_inline = function(tokens, idx, options, env, slf) {\n    var token = tokens[idx];\n    return \"<code\" + slf.renderAttrs(token) + \">\" + escapeHtml(token.content) + \"</code>\";\n};\ndefault_rules.code_block = function(tokens, idx, options, env, slf) {\n    var token = tokens[idx];\n    return \"<pre\" + slf.renderAttrs(token) + \"><code>\" + escapeHtml(tokens[idx].content) + \"</code></pre>\\n\";\n};\ndefault_rules.fence = function(tokens, idx, options, env, slf) {\n    var token = tokens[idx], info = token.info ? unescapeAll(token.info).trim() : \"\", langName = \"\", langAttrs = \"\", highlighted, i, arr, tmpAttrs, tmpToken;\n    if (info) {\n        arr = info.split(/(\\s+)/g);\n        langName = arr[0];\n        langAttrs = arr.slice(2).join(\"\");\n    }\n    if (options.highlight) {\n        highlighted = options.highlight(token.content, langName, langAttrs) || escapeHtml(token.content);\n    } else {\n        highlighted = escapeHtml(token.content);\n    }\n    if (highlighted.indexOf(\"<pre\") === 0) {\n        return highlighted + \"\\n\";\n    }\n    // If language exists, inject class gently, without modifying original token.\n    // May be, one day we will add .deepClone() for token and simplify this part, but\n    // now we prefer to keep things local.\n    if (info) {\n        i = token.attrIndex(\"class\");\n        tmpAttrs = token.attrs ? token.attrs.slice() : [];\n        if (i < 0) {\n            tmpAttrs.push([\n                \"class\",\n                options.langPrefix + langName\n            ]);\n        } else {\n            tmpAttrs[i] = tmpAttrs[i].slice();\n            tmpAttrs[i][1] += \" \" + options.langPrefix + langName;\n        }\n        // Fake token just to render attributes\n        tmpToken = {\n            attrs: tmpAttrs\n        };\n        return \"<pre><code\" + slf.renderAttrs(tmpToken) + \">\" + highlighted + \"</code></pre>\\n\";\n    }\n    return \"<pre><code\" + slf.renderAttrs(token) + \">\" + highlighted + \"</code></pre>\\n\";\n};\ndefault_rules.image = function(tokens, idx, options, env, slf) {\n    var token = tokens[idx];\n    // \"alt\" attr MUST be set, even if empty. Because it's mandatory and\n    // should be placed on proper position for tests.\n    //\n    // Replace content with actual value\n    token.attrs[token.attrIndex(\"alt\")][1] = slf.renderInlineAsText(token.children, options, env);\n    return slf.renderToken(tokens, idx, options);\n};\ndefault_rules.hardbreak = function(tokens, idx, options /*, env */ ) {\n    return options.xhtmlOut ? \"<br />\\n\" : \"<br>\\n\";\n};\ndefault_rules.softbreak = function(tokens, idx, options /*, env */ ) {\n    return options.breaks ? options.xhtmlOut ? \"<br />\\n\" : \"<br>\\n\" : \"\\n\";\n};\ndefault_rules.text = function(tokens, idx /*, options, env */ ) {\n    return escapeHtml(tokens[idx].content);\n};\ndefault_rules.html_block = function(tokens, idx /*, options, env */ ) {\n    return tokens[idx].content;\n};\ndefault_rules.html_inline = function(tokens, idx /*, options, env */ ) {\n    return tokens[idx].content;\n};\n/**\n * new Renderer()\n *\n * Creates new [[Renderer]] instance and fill [[Renderer#rules]] with defaults.\n **/ function Renderer() {\n    /**\n   * Renderer#rules -> Object\n   *\n   * Contains render rules for tokens. Can be updated and extended.\n   *\n   * ##### Example\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   *\n   * md.renderer.rules.strong_open  = function () { return '<b>'; };\n   * md.renderer.rules.strong_close = function () { return '</b>'; };\n   *\n   * var result = md.renderInline(...);\n   * ```\n   *\n   * Each rule is called as independent static function with fixed signature:\n   *\n   * ```javascript\n   * function my_token_render(tokens, idx, options, env, renderer) {\n   *   // ...\n   *   return renderedHTML;\n   * }\n   * ```\n   *\n   * See [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.js)\n   * for more details and examples.\n   **/ this.rules = assign({}, default_rules);\n}\n/**\n * Renderer.renderAttrs(token) -> String\n *\n * Render token attributes to string.\n **/ Renderer.prototype.renderAttrs = function renderAttrs(token) {\n    var i, l, result;\n    if (!token.attrs) {\n        return \"\";\n    }\n    result = \"\";\n    for(i = 0, l = token.attrs.length; i < l; i++){\n        result += \" \" + escapeHtml(token.attrs[i][0]) + '=\"' + escapeHtml(token.attrs[i][1]) + '\"';\n    }\n    return result;\n};\n/**\n * Renderer.renderToken(tokens, idx, options) -> String\n * - tokens (Array): list of tokens\n * - idx (Numbed): token index to render\n * - options (Object): params of parser instance\n *\n * Default token renderer. Can be overriden by custom function\n * in [[Renderer#rules]].\n **/ Renderer.prototype.renderToken = function renderToken(tokens, idx, options) {\n    var nextToken, result = \"\", needLf = false, token = tokens[idx];\n    // Tight list paragraphs\n    if (token.hidden) {\n        return \"\";\n    }\n    // Insert a newline between hidden paragraph and subsequent opening\n    // block-level tag.\n    //\n    // For example, here we should insert a newline before blockquote:\n    //  - a\n    //    >\n    //\n    if (token.block && token.nesting !== -1 && idx && tokens[idx - 1].hidden) {\n        result += \"\\n\";\n    }\n    // Add token name, e.g. `<img`\n    result += (token.nesting === -1 ? \"</\" : \"<\") + token.tag;\n    // Encode attributes, e.g. `<img src=\"foo\"`\n    result += this.renderAttrs(token);\n    // Add a slash for self-closing tags, e.g. `<img src=\"foo\" /`\n    if (token.nesting === 0 && options.xhtmlOut) {\n        result += \" /\";\n    }\n    // Check if we need to add a newline after this tag\n    if (token.block) {\n        needLf = true;\n        if (token.nesting === 1) {\n            if (idx + 1 < tokens.length) {\n                nextToken = tokens[idx + 1];\n                if (nextToken.type === \"inline\" || nextToken.hidden) {\n                    // Block-level tag containing an inline tag.\n                    //\n                    needLf = false;\n                } else if (nextToken.nesting === -1 && nextToken.tag === token.tag) {\n                    // Opening tag + closing tag of the same type. E.g. `<li></li>`.\n                    //\n                    needLf = false;\n                }\n            }\n        }\n    }\n    result += needLf ? \">\\n\" : \">\";\n    return result;\n};\n/**\n * Renderer.renderInline(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to render\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * The same as [[Renderer.render]], but for single token of `inline` type.\n **/ Renderer.prototype.renderInline = function(tokens, options, env) {\n    var type, result = \"\", rules = this.rules;\n    for(var i = 0, len = tokens.length; i < len; i++){\n        type = tokens[i].type;\n        if (typeof rules[type] !== \"undefined\") {\n            result += rules[type](tokens, i, options, env, this);\n        } else {\n            result += this.renderToken(tokens, i, options);\n        }\n    }\n    return result;\n};\n/** internal\n * Renderer.renderInlineAsText(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to render\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * Special kludge for image `alt` attributes to conform CommonMark spec.\n * Don't try to use it! Spec requires to show `alt` content with stripped markup,\n * instead of simple escaping.\n **/ Renderer.prototype.renderInlineAsText = function(tokens, options, env) {\n    var result = \"\";\n    for(var i = 0, len = tokens.length; i < len; i++){\n        if (tokens[i].type === \"text\") {\n            result += tokens[i].content;\n        } else if (tokens[i].type === \"image\") {\n            result += this.renderInlineAsText(tokens[i].children, options, env);\n        } else if (tokens[i].type === \"softbreak\") {\n            result += \"\\n\";\n        }\n    }\n    return result;\n};\n/**\n * Renderer.render(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to render\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * Takes token stream and generates HTML. Probably, you will never need to call\n * this method directly.\n **/ Renderer.prototype.render = function(tokens, options, env) {\n    var i, len, type, result = \"\", rules = this.rules;\n    for(i = 0, len = tokens.length; i < len; i++){\n        type = tokens[i].type;\n        if (type === \"inline\") {\n            result += this.renderInline(tokens[i].children, options, env);\n        } else if (typeof rules[type] !== \"undefined\") {\n            result += rules[type](tokens, i, options, env, this);\n        } else {\n            result += this.renderToken(tokens, i, options, env);\n        }\n    }\n    return result;\n};\nmodule.exports = Renderer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/markdown-it/lib/renderer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/markdown-it/lib/ruler.js":
/*!***********************************************!*\
  !*** ./node_modules/markdown-it/lib/ruler.js ***!
  \***********************************************/
/***/ ((module) => {

eval("/**\n * class Ruler\n *\n * Helper class, used by [[MarkdownIt#core]], [[MarkdownIt#block]] and\n * [[MarkdownIt#inline]] to manage sequences of functions (rules):\n *\n * - keep rules in defined order\n * - assign the name to each rule\n * - enable/disable rules\n * - add/replace rules\n * - allow assign rules to additional named chains (in the same)\n * - cacheing lists of active rules\n *\n * You will not need use this class directly until write plugins. For simple\n * rules control use [[MarkdownIt.disable]], [[MarkdownIt.enable]] and\n * [[MarkdownIt.use]].\n **/ \n/**\n * new Ruler()\n **/ function Ruler() {\n    // List of added rules. Each element is:\n    //\n    // {\n    //   name: XXX,\n    //   enabled: Boolean,\n    //   fn: Function(),\n    //   alt: [ name2, name3 ]\n    // }\n    //\n    this.__rules__ = [];\n    // Cached rule chains.\n    //\n    // First level - chain name, '' for default.\n    // Second level - diginal anchor for fast filtering by charcodes.\n    //\n    this.__cache__ = null;\n}\n////////////////////////////////////////////////////////////////////////////////\n// Helper methods, should not be used directly\n// Find rule index by name\n//\nRuler.prototype.__find__ = function(name) {\n    for(var i = 0; i < this.__rules__.length; i++){\n        if (this.__rules__[i].name === name) {\n            return i;\n        }\n    }\n    return -1;\n};\n// Build rules lookup cache\n//\nRuler.prototype.__compile__ = function() {\n    var self = this;\n    var chains = [\n        \"\"\n    ];\n    // collect unique names\n    self.__rules__.forEach(function(rule) {\n        if (!rule.enabled) {\n            return;\n        }\n        rule.alt.forEach(function(altName) {\n            if (chains.indexOf(altName) < 0) {\n                chains.push(altName);\n            }\n        });\n    });\n    self.__cache__ = {};\n    chains.forEach(function(chain) {\n        self.__cache__[chain] = [];\n        self.__rules__.forEach(function(rule) {\n            if (!rule.enabled) {\n                return;\n            }\n            if (chain && rule.alt.indexOf(chain) < 0) {\n                return;\n            }\n            self.__cache__[chain].push(rule.fn);\n        });\n    });\n};\n/**\n * Ruler.at(name, fn [, options])\n * - name (String): rule name to replace.\n * - fn (Function): new rule function.\n * - options (Object): new rule options (not mandatory).\n *\n * Replace rule by name with new function & options. Throws error if name not\n * found.\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * Replace existing typographer replacement rule with new one:\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.core.ruler.at('replacements', function replace(state) {\n *   //...\n * });\n * ```\n **/ Ruler.prototype.at = function(name, fn, options) {\n    var index = this.__find__(name);\n    var opt = options || {};\n    if (index === -1) {\n        throw new Error(\"Parser rule not found: \" + name);\n    }\n    this.__rules__[index].fn = fn;\n    this.__rules__[index].alt = opt.alt || [];\n    this.__cache__ = null;\n};\n/**\n * Ruler.before(beforeName, ruleName, fn [, options])\n * - beforeName (String): new rule will be added before this one.\n * - ruleName (String): name of added rule.\n * - fn (Function): rule function.\n * - options (Object): rule options (not mandatory).\n *\n * Add new rule to chain before one with given name. See also\n * [[Ruler.after]], [[Ruler.push]].\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.block.ruler.before('paragraph', 'my_rule', function replace(state) {\n *   //...\n * });\n * ```\n **/ Ruler.prototype.before = function(beforeName, ruleName, fn, options) {\n    var index = this.__find__(beforeName);\n    var opt = options || {};\n    if (index === -1) {\n        throw new Error(\"Parser rule not found: \" + beforeName);\n    }\n    this.__rules__.splice(index, 0, {\n        name: ruleName,\n        enabled: true,\n        fn: fn,\n        alt: opt.alt || []\n    });\n    this.__cache__ = null;\n};\n/**\n * Ruler.after(afterName, ruleName, fn [, options])\n * - afterName (String): new rule will be added after this one.\n * - ruleName (String): name of added rule.\n * - fn (Function): rule function.\n * - options (Object): rule options (not mandatory).\n *\n * Add new rule to chain after one with given name. See also\n * [[Ruler.before]], [[Ruler.push]].\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.inline.ruler.after('text', 'my_rule', function replace(state) {\n *   //...\n * });\n * ```\n **/ Ruler.prototype.after = function(afterName, ruleName, fn, options) {\n    var index = this.__find__(afterName);\n    var opt = options || {};\n    if (index === -1) {\n        throw new Error(\"Parser rule not found: \" + afterName);\n    }\n    this.__rules__.splice(index + 1, 0, {\n        name: ruleName,\n        enabled: true,\n        fn: fn,\n        alt: opt.alt || []\n    });\n    this.__cache__ = null;\n};\n/**\n * Ruler.push(ruleName, fn [, options])\n * - ruleName (String): name of added rule.\n * - fn (Function): rule function.\n * - options (Object): rule options (not mandatory).\n *\n * Push new rule to the end of chain. See also\n * [[Ruler.before]], [[Ruler.after]].\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.core.ruler.push('my_rule', function replace(state) {\n *   //...\n * });\n * ```\n **/ Ruler.prototype.push = function(ruleName, fn, options) {\n    var opt = options || {};\n    this.__rules__.push({\n        name: ruleName,\n        enabled: true,\n        fn: fn,\n        alt: opt.alt || []\n    });\n    this.__cache__ = null;\n};\n/**\n * Ruler.enable(list [, ignoreInvalid]) -> Array\n * - list (String|Array): list of rule names to enable.\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Enable rules with given names. If any rule name not found - throw Error.\n * Errors can be disabled by second param.\n *\n * Returns list of found rule names (if no exception happened).\n *\n * See also [[Ruler.disable]], [[Ruler.enableOnly]].\n **/ Ruler.prototype.enable = function(list, ignoreInvalid) {\n    if (!Array.isArray(list)) {\n        list = [\n            list\n        ];\n    }\n    var result = [];\n    // Search by name and enable\n    list.forEach(function(name) {\n        var idx = this.__find__(name);\n        if (idx < 0) {\n            if (ignoreInvalid) {\n                return;\n            }\n            throw new Error(\"Rules manager: invalid rule name \" + name);\n        }\n        this.__rules__[idx].enabled = true;\n        result.push(name);\n    }, this);\n    this.__cache__ = null;\n    return result;\n};\n/**\n * Ruler.enableOnly(list [, ignoreInvalid])\n * - list (String|Array): list of rule names to enable (whitelist).\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Enable rules with given names, and disable everything else. If any rule name\n * not found - throw Error. Errors can be disabled by second param.\n *\n * See also [[Ruler.disable]], [[Ruler.enable]].\n **/ Ruler.prototype.enableOnly = function(list, ignoreInvalid) {\n    if (!Array.isArray(list)) {\n        list = [\n            list\n        ];\n    }\n    this.__rules__.forEach(function(rule) {\n        rule.enabled = false;\n    });\n    this.enable(list, ignoreInvalid);\n};\n/**\n * Ruler.disable(list [, ignoreInvalid]) -> Array\n * - list (String|Array): list of rule names to disable.\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Disable rules with given names. If any rule name not found - throw Error.\n * Errors can be disabled by second param.\n *\n * Returns list of found rule names (if no exception happened).\n *\n * See also [[Ruler.enable]], [[Ruler.enableOnly]].\n **/ Ruler.prototype.disable = function(list, ignoreInvalid) {\n    if (!Array.isArray(list)) {\n        list = [\n            list\n        ];\n    }\n    var result = [];\n    // Search by name and disable\n    list.forEach(function(name) {\n        var idx = this.__find__(name);\n        if (idx < 0) {\n            if (ignoreInvalid) {\n                return;\n            }\n            throw new Error(\"Rules manager: invalid rule name \" + name);\n        }\n        this.__rules__[idx].enabled = false;\n        result.push(name);\n    }, this);\n    this.__cache__ = null;\n    return result;\n};\n/**\n * Ruler.getRules(chainName) -> Array\n *\n * Return array of active functions (rules) for given chain name. It analyzes\n * rules configuration, compiles caches if not exists and returns result.\n *\n * Default chain name is `''` (empty string). It can't be skipped. That's\n * done intentionally, to keep signature monomorphic for high speed.\n **/ Ruler.prototype.getRules = function(chainName) {\n    if (this.__cache__ === null) {\n        this.__compile__();\n    }\n    // Chain can be empty, if rules disabled. But we still have to return Array.\n    return this.__cache__[chainName] || [];\n};\nmodule.exports = Ruler;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/markdown-it/lib/ruler.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/markdown-it/lib/rules_block/blockquote.js":
/*!****************************************************************!*\
  !*** ./node_modules/markdown-it/lib/rules_block/blockquote.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Block quotes\n\nvar isSpace = (__webpack_require__(/*! ../common/utils */ \"(rsc)/./node_modules/markdown-it/lib/common/utils.js\").isSpace);\nmodule.exports = function blockquote(state, startLine, endLine, silent) {\n    var adjustTab, ch, i, initial, l, lastLineEmpty, lines, nextLine, offset, oldBMarks, oldBSCount, oldIndent, oldParentType, oldSCount, oldTShift, spaceAfterMarker, terminate, terminatorRules, token, isOutdented, oldLineMax = state.lineMax, pos = state.bMarks[startLine] + state.tShift[startLine], max = state.eMarks[startLine];\n    // if it's indented more than 3 spaces, it should be a code block\n    if (state.sCount[startLine] - state.blkIndent >= 4) {\n        return false;\n    }\n    // check the block quote marker\n    if (state.src.charCodeAt(pos) !== 0x3E /* > */ ) {\n        return false;\n    }\n    // we know that it's going to be a valid blockquote,\n    // so no point trying to find the end of it in silent mode\n    if (silent) {\n        return true;\n    }\n    oldBMarks = [];\n    oldBSCount = [];\n    oldSCount = [];\n    oldTShift = [];\n    terminatorRules = state.md.block.ruler.getRules(\"blockquote\");\n    oldParentType = state.parentType;\n    state.parentType = \"blockquote\";\n    // Search the end of the block\n    //\n    // Block ends with either:\n    //  1. an empty line outside:\n    //     ```\n    //     > test\n    //\n    //     ```\n    //  2. an empty line inside:\n    //     ```\n    //     >\n    //     test\n    //     ```\n    //  3. another tag:\n    //     ```\n    //     > test\n    //      - - -\n    //     ```\n    for(nextLine = startLine; nextLine < endLine; nextLine++){\n        // check if it's outdented, i.e. it's inside list item and indented\n        // less than said list item:\n        //\n        // ```\n        // 1. anything\n        //    > current blockquote\n        // 2. checking this line\n        // ```\n        isOutdented = state.sCount[nextLine] < state.blkIndent;\n        pos = state.bMarks[nextLine] + state.tShift[nextLine];\n        max = state.eMarks[nextLine];\n        if (pos >= max) {\n            break;\n        }\n        if (state.src.charCodeAt(pos++) === 0x3E /* > */  && !isOutdented) {\n            // This line is inside the blockquote.\n            // set offset past spaces and \">\"\n            initial = state.sCount[nextLine] + 1;\n            // skip one optional space after '>'\n            if (state.src.charCodeAt(pos) === 0x20 /* space */ ) {\n                // ' >   test '\n                //     ^ -- position start of line here:\n                pos++;\n                initial++;\n                adjustTab = false;\n                spaceAfterMarker = true;\n            } else if (state.src.charCodeAt(pos) === 0x09 /* tab */ ) {\n                spaceAfterMarker = true;\n                if ((state.bsCount[nextLine] + initial) % 4 === 3) {\n                    // '  >\\t  test '\n                    //       ^ -- position start of line here (tab has width===1)\n                    pos++;\n                    initial++;\n                    adjustTab = false;\n                } else {\n                    // ' >\\t  test '\n                    //    ^ -- position start of line here + shift bsCount slightly\n                    //         to make extra space appear\n                    adjustTab = true;\n                }\n            } else {\n                spaceAfterMarker = false;\n            }\n            offset = initial;\n            oldBMarks.push(state.bMarks[nextLine]);\n            state.bMarks[nextLine] = pos;\n            while(pos < max){\n                ch = state.src.charCodeAt(pos);\n                if (isSpace(ch)) {\n                    if (ch === 0x09) {\n                        offset += 4 - (offset + state.bsCount[nextLine] + (adjustTab ? 1 : 0)) % 4;\n                    } else {\n                        offset++;\n                    }\n                } else {\n                    break;\n                }\n                pos++;\n            }\n            lastLineEmpty = pos >= max;\n            oldBSCount.push(state.bsCount[nextLine]);\n            state.bsCount[nextLine] = state.sCount[nextLine] + 1 + (spaceAfterMarker ? 1 : 0);\n            oldSCount.push(state.sCount[nextLine]);\n            state.sCount[nextLine] = offset - initial;\n            oldTShift.push(state.tShift[nextLine]);\n            state.tShift[nextLine] = pos - state.bMarks[nextLine];\n            continue;\n        }\n        // Case 2: line is not inside the blockquote, and the last line was empty.\n        if (lastLineEmpty) {\n            break;\n        }\n        // Case 3: another tag found.\n        terminate = false;\n        for(i = 0, l = terminatorRules.length; i < l; i++){\n            if (terminatorRules[i](state, nextLine, endLine, true)) {\n                terminate = true;\n                break;\n            }\n        }\n        if (terminate) {\n            // Quirk to enforce \"hard termination mode\" for paragraphs;\n            // normally if you call `tokenize(state, startLine, nextLine)`,\n            // paragraphs will look below nextLine for paragraph continuation,\n            // but if blockquote is terminated by another tag, they shouldn't\n            state.lineMax = nextLine;\n            if (state.blkIndent !== 0) {\n                // state.blkIndent was non-zero, we now set it to zero,\n                // so we need to re-calculate all offsets to appear as\n                // if indent wasn't changed\n                oldBMarks.push(state.bMarks[nextLine]);\n                oldBSCount.push(state.bsCount[nextLine]);\n                oldTShift.push(state.tShift[nextLine]);\n                oldSCount.push(state.sCount[nextLine]);\n                state.sCount[nextLine] -= state.blkIndent;\n            }\n            break;\n        }\n        oldBMarks.push(state.bMarks[nextLine]);\n        oldBSCount.push(state.bsCount[nextLine]);\n        oldTShift.push(state.tShift[nextLine]);\n        oldSCount.push(state.sCount[nextLine]);\n        // A negative indentation means that this is a paragraph continuation\n        //\n        state.sCount[nextLine] = -1;\n    }\n    oldIndent = state.blkIndent;\n    state.blkIndent = 0;\n    token = state.push(\"blockquote_open\", \"blockquote\", 1);\n    token.markup = \">\";\n    token.map = lines = [\n        startLine,\n        0\n    ];\n    state.md.block.tokenize(state, startLine, nextLine);\n    token = state.push(\"blockquote_close\", \"blockquote\", -1);\n    token.markup = \">\";\n    state.lineMax = oldLineMax;\n    state.parentType = oldParentType;\n    lines[1] = state.line;\n    // Restore original tShift; this might not be necessary since the parser\n    // has already been here, but just to make sure we can do that.\n    for(i = 0; i < oldTShift.length; i++){\n        state.bMarks[i + startLine] = oldBMarks[i];\n        state.tShift[i + startLine] = oldTShift[i];\n        state.sCount[i + startLine] = oldSCount[i];\n        state.bsCount[i + startLine] = oldBSCount[i];\n    }\n    state.blkIndent = oldIndent;\n    return true;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/markdown-it/lib/rules_block/blockquote.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/markdown-it/lib/rules_block/code.js":
/*!**********************************************************!*\
  !*** ./node_modules/markdown-it/lib/rules_block/code.js ***!
  \**********************************************************/
/***/ ((module) => {

eval("// Code block (4 spaces padded)\n\nmodule.exports = function code(state, startLine, endLine /*, silent*/ ) {\n    var nextLine, last, token;\n    if (state.sCount[startLine] - state.blkIndent < 4) {\n        return false;\n    }\n    last = nextLine = startLine + 1;\n    while(nextLine < endLine){\n        if (state.isEmpty(nextLine)) {\n            nextLine++;\n            continue;\n        }\n        if (state.sCount[nextLine] - state.blkIndent >= 4) {\n            nextLine++;\n            last = nextLine;\n            continue;\n        }\n        break;\n    }\n    state.line = last;\n    token = state.push(\"code_block\", \"code\", 0);\n    token.content = state.getLines(startLine, last, 4 + state.blkIndent, false) + \"\\n\";\n    token.map = [\n        startLine,\n        state.line\n    ];\n    return true;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3J1bGVzX2Jsb2NrL2NvZGUuanMiLCJtYXBwaW5ncyI6IkFBQUEsK0JBQStCO0FBRS9CO0FBR0FBLE9BQU9DLE9BQU8sR0FBRyxTQUFTQyxLQUFLQyxLQUFLLEVBQUVDLFNBQVMsRUFBRUMsUUFBTyxVQUFVLEdBQVY7SUFDdEQsSUFBSUMsVUFBVUMsTUFBTUM7SUFFcEIsSUFBSUwsTUFBTU0sTUFBTSxDQUFDTCxVQUFVLEdBQUdELE1BQU1PLFNBQVMsR0FBRyxHQUFHO1FBQUUsT0FBTztJQUFPO0lBRW5FSCxPQUFPRCxXQUFXRixZQUFZO0lBRTlCLE1BQU9FLFdBQVdELFFBQVM7UUFDekIsSUFBSUYsTUFBTVEsT0FBTyxDQUFDTCxXQUFXO1lBQzNCQTtZQUNBO1FBQ0Y7UUFFQSxJQUFJSCxNQUFNTSxNQUFNLENBQUNILFNBQVMsR0FBR0gsTUFBTU8sU0FBUyxJQUFJLEdBQUc7WUFDakRKO1lBQ0FDLE9BQU9EO1lBQ1A7UUFDRjtRQUNBO0lBQ0Y7SUFFQUgsTUFBTVMsSUFBSSxHQUFHTDtJQUViQyxRQUFnQkwsTUFBTVUsSUFBSSxDQUFDLGNBQWMsUUFBUTtJQUNqREwsTUFBTU0sT0FBTyxHQUFHWCxNQUFNWSxRQUFRLENBQUNYLFdBQVdHLE1BQU0sSUFBSUosTUFBTU8sU0FBUyxFQUFFLFNBQVM7SUFDOUVGLE1BQU1RLEdBQUcsR0FBTztRQUFFWjtRQUFXRCxNQUFNUyxJQUFJO0tBQUU7SUFFekMsT0FBTztBQUNUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvZy8uL25vZGVfbW9kdWxlcy9tYXJrZG93bi1pdC9saWIvcnVsZXNfYmxvY2svY29kZS5qcz8yM2IyIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvZGUgYmxvY2sgKDQgc3BhY2VzIHBhZGRlZClcblxuJ3VzZSBzdHJpY3QnO1xuXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY29kZShzdGF0ZSwgc3RhcnRMaW5lLCBlbmRMaW5lLyosIHNpbGVudCovKSB7XG4gIHZhciBuZXh0TGluZSwgbGFzdCwgdG9rZW47XG5cbiAgaWYgKHN0YXRlLnNDb3VudFtzdGFydExpbmVdIC0gc3RhdGUuYmxrSW5kZW50IDwgNCkgeyByZXR1cm4gZmFsc2U7IH1cblxuICBsYXN0ID0gbmV4dExpbmUgPSBzdGFydExpbmUgKyAxO1xuXG4gIHdoaWxlIChuZXh0TGluZSA8IGVuZExpbmUpIHtcbiAgICBpZiAoc3RhdGUuaXNFbXB0eShuZXh0TGluZSkpIHtcbiAgICAgIG5leHRMaW5lKys7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAoc3RhdGUuc0NvdW50W25leHRMaW5lXSAtIHN0YXRlLmJsa0luZGVudCA+PSA0KSB7XG4gICAgICBuZXh0TGluZSsrO1xuICAgICAgbGFzdCA9IG5leHRMaW5lO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGJyZWFrO1xuICB9XG5cbiAgc3RhdGUubGluZSA9IGxhc3Q7XG5cbiAgdG9rZW4gICAgICAgICA9IHN0YXRlLnB1c2goJ2NvZGVfYmxvY2snLCAnY29kZScsIDApO1xuICB0b2tlbi5jb250ZW50ID0gc3RhdGUuZ2V0TGluZXMoc3RhcnRMaW5lLCBsYXN0LCA0ICsgc3RhdGUuYmxrSW5kZW50LCBmYWxzZSkgKyAnXFxuJztcbiAgdG9rZW4ubWFwICAgICA9IFsgc3RhcnRMaW5lLCBzdGF0ZS5saW5lIF07XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJjb2RlIiwic3RhdGUiLCJzdGFydExpbmUiLCJlbmRMaW5lIiwibmV4dExpbmUiLCJsYXN0IiwidG9rZW4iLCJzQ291bnQiLCJibGtJbmRlbnQiLCJpc0VtcHR5IiwibGluZSIsInB1c2giLCJjb250ZW50IiwiZ2V0TGluZXMiLCJtYXAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/markdown-it/lib/rules_block/code.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/markdown-it/lib/rules_block/fence.js":
/*!***********************************************************!*\
  !*** ./node_modules/markdown-it/lib/rules_block/fence.js ***!
  \***********************************************************/
/***/ ((module) => {

eval("// fences (``` lang, ~~~ lang)\n\nmodule.exports = function fence(state, startLine, endLine, silent) {\n    var marker, len, params, nextLine, mem, token, markup, haveEndMarker = false, pos = state.bMarks[startLine] + state.tShift[startLine], max = state.eMarks[startLine];\n    // if it's indented more than 3 spaces, it should be a code block\n    if (state.sCount[startLine] - state.blkIndent >= 4) {\n        return false;\n    }\n    if (pos + 3 > max) {\n        return false;\n    }\n    marker = state.src.charCodeAt(pos);\n    if (marker !== 0x7E /* ~ */  && marker !== 0x60 /* ` */ ) {\n        return false;\n    }\n    // scan marker length\n    mem = pos;\n    pos = state.skipChars(pos, marker);\n    len = pos - mem;\n    if (len < 3) {\n        return false;\n    }\n    markup = state.src.slice(mem, pos);\n    params = state.src.slice(pos, max);\n    if (marker === 0x60 /* ` */ ) {\n        if (params.indexOf(String.fromCharCode(marker)) >= 0) {\n            return false;\n        }\n    }\n    // Since start is found, we can report success here in validation mode\n    if (silent) {\n        return true;\n    }\n    // search end of block\n    nextLine = startLine;\n    for(;;){\n        nextLine++;\n        if (nextLine >= endLine) {\n            break;\n        }\n        pos = mem = state.bMarks[nextLine] + state.tShift[nextLine];\n        max = state.eMarks[nextLine];\n        if (pos < max && state.sCount[nextLine] < state.blkIndent) {\n            break;\n        }\n        if (state.src.charCodeAt(pos) !== marker) {\n            continue;\n        }\n        if (state.sCount[nextLine] - state.blkIndent >= 4) {\n            continue;\n        }\n        pos = state.skipChars(pos, marker);\n        // closing code fence must be at least as long as the opening one\n        if (pos - mem < len) {\n            continue;\n        }\n        // make sure tail has spaces only\n        pos = state.skipSpaces(pos);\n        if (pos < max) {\n            continue;\n        }\n        haveEndMarker = true;\n        break;\n    }\n    // If a fence has heading spaces, they should be removed from its inner block\n    len = state.sCount[startLine];\n    state.line = nextLine + (haveEndMarker ? 1 : 0);\n    token = state.push(\"fence\", \"code\", 0);\n    token.info = params;\n    token.content = state.getLines(startLine + 1, nextLine, len, true);\n    token.markup = markup;\n    token.map = [\n        startLine,\n        state.line\n    ];\n    return true;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3J1bGVzX2Jsb2NrL2ZlbmNlLmpzIiwibWFwcGluZ3MiOiJBQUFBLDhCQUE4QjtBQUU5QjtBQUdBQSxPQUFPQyxPQUFPLEdBQUcsU0FBU0MsTUFBTUMsS0FBSyxFQUFFQyxTQUFTLEVBQUVDLE9BQU8sRUFBRUMsTUFBTTtJQUMvRCxJQUFJQyxRQUFRQyxLQUFLQyxRQUFRQyxVQUFVQyxLQUFLQyxPQUFPQyxRQUMzQ0MsZ0JBQWdCLE9BQ2hCQyxNQUFNWixNQUFNYSxNQUFNLENBQUNaLFVBQVUsR0FBR0QsTUFBTWMsTUFBTSxDQUFDYixVQUFVLEVBQ3ZEYyxNQUFNZixNQUFNZ0IsTUFBTSxDQUFDZixVQUFVO0lBRWpDLGlFQUFpRTtJQUNqRSxJQUFJRCxNQUFNaUIsTUFBTSxDQUFDaEIsVUFBVSxHQUFHRCxNQUFNa0IsU0FBUyxJQUFJLEdBQUc7UUFBRSxPQUFPO0lBQU87SUFFcEUsSUFBSU4sTUFBTSxJQUFJRyxLQUFLO1FBQUUsT0FBTztJQUFPO0lBRW5DWCxTQUFTSixNQUFNbUIsR0FBRyxDQUFDQyxVQUFVLENBQUNSO0lBRTlCLElBQUlSLFdBQVcsS0FBSSxLQUFLLE9BQU1BLFdBQVcsS0FBSyxLQUFLLEtBQUk7UUFDckQsT0FBTztJQUNUO0lBRUEscUJBQXFCO0lBQ3JCSSxNQUFNSTtJQUNOQSxNQUFNWixNQUFNcUIsU0FBUyxDQUFDVCxLQUFLUjtJQUUzQkMsTUFBTU8sTUFBTUo7SUFFWixJQUFJSCxNQUFNLEdBQUc7UUFBRSxPQUFPO0lBQU87SUFFN0JLLFNBQVNWLE1BQU1tQixHQUFHLENBQUNHLEtBQUssQ0FBQ2QsS0FBS0k7SUFDOUJOLFNBQVNOLE1BQU1tQixHQUFHLENBQUNHLEtBQUssQ0FBQ1YsS0FBS0c7SUFFOUIsSUFBSVgsV0FBVyxLQUFLLEtBQUssS0FBSTtRQUMzQixJQUFJRSxPQUFPaUIsT0FBTyxDQUFDQyxPQUFPQyxZQUFZLENBQUNyQixZQUFZLEdBQUc7WUFDcEQsT0FBTztRQUNUO0lBQ0Y7SUFFQSxzRUFBc0U7SUFDdEUsSUFBSUQsUUFBUTtRQUFFLE9BQU87SUFBTTtJQUUzQixzQkFBc0I7SUFDdEJJLFdBQVdOO0lBRVgsT0FBUztRQUNQTTtRQUNBLElBQUlBLFlBQVlMLFNBQVM7WUFHdkI7UUFDRjtRQUVBVSxNQUFNSixNQUFNUixNQUFNYSxNQUFNLENBQUNOLFNBQVMsR0FBR1AsTUFBTWMsTUFBTSxDQUFDUCxTQUFTO1FBQzNEUSxNQUFNZixNQUFNZ0IsTUFBTSxDQUFDVCxTQUFTO1FBRTVCLElBQUlLLE1BQU1HLE9BQU9mLE1BQU1pQixNQUFNLENBQUNWLFNBQVMsR0FBR1AsTUFBTWtCLFNBQVMsRUFBRTtZQUl6RDtRQUNGO1FBRUEsSUFBSWxCLE1BQU1tQixHQUFHLENBQUNDLFVBQVUsQ0FBQ1IsU0FBU1IsUUFBUTtZQUFFO1FBQVU7UUFFdEQsSUFBSUosTUFBTWlCLE1BQU0sQ0FBQ1YsU0FBUyxHQUFHUCxNQUFNa0IsU0FBUyxJQUFJLEdBQUc7WUFFakQ7UUFDRjtRQUVBTixNQUFNWixNQUFNcUIsU0FBUyxDQUFDVCxLQUFLUjtRQUUzQixpRUFBaUU7UUFDakUsSUFBSVEsTUFBTUosTUFBTUgsS0FBSztZQUFFO1FBQVU7UUFFakMsaUNBQWlDO1FBQ2pDTyxNQUFNWixNQUFNMEIsVUFBVSxDQUFDZDtRQUV2QixJQUFJQSxNQUFNRyxLQUFLO1lBQUU7UUFBVTtRQUUzQkosZ0JBQWdCO1FBRWhCO0lBQ0Y7SUFFQSw2RUFBNkU7SUFDN0VOLE1BQU1MLE1BQU1pQixNQUFNLENBQUNoQixVQUFVO0lBRTdCRCxNQUFNMkIsSUFBSSxHQUFHcEIsV0FBWUksQ0FBQUEsZ0JBQWdCLElBQUk7SUFFN0NGLFFBQWdCVCxNQUFNNEIsSUFBSSxDQUFDLFNBQVMsUUFBUTtJQUM1Q25CLE1BQU1vQixJQUFJLEdBQU12QjtJQUNoQkcsTUFBTXFCLE9BQU8sR0FBRzlCLE1BQU0rQixRQUFRLENBQUM5QixZQUFZLEdBQUdNLFVBQVVGLEtBQUs7SUFDN0RJLE1BQU1DLE1BQU0sR0FBSUE7SUFDaEJELE1BQU11QixHQUFHLEdBQU87UUFBRS9CO1FBQVdELE1BQU0yQixJQUFJO0tBQUU7SUFFekMsT0FBTztBQUNUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvZy8uL25vZGVfbW9kdWxlcy9tYXJrZG93bi1pdC9saWIvcnVsZXNfYmxvY2svZmVuY2UuanM/NjMwNiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBmZW5jZXMgKGBgYCBsYW5nLCB+fn4gbGFuZylcblxuJ3VzZSBzdHJpY3QnO1xuXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZmVuY2Uoc3RhdGUsIHN0YXJ0TGluZSwgZW5kTGluZSwgc2lsZW50KSB7XG4gIHZhciBtYXJrZXIsIGxlbiwgcGFyYW1zLCBuZXh0TGluZSwgbWVtLCB0b2tlbiwgbWFya3VwLFxuICAgICAgaGF2ZUVuZE1hcmtlciA9IGZhbHNlLFxuICAgICAgcG9zID0gc3RhdGUuYk1hcmtzW3N0YXJ0TGluZV0gKyBzdGF0ZS50U2hpZnRbc3RhcnRMaW5lXSxcbiAgICAgIG1heCA9IHN0YXRlLmVNYXJrc1tzdGFydExpbmVdO1xuXG4gIC8vIGlmIGl0J3MgaW5kZW50ZWQgbW9yZSB0aGFuIDMgc3BhY2VzLCBpdCBzaG91bGQgYmUgYSBjb2RlIGJsb2NrXG4gIGlmIChzdGF0ZS5zQ291bnRbc3RhcnRMaW5lXSAtIHN0YXRlLmJsa0luZGVudCA+PSA0KSB7IHJldHVybiBmYWxzZTsgfVxuXG4gIGlmIChwb3MgKyAzID4gbWF4KSB7IHJldHVybiBmYWxzZTsgfVxuXG4gIG1hcmtlciA9IHN0YXRlLnNyYy5jaGFyQ29kZUF0KHBvcyk7XG5cbiAgaWYgKG1hcmtlciAhPT0gMHg3RS8qIH4gKi8gJiYgbWFya2VyICE9PSAweDYwIC8qIGAgKi8pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyBzY2FuIG1hcmtlciBsZW5ndGhcbiAgbWVtID0gcG9zO1xuICBwb3MgPSBzdGF0ZS5za2lwQ2hhcnMocG9zLCBtYXJrZXIpO1xuXG4gIGxlbiA9IHBvcyAtIG1lbTtcblxuICBpZiAobGVuIDwgMykgeyByZXR1cm4gZmFsc2U7IH1cblxuICBtYXJrdXAgPSBzdGF0ZS5zcmMuc2xpY2UobWVtLCBwb3MpO1xuICBwYXJhbXMgPSBzdGF0ZS5zcmMuc2xpY2UocG9zLCBtYXgpO1xuXG4gIGlmIChtYXJrZXIgPT09IDB4NjAgLyogYCAqLykge1xuICAgIGlmIChwYXJhbXMuaW5kZXhPZihTdHJpbmcuZnJvbUNoYXJDb2RlKG1hcmtlcikpID49IDApIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICAvLyBTaW5jZSBzdGFydCBpcyBmb3VuZCwgd2UgY2FuIHJlcG9ydCBzdWNjZXNzIGhlcmUgaW4gdmFsaWRhdGlvbiBtb2RlXG4gIGlmIChzaWxlbnQpIHsgcmV0dXJuIHRydWU7IH1cblxuICAvLyBzZWFyY2ggZW5kIG9mIGJsb2NrXG4gIG5leHRMaW5lID0gc3RhcnRMaW5lO1xuXG4gIGZvciAoOzspIHtcbiAgICBuZXh0TGluZSsrO1xuICAgIGlmIChuZXh0TGluZSA+PSBlbmRMaW5lKSB7XG4gICAgICAvLyB1bmNsb3NlZCBibG9jayBzaG91bGQgYmUgYXV0b2Nsb3NlZCBieSBlbmQgb2YgZG9jdW1lbnQuXG4gICAgICAvLyBhbHNvIGJsb2NrIHNlZW1zIHRvIGJlIGF1dG9jbG9zZWQgYnkgZW5kIG9mIHBhcmVudFxuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgcG9zID0gbWVtID0gc3RhdGUuYk1hcmtzW25leHRMaW5lXSArIHN0YXRlLnRTaGlmdFtuZXh0TGluZV07XG4gICAgbWF4ID0gc3RhdGUuZU1hcmtzW25leHRMaW5lXTtcblxuICAgIGlmIChwb3MgPCBtYXggJiYgc3RhdGUuc0NvdW50W25leHRMaW5lXSA8IHN0YXRlLmJsa0luZGVudCkge1xuICAgICAgLy8gbm9uLWVtcHR5IGxpbmUgd2l0aCBuZWdhdGl2ZSBpbmRlbnQgc2hvdWxkIHN0b3AgdGhlIGxpc3Q6XG4gICAgICAvLyAtIGBgYFxuICAgICAgLy8gIHRlc3RcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGlmIChzdGF0ZS5zcmMuY2hhckNvZGVBdChwb3MpICE9PSBtYXJrZXIpIHsgY29udGludWU7IH1cblxuICAgIGlmIChzdGF0ZS5zQ291bnRbbmV4dExpbmVdIC0gc3RhdGUuYmxrSW5kZW50ID49IDQpIHtcbiAgICAgIC8vIGNsb3NpbmcgZmVuY2Ugc2hvdWxkIGJlIGluZGVudGVkIGxlc3MgdGhhbiA0IHNwYWNlc1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgcG9zID0gc3RhdGUuc2tpcENoYXJzKHBvcywgbWFya2VyKTtcblxuICAgIC8vIGNsb3NpbmcgY29kZSBmZW5jZSBtdXN0IGJlIGF0IGxlYXN0IGFzIGxvbmcgYXMgdGhlIG9wZW5pbmcgb25lXG4gICAgaWYgKHBvcyAtIG1lbSA8IGxlbikgeyBjb250aW51ZTsgfVxuXG4gICAgLy8gbWFrZSBzdXJlIHRhaWwgaGFzIHNwYWNlcyBvbmx5XG4gICAgcG9zID0gc3RhdGUuc2tpcFNwYWNlcyhwb3MpO1xuXG4gICAgaWYgKHBvcyA8IG1heCkgeyBjb250aW51ZTsgfVxuXG4gICAgaGF2ZUVuZE1hcmtlciA9IHRydWU7XG4gICAgLy8gZm91bmQhXG4gICAgYnJlYWs7XG4gIH1cblxuICAvLyBJZiBhIGZlbmNlIGhhcyBoZWFkaW5nIHNwYWNlcywgdGhleSBzaG91bGQgYmUgcmVtb3ZlZCBmcm9tIGl0cyBpbm5lciBibG9ja1xuICBsZW4gPSBzdGF0ZS5zQ291bnRbc3RhcnRMaW5lXTtcblxuICBzdGF0ZS5saW5lID0gbmV4dExpbmUgKyAoaGF2ZUVuZE1hcmtlciA/IDEgOiAwKTtcblxuICB0b2tlbiAgICAgICAgID0gc3RhdGUucHVzaCgnZmVuY2UnLCAnY29kZScsIDApO1xuICB0b2tlbi5pbmZvICAgID0gcGFyYW1zO1xuICB0b2tlbi5jb250ZW50ID0gc3RhdGUuZ2V0TGluZXMoc3RhcnRMaW5lICsgMSwgbmV4dExpbmUsIGxlbiwgdHJ1ZSk7XG4gIHRva2VuLm1hcmt1cCAgPSBtYXJrdXA7XG4gIHRva2VuLm1hcCAgICAgPSBbIHN0YXJ0TGluZSwgc3RhdGUubGluZSBdO1xuXG4gIHJldHVybiB0cnVlO1xufTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiZmVuY2UiLCJzdGF0ZSIsInN0YXJ0TGluZSIsImVuZExpbmUiLCJzaWxlbnQiLCJtYXJrZXIiLCJsZW4iLCJwYXJhbXMiLCJuZXh0TGluZSIsIm1lbSIsInRva2VuIiwibWFya3VwIiwiaGF2ZUVuZE1hcmtlciIsInBvcyIsImJNYXJrcyIsInRTaGlmdCIsIm1heCIsImVNYXJrcyIsInNDb3VudCIsImJsa0luZGVudCIsInNyYyIsImNoYXJDb2RlQXQiLCJza2lwQ2hhcnMiLCJzbGljZSIsImluZGV4T2YiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJza2lwU3BhY2VzIiwibGluZSIsInB1c2giLCJpbmZvIiwiY29udGVudCIsImdldExpbmVzIiwibWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/markdown-it/lib/rules_block/fence.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/markdown-it/lib/rules_block/heading.js":
/*!*************************************************************!*\
  !*** ./node_modules/markdown-it/lib/rules_block/heading.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// heading (#, ##, ...)\n\nvar isSpace = (__webpack_require__(/*! ../common/utils */ \"(rsc)/./node_modules/markdown-it/lib/common/utils.js\").isSpace);\nmodule.exports = function heading(state, startLine, endLine, silent) {\n    var ch, level, tmp, token, pos = state.bMarks[startLine] + state.tShift[startLine], max = state.eMarks[startLine];\n    // if it's indented more than 3 spaces, it should be a code block\n    if (state.sCount[startLine] - state.blkIndent >= 4) {\n        return false;\n    }\n    ch = state.src.charCodeAt(pos);\n    if (ch !== 0x23 /* # */  || pos >= max) {\n        return false;\n    }\n    // count heading level\n    level = 1;\n    ch = state.src.charCodeAt(++pos);\n    while(ch === 0x23 /* # */  && pos < max && level <= 6){\n        level++;\n        ch = state.src.charCodeAt(++pos);\n    }\n    if (level > 6 || pos < max && !isSpace(ch)) {\n        return false;\n    }\n    if (silent) {\n        return true;\n    }\n    // Let's cut tails like '    ###  ' from the end of string\n    max = state.skipSpacesBack(max, pos);\n    tmp = state.skipCharsBack(max, 0x23, pos); // #\n    if (tmp > pos && isSpace(state.src.charCodeAt(tmp - 1))) {\n        max = tmp;\n    }\n    state.line = startLine + 1;\n    token = state.push(\"heading_open\", \"h\" + String(level), 1);\n    token.markup = \"########\".slice(0, level);\n    token.map = [\n        startLine,\n        state.line\n    ];\n    token = state.push(\"inline\", \"\", 0);\n    token.content = state.src.slice(pos, max).trim();\n    token.map = [\n        startLine,\n        state.line\n    ];\n    token.children = [];\n    token = state.push(\"heading_close\", \"h\" + String(level), -1);\n    token.markup = \"########\".slice(0, level);\n    return true;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3J1bGVzX2Jsb2NrL2hlYWRpbmcuanMiLCJtYXBwaW5ncyI6IkFBQUEsdUJBQXVCO0FBRXZCO0FBRUEsSUFBSUEsVUFBVUMsNEdBQWtDO0FBR2hEQyxPQUFPQyxPQUFPLEdBQUcsU0FBU0MsUUFBUUMsS0FBSyxFQUFFQyxTQUFTLEVBQUVDLE9BQU8sRUFBRUMsTUFBTTtJQUNqRSxJQUFJQyxJQUFJQyxPQUFPQyxLQUFLQyxPQUNoQkMsTUFBTVIsTUFBTVMsTUFBTSxDQUFDUixVQUFVLEdBQUdELE1BQU1VLE1BQU0sQ0FBQ1QsVUFBVSxFQUN2RFUsTUFBTVgsTUFBTVksTUFBTSxDQUFDWCxVQUFVO0lBRWpDLGlFQUFpRTtJQUNqRSxJQUFJRCxNQUFNYSxNQUFNLENBQUNaLFVBQVUsR0FBR0QsTUFBTWMsU0FBUyxJQUFJLEdBQUc7UUFBRSxPQUFPO0lBQU87SUFFcEVWLEtBQU1KLE1BQU1lLEdBQUcsQ0FBQ0MsVUFBVSxDQUFDUjtJQUUzQixJQUFJSixPQUFPLEtBQUksS0FBSyxPQUFNSSxPQUFPRyxLQUFLO1FBQUUsT0FBTztJQUFPO0lBRXRELHNCQUFzQjtJQUN0Qk4sUUFBUTtJQUNSRCxLQUFLSixNQUFNZSxHQUFHLENBQUNDLFVBQVUsQ0FBQyxFQUFFUjtJQUM1QixNQUFPSixPQUFPLEtBQUksS0FBSyxPQUFNSSxNQUFNRyxPQUFPTixTQUFTLEVBQUc7UUFDcERBO1FBQ0FELEtBQUtKLE1BQU1lLEdBQUcsQ0FBQ0MsVUFBVSxDQUFDLEVBQUVSO0lBQzlCO0lBRUEsSUFBSUgsUUFBUSxLQUFNRyxNQUFNRyxPQUFPLENBQUNoQixRQUFRUyxLQUFNO1FBQUUsT0FBTztJQUFPO0lBRTlELElBQUlELFFBQVE7UUFBRSxPQUFPO0lBQU07SUFFM0IsMERBQTBEO0lBRTFEUSxNQUFNWCxNQUFNaUIsY0FBYyxDQUFDTixLQUFLSDtJQUNoQ0YsTUFBTU4sTUFBTWtCLGFBQWEsQ0FBQ1AsS0FBSyxNQUFNSCxNQUFNLElBQUk7SUFDL0MsSUFBSUYsTUFBTUUsT0FBT2IsUUFBUUssTUFBTWUsR0FBRyxDQUFDQyxVQUFVLENBQUNWLE1BQU0sS0FBSztRQUN2REssTUFBTUw7SUFDUjtJQUVBTixNQUFNbUIsSUFBSSxHQUFHbEIsWUFBWTtJQUV6Qk0sUUFBZVAsTUFBTW9CLElBQUksQ0FBQyxnQkFBZ0IsTUFBTUMsT0FBT2hCLFFBQVE7SUFDL0RFLE1BQU1lLE1BQU0sR0FBRyxXQUFXQyxLQUFLLENBQUMsR0FBR2xCO0lBQ25DRSxNQUFNaUIsR0FBRyxHQUFNO1FBQUV2QjtRQUFXRCxNQUFNbUIsSUFBSTtLQUFFO0lBRXhDWixRQUFpQlAsTUFBTW9CLElBQUksQ0FBQyxVQUFVLElBQUk7SUFDMUNiLE1BQU1rQixPQUFPLEdBQUl6QixNQUFNZSxHQUFHLENBQUNRLEtBQUssQ0FBQ2YsS0FBS0csS0FBS2UsSUFBSTtJQUMvQ25CLE1BQU1pQixHQUFHLEdBQVE7UUFBRXZCO1FBQVdELE1BQU1tQixJQUFJO0tBQUU7SUFDMUNaLE1BQU1vQixRQUFRLEdBQUcsRUFBRTtJQUVuQnBCLFFBQWVQLE1BQU1vQixJQUFJLENBQUMsaUJBQWlCLE1BQU1DLE9BQU9oQixRQUFRLENBQUM7SUFDakVFLE1BQU1lLE1BQU0sR0FBRyxXQUFXQyxLQUFLLENBQUMsR0FBR2xCO0lBRW5DLE9BQU87QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2cvLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3J1bGVzX2Jsb2NrL2hlYWRpbmcuanM/YWM2NiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBoZWFkaW5nICgjLCAjIywgLi4uKVxuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBpc1NwYWNlID0gcmVxdWlyZSgnLi4vY29tbW9uL3V0aWxzJykuaXNTcGFjZTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGhlYWRpbmcoc3RhdGUsIHN0YXJ0TGluZSwgZW5kTGluZSwgc2lsZW50KSB7XG4gIHZhciBjaCwgbGV2ZWwsIHRtcCwgdG9rZW4sXG4gICAgICBwb3MgPSBzdGF0ZS5iTWFya3Nbc3RhcnRMaW5lXSArIHN0YXRlLnRTaGlmdFtzdGFydExpbmVdLFxuICAgICAgbWF4ID0gc3RhdGUuZU1hcmtzW3N0YXJ0TGluZV07XG5cbiAgLy8gaWYgaXQncyBpbmRlbnRlZCBtb3JlIHRoYW4gMyBzcGFjZXMsIGl0IHNob3VsZCBiZSBhIGNvZGUgYmxvY2tcbiAgaWYgKHN0YXRlLnNDb3VudFtzdGFydExpbmVdIC0gc3RhdGUuYmxrSW5kZW50ID49IDQpIHsgcmV0dXJuIGZhbHNlOyB9XG5cbiAgY2ggID0gc3RhdGUuc3JjLmNoYXJDb2RlQXQocG9zKTtcblxuICBpZiAoY2ggIT09IDB4MjMvKiAjICovIHx8IHBvcyA+PSBtYXgpIHsgcmV0dXJuIGZhbHNlOyB9XG5cbiAgLy8gY291bnQgaGVhZGluZyBsZXZlbFxuICBsZXZlbCA9IDE7XG4gIGNoID0gc3RhdGUuc3JjLmNoYXJDb2RlQXQoKytwb3MpO1xuICB3aGlsZSAoY2ggPT09IDB4MjMvKiAjICovICYmIHBvcyA8IG1heCAmJiBsZXZlbCA8PSA2KSB7XG4gICAgbGV2ZWwrKztcbiAgICBjaCA9IHN0YXRlLnNyYy5jaGFyQ29kZUF0KCsrcG9zKTtcbiAgfVxuXG4gIGlmIChsZXZlbCA+IDYgfHwgKHBvcyA8IG1heCAmJiAhaXNTcGFjZShjaCkpKSB7IHJldHVybiBmYWxzZTsgfVxuXG4gIGlmIChzaWxlbnQpIHsgcmV0dXJuIHRydWU7IH1cblxuICAvLyBMZXQncyBjdXQgdGFpbHMgbGlrZSAnICAgICMjIyAgJyBmcm9tIHRoZSBlbmQgb2Ygc3RyaW5nXG5cbiAgbWF4ID0gc3RhdGUuc2tpcFNwYWNlc0JhY2sobWF4LCBwb3MpO1xuICB0bXAgPSBzdGF0ZS5za2lwQ2hhcnNCYWNrKG1heCwgMHgyMywgcG9zKTsgLy8gI1xuICBpZiAodG1wID4gcG9zICYmIGlzU3BhY2Uoc3RhdGUuc3JjLmNoYXJDb2RlQXQodG1wIC0gMSkpKSB7XG4gICAgbWF4ID0gdG1wO1xuICB9XG5cbiAgc3RhdGUubGluZSA9IHN0YXJ0TGluZSArIDE7XG5cbiAgdG9rZW4gICAgICAgID0gc3RhdGUucHVzaCgnaGVhZGluZ19vcGVuJywgJ2gnICsgU3RyaW5nKGxldmVsKSwgMSk7XG4gIHRva2VuLm1hcmt1cCA9ICcjIyMjIyMjIycuc2xpY2UoMCwgbGV2ZWwpO1xuICB0b2tlbi5tYXAgICAgPSBbIHN0YXJ0TGluZSwgc3RhdGUubGluZSBdO1xuXG4gIHRva2VuICAgICAgICAgID0gc3RhdGUucHVzaCgnaW5saW5lJywgJycsIDApO1xuICB0b2tlbi5jb250ZW50ICA9IHN0YXRlLnNyYy5zbGljZShwb3MsIG1heCkudHJpbSgpO1xuICB0b2tlbi5tYXAgICAgICA9IFsgc3RhcnRMaW5lLCBzdGF0ZS5saW5lIF07XG4gIHRva2VuLmNoaWxkcmVuID0gW107XG5cbiAgdG9rZW4gICAgICAgID0gc3RhdGUucHVzaCgnaGVhZGluZ19jbG9zZScsICdoJyArIFN0cmluZyhsZXZlbCksIC0xKTtcbiAgdG9rZW4ubWFya3VwID0gJyMjIyMjIyMjJy5zbGljZSgwLCBsZXZlbCk7XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuIl0sIm5hbWVzIjpbImlzU3BhY2UiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsImhlYWRpbmciLCJzdGF0ZSIsInN0YXJ0TGluZSIsImVuZExpbmUiLCJzaWxlbnQiLCJjaCIsImxldmVsIiwidG1wIiwidG9rZW4iLCJwb3MiLCJiTWFya3MiLCJ0U2hpZnQiLCJtYXgiLCJlTWFya3MiLCJzQ291bnQiLCJibGtJbmRlbnQiLCJzcmMiLCJjaGFyQ29kZUF0Iiwic2tpcFNwYWNlc0JhY2siLCJza2lwQ2hhcnNCYWNrIiwibGluZSIsInB1c2giLCJTdHJpbmciLCJtYXJrdXAiLCJzbGljZSIsIm1hcCIsImNvbnRlbnQiLCJ0cmltIiwiY2hpbGRyZW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/markdown-it/lib/rules_block/heading.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/markdown-it/lib/rules_block/hr.js":
/*!********************************************************!*\
  !*** ./node_modules/markdown-it/lib/rules_block/hr.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Horizontal rule\n\nvar isSpace = (__webpack_require__(/*! ../common/utils */ \"(rsc)/./node_modules/markdown-it/lib/common/utils.js\").isSpace);\nmodule.exports = function hr(state, startLine, endLine, silent) {\n    var marker, cnt, ch, token, pos = state.bMarks[startLine] + state.tShift[startLine], max = state.eMarks[startLine];\n    // if it's indented more than 3 spaces, it should be a code block\n    if (state.sCount[startLine] - state.blkIndent >= 4) {\n        return false;\n    }\n    marker = state.src.charCodeAt(pos++);\n    // Check hr marker\n    if (marker !== 0x2A /* * */  && marker !== 0x2D /* - */  && marker !== 0x5F /* _ */ ) {\n        return false;\n    }\n    // markers can be mixed with spaces, but there should be at least 3 of them\n    cnt = 1;\n    while(pos < max){\n        ch = state.src.charCodeAt(pos++);\n        if (ch !== marker && !isSpace(ch)) {\n            return false;\n        }\n        if (ch === marker) {\n            cnt++;\n        }\n    }\n    if (cnt < 3) {\n        return false;\n    }\n    if (silent) {\n        return true;\n    }\n    state.line = startLine + 1;\n    token = state.push(\"hr\", \"hr\", 0);\n    token.map = [\n        startLine,\n        state.line\n    ];\n    token.markup = Array(cnt + 1).join(String.fromCharCode(marker));\n    return true;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3J1bGVzX2Jsb2NrL2hyLmpzIiwibWFwcGluZ3MiOiJBQUFBLGtCQUFrQjtBQUVsQjtBQUVBLElBQUlBLFVBQVVDLDRHQUFrQztBQUdoREMsT0FBT0MsT0FBTyxHQUFHLFNBQVNDLEdBQUdDLEtBQUssRUFBRUMsU0FBUyxFQUFFQyxPQUFPLEVBQUVDLE1BQU07SUFDNUQsSUFBSUMsUUFBUUMsS0FBS0MsSUFBSUMsT0FDakJDLE1BQU1SLE1BQU1TLE1BQU0sQ0FBQ1IsVUFBVSxHQUFHRCxNQUFNVSxNQUFNLENBQUNULFVBQVUsRUFDdkRVLE1BQU1YLE1BQU1ZLE1BQU0sQ0FBQ1gsVUFBVTtJQUVqQyxpRUFBaUU7SUFDakUsSUFBSUQsTUFBTWEsTUFBTSxDQUFDWixVQUFVLEdBQUdELE1BQU1jLFNBQVMsSUFBSSxHQUFHO1FBQUUsT0FBTztJQUFPO0lBRXBFVixTQUFTSixNQUFNZSxHQUFHLENBQUNDLFVBQVUsQ0FBQ1I7SUFFOUIsa0JBQWtCO0lBQ2xCLElBQUlKLFdBQVcsS0FBSSxLQUFLLE9BQ3BCQSxXQUFXLEtBQUksS0FBSyxPQUNwQkEsV0FBVyxLQUFJLEtBQUssS0FBSTtRQUMxQixPQUFPO0lBQ1Q7SUFFQSwyRUFBMkU7SUFFM0VDLE1BQU07SUFDTixNQUFPRyxNQUFNRyxJQUFLO1FBQ2hCTCxLQUFLTixNQUFNZSxHQUFHLENBQUNDLFVBQVUsQ0FBQ1I7UUFDMUIsSUFBSUYsT0FBT0YsVUFBVSxDQUFDVCxRQUFRVyxLQUFLO1lBQUUsT0FBTztRQUFPO1FBQ25ELElBQUlBLE9BQU9GLFFBQVE7WUFBRUM7UUFBTztJQUM5QjtJQUVBLElBQUlBLE1BQU0sR0FBRztRQUFFLE9BQU87SUFBTztJQUU3QixJQUFJRixRQUFRO1FBQUUsT0FBTztJQUFNO0lBRTNCSCxNQUFNaUIsSUFBSSxHQUFHaEIsWUFBWTtJQUV6Qk0sUUFBZVAsTUFBTWtCLElBQUksQ0FBQyxNQUFNLE1BQU07SUFDdENYLE1BQU1ZLEdBQUcsR0FBTTtRQUFFbEI7UUFBV0QsTUFBTWlCLElBQUk7S0FBRTtJQUN4Q1YsTUFBTWEsTUFBTSxHQUFHQyxNQUFNaEIsTUFBTSxHQUFHaUIsSUFBSSxDQUFDQyxPQUFPQyxZQUFZLENBQUNwQjtJQUV2RCxPQUFPO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9nLy4vbm9kZV9tb2R1bGVzL21hcmtkb3duLWl0L2xpYi9ydWxlc19ibG9jay9oci5qcz9kMGJlIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEhvcml6b250YWwgcnVsZVxuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBpc1NwYWNlID0gcmVxdWlyZSgnLi4vY29tbW9uL3V0aWxzJykuaXNTcGFjZTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGhyKHN0YXRlLCBzdGFydExpbmUsIGVuZExpbmUsIHNpbGVudCkge1xuICB2YXIgbWFya2VyLCBjbnQsIGNoLCB0b2tlbixcbiAgICAgIHBvcyA9IHN0YXRlLmJNYXJrc1tzdGFydExpbmVdICsgc3RhdGUudFNoaWZ0W3N0YXJ0TGluZV0sXG4gICAgICBtYXggPSBzdGF0ZS5lTWFya3Nbc3RhcnRMaW5lXTtcblxuICAvLyBpZiBpdCdzIGluZGVudGVkIG1vcmUgdGhhbiAzIHNwYWNlcywgaXQgc2hvdWxkIGJlIGEgY29kZSBibG9ja1xuICBpZiAoc3RhdGUuc0NvdW50W3N0YXJ0TGluZV0gLSBzdGF0ZS5ibGtJbmRlbnQgPj0gNCkgeyByZXR1cm4gZmFsc2U7IH1cblxuICBtYXJrZXIgPSBzdGF0ZS5zcmMuY2hhckNvZGVBdChwb3MrKyk7XG5cbiAgLy8gQ2hlY2sgaHIgbWFya2VyXG4gIGlmIChtYXJrZXIgIT09IDB4MkEvKiAqICovICYmXG4gICAgICBtYXJrZXIgIT09IDB4MkQvKiAtICovICYmXG4gICAgICBtYXJrZXIgIT09IDB4NUYvKiBfICovKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gbWFya2VycyBjYW4gYmUgbWl4ZWQgd2l0aCBzcGFjZXMsIGJ1dCB0aGVyZSBzaG91bGQgYmUgYXQgbGVhc3QgMyBvZiB0aGVtXG5cbiAgY250ID0gMTtcbiAgd2hpbGUgKHBvcyA8IG1heCkge1xuICAgIGNoID0gc3RhdGUuc3JjLmNoYXJDb2RlQXQocG9zKyspO1xuICAgIGlmIChjaCAhPT0gbWFya2VyICYmICFpc1NwYWNlKGNoKSkgeyByZXR1cm4gZmFsc2U7IH1cbiAgICBpZiAoY2ggPT09IG1hcmtlcikgeyBjbnQrKzsgfVxuICB9XG5cbiAgaWYgKGNudCA8IDMpIHsgcmV0dXJuIGZhbHNlOyB9XG5cbiAgaWYgKHNpbGVudCkgeyByZXR1cm4gdHJ1ZTsgfVxuXG4gIHN0YXRlLmxpbmUgPSBzdGFydExpbmUgKyAxO1xuXG4gIHRva2VuICAgICAgICA9IHN0YXRlLnB1c2goJ2hyJywgJ2hyJywgMCk7XG4gIHRva2VuLm1hcCAgICA9IFsgc3RhcnRMaW5lLCBzdGF0ZS5saW5lIF07XG4gIHRva2VuLm1hcmt1cCA9IEFycmF5KGNudCArIDEpLmpvaW4oU3RyaW5nLmZyb21DaGFyQ29kZShtYXJrZXIpKTtcblxuICByZXR1cm4gdHJ1ZTtcbn07XG4iXSwibmFtZXMiOlsiaXNTcGFjZSIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiaHIiLCJzdGF0ZSIsInN0YXJ0TGluZSIsImVuZExpbmUiLCJzaWxlbnQiLCJtYXJrZXIiLCJjbnQiLCJjaCIsInRva2VuIiwicG9zIiwiYk1hcmtzIiwidFNoaWZ0IiwibWF4IiwiZU1hcmtzIiwic0NvdW50IiwiYmxrSW5kZW50Iiwic3JjIiwiY2hhckNvZGVBdCIsImxpbmUiLCJwdXNoIiwibWFwIiwibWFya3VwIiwiQXJyYXkiLCJqb2luIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/markdown-it/lib/rules_block/hr.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/markdown-it/lib/rules_block/html_block.js":
/*!****************************************************************!*\
  !*** ./node_modules/markdown-it/lib/rules_block/html_block.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// HTML block\n\nvar block_names = __webpack_require__(/*! ../common/html_blocks */ \"(rsc)/./node_modules/markdown-it/lib/common/html_blocks.js\");\nvar HTML_OPEN_CLOSE_TAG_RE = (__webpack_require__(/*! ../common/html_re */ \"(rsc)/./node_modules/markdown-it/lib/common/html_re.js\").HTML_OPEN_CLOSE_TAG_RE);\n// An array of opening and corresponding closing sequences for html tags,\n// last argument defines whether it can terminate a paragraph or not\n//\nvar HTML_SEQUENCES = [\n    [\n        /^<(script|pre|style|textarea)(?=(\\s|>|$))/i,\n        /<\\/(script|pre|style|textarea)>/i,\n        true\n    ],\n    [\n        /^<!--/,\n        /-->/,\n        true\n    ],\n    [\n        /^<\\?/,\n        /\\?>/,\n        true\n    ],\n    [\n        /^<![A-Z]/,\n        />/,\n        true\n    ],\n    [\n        /^<!\\[CDATA\\[/,\n        /\\]\\]>/,\n        true\n    ],\n    [\n        new RegExp(\"^</?(\" + block_names.join(\"|\") + \")(?=(\\\\s|/?>|$))\", \"i\"),\n        /^$/,\n        true\n    ],\n    [\n        new RegExp(HTML_OPEN_CLOSE_TAG_RE.source + \"\\\\s*$\"),\n        /^$/,\n        false\n    ]\n];\nmodule.exports = function html_block(state, startLine, endLine, silent) {\n    var i, nextLine, token, lineText, pos = state.bMarks[startLine] + state.tShift[startLine], max = state.eMarks[startLine];\n    // if it's indented more than 3 spaces, it should be a code block\n    if (state.sCount[startLine] - state.blkIndent >= 4) {\n        return false;\n    }\n    if (!state.md.options.html) {\n        return false;\n    }\n    if (state.src.charCodeAt(pos) !== 0x3C /* < */ ) {\n        return false;\n    }\n    lineText = state.src.slice(pos, max);\n    for(i = 0; i < HTML_SEQUENCES.length; i++){\n        if (HTML_SEQUENCES[i][0].test(lineText)) {\n            break;\n        }\n    }\n    if (i === HTML_SEQUENCES.length) {\n        return false;\n    }\n    if (silent) {\n        // true if this sequence can be a terminator, false otherwise\n        return HTML_SEQUENCES[i][2];\n    }\n    nextLine = startLine + 1;\n    // If we are here - we detected HTML block.\n    // Let's roll down till block end.\n    if (!HTML_SEQUENCES[i][1].test(lineText)) {\n        for(; nextLine < endLine; nextLine++){\n            if (state.sCount[nextLine] < state.blkIndent) {\n                break;\n            }\n            pos = state.bMarks[nextLine] + state.tShift[nextLine];\n            max = state.eMarks[nextLine];\n            lineText = state.src.slice(pos, max);\n            if (HTML_SEQUENCES[i][1].test(lineText)) {\n                if (lineText.length !== 0) {\n                    nextLine++;\n                }\n                break;\n            }\n        }\n    }\n    state.line = nextLine;\n    token = state.push(\"html_block\", \"\", 0);\n    token.map = [\n        startLine,\n        nextLine\n    ];\n    token.content = state.getLines(startLine, nextLine, state.blkIndent, true);\n    return true;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3J1bGVzX2Jsb2NrL2h0bWxfYmxvY2suanMiLCJtYXBwaW5ncyI6IkFBQUEsYUFBYTtBQUViO0FBR0EsSUFBSUEsY0FBY0MsbUJBQU9BLENBQUM7QUFDMUIsSUFBSUMseUJBQXlCRCwrSEFBbUQ7QUFFaEYseUVBQXlFO0FBQ3pFLG9FQUFvRTtBQUNwRSxFQUFFO0FBQ0YsSUFBSUUsaUJBQWlCO0lBQ25CO1FBQUU7UUFBOEM7UUFBb0M7S0FBTTtJQUMxRjtRQUFFO1FBQWdCO1FBQVM7S0FBTTtJQUNqQztRQUFFO1FBQWdCO1FBQVM7S0FBTTtJQUNqQztRQUFFO1FBQWdCO1FBQVM7S0FBTTtJQUNqQztRQUFFO1FBQWdCO1FBQVM7S0FBTTtJQUNqQztRQUFFLElBQUlDLE9BQU8sVUFBVUosWUFBWUssSUFBSSxDQUFDLE9BQU8sb0JBQW9CO1FBQU07UUFBTTtLQUFNO0lBQ3JGO1FBQUUsSUFBSUQsT0FBT0YsdUJBQXVCSSxNQUFNLEdBQUc7UUFBVztRQUFNO0tBQU87Q0FDdEU7QUFHREMsT0FBT0MsT0FBTyxHQUFHLFNBQVNDLFdBQVdDLEtBQUssRUFBRUMsU0FBUyxFQUFFQyxPQUFPLEVBQUVDLE1BQU07SUFDcEUsSUFBSUMsR0FBR0MsVUFBVUMsT0FBT0MsVUFDcEJDLE1BQU1SLE1BQU1TLE1BQU0sQ0FBQ1IsVUFBVSxHQUFHRCxNQUFNVSxNQUFNLENBQUNULFVBQVUsRUFDdkRVLE1BQU1YLE1BQU1ZLE1BQU0sQ0FBQ1gsVUFBVTtJQUVqQyxpRUFBaUU7SUFDakUsSUFBSUQsTUFBTWEsTUFBTSxDQUFDWixVQUFVLEdBQUdELE1BQU1jLFNBQVMsSUFBSSxHQUFHO1FBQUUsT0FBTztJQUFPO0lBRXBFLElBQUksQ0FBQ2QsTUFBTWUsRUFBRSxDQUFDQyxPQUFPLENBQUNDLElBQUksRUFBRTtRQUFFLE9BQU87SUFBTztJQUU1QyxJQUFJakIsTUFBTWtCLEdBQUcsQ0FBQ0MsVUFBVSxDQUFDWCxTQUFTLEtBQUksS0FBSyxLQUFJO1FBQUUsT0FBTztJQUFPO0lBRS9ERCxXQUFXUCxNQUFNa0IsR0FBRyxDQUFDRSxLQUFLLENBQUNaLEtBQUtHO0lBRWhDLElBQUtQLElBQUksR0FBR0EsSUFBSVgsZUFBZTRCLE1BQU0sRUFBRWpCLElBQUs7UUFDMUMsSUFBSVgsY0FBYyxDQUFDVyxFQUFFLENBQUMsRUFBRSxDQUFDa0IsSUFBSSxDQUFDZixXQUFXO1lBQUU7UUFBTztJQUNwRDtJQUVBLElBQUlILE1BQU1YLGVBQWU0QixNQUFNLEVBQUU7UUFBRSxPQUFPO0lBQU87SUFFakQsSUFBSWxCLFFBQVE7UUFDViw2REFBNkQ7UUFDN0QsT0FBT1YsY0FBYyxDQUFDVyxFQUFFLENBQUMsRUFBRTtJQUM3QjtJQUVBQyxXQUFXSixZQUFZO0lBRXZCLDJDQUEyQztJQUMzQyxrQ0FBa0M7SUFDbEMsSUFBSSxDQUFDUixjQUFjLENBQUNXLEVBQUUsQ0FBQyxFQUFFLENBQUNrQixJQUFJLENBQUNmLFdBQVc7UUFDeEMsTUFBT0YsV0FBV0gsU0FBU0csV0FBWTtZQUNyQyxJQUFJTCxNQUFNYSxNQUFNLENBQUNSLFNBQVMsR0FBR0wsTUFBTWMsU0FBUyxFQUFFO2dCQUFFO1lBQU87WUFFdkROLE1BQU1SLE1BQU1TLE1BQU0sQ0FBQ0osU0FBUyxHQUFHTCxNQUFNVSxNQUFNLENBQUNMLFNBQVM7WUFDckRNLE1BQU1YLE1BQU1ZLE1BQU0sQ0FBQ1AsU0FBUztZQUM1QkUsV0FBV1AsTUFBTWtCLEdBQUcsQ0FBQ0UsS0FBSyxDQUFDWixLQUFLRztZQUVoQyxJQUFJbEIsY0FBYyxDQUFDVyxFQUFFLENBQUMsRUFBRSxDQUFDa0IsSUFBSSxDQUFDZixXQUFXO2dCQUN2QyxJQUFJQSxTQUFTYyxNQUFNLEtBQUssR0FBRztvQkFBRWhCO2dCQUFZO2dCQUN6QztZQUNGO1FBQ0Y7SUFDRjtJQUVBTCxNQUFNdUIsSUFBSSxHQUFHbEI7SUFFYkMsUUFBZ0JOLE1BQU13QixJQUFJLENBQUMsY0FBYyxJQUFJO0lBQzdDbEIsTUFBTW1CLEdBQUcsR0FBTztRQUFFeEI7UUFBV0k7S0FBVTtJQUN2Q0MsTUFBTW9CLE9BQU8sR0FBRzFCLE1BQU0yQixRQUFRLENBQUMxQixXQUFXSSxVQUFVTCxNQUFNYyxTQUFTLEVBQUU7SUFFckUsT0FBTztBQUNUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvZy8uL25vZGVfbW9kdWxlcy9tYXJrZG93bi1pdC9saWIvcnVsZXNfYmxvY2svaHRtbF9ibG9jay5qcz9kYjdiIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEhUTUwgYmxvY2tcblxuJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBibG9ja19uYW1lcyA9IHJlcXVpcmUoJy4uL2NvbW1vbi9odG1sX2Jsb2NrcycpO1xudmFyIEhUTUxfT1BFTl9DTE9TRV9UQUdfUkUgPSByZXF1aXJlKCcuLi9jb21tb24vaHRtbF9yZScpLkhUTUxfT1BFTl9DTE9TRV9UQUdfUkU7XG5cbi8vIEFuIGFycmF5IG9mIG9wZW5pbmcgYW5kIGNvcnJlc3BvbmRpbmcgY2xvc2luZyBzZXF1ZW5jZXMgZm9yIGh0bWwgdGFncyxcbi8vIGxhc3QgYXJndW1lbnQgZGVmaW5lcyB3aGV0aGVyIGl0IGNhbiB0ZXJtaW5hdGUgYSBwYXJhZ3JhcGggb3Igbm90XG4vL1xudmFyIEhUTUxfU0VRVUVOQ0VTID0gW1xuICBbIC9ePChzY3JpcHR8cHJlfHN0eWxlfHRleHRhcmVhKSg/PShcXHN8PnwkKSkvaSwgLzxcXC8oc2NyaXB0fHByZXxzdHlsZXx0ZXh0YXJlYSk+L2ksIHRydWUgXSxcbiAgWyAvXjwhLS0vLCAgICAgICAgLy0tPi8sICAgdHJ1ZSBdLFxuICBbIC9ePFxcPy8sICAgICAgICAgL1xcPz4vLCAgIHRydWUgXSxcbiAgWyAvXjwhW0EtWl0vLCAgICAgLz4vLCAgICAgdHJ1ZSBdLFxuICBbIC9ePCFcXFtDREFUQVxcWy8sIC9cXF1cXF0+LywgdHJ1ZSBdLFxuICBbIG5ldyBSZWdFeHAoJ148Lz8oJyArIGJsb2NrX25hbWVzLmpvaW4oJ3wnKSArICcpKD89KFxcXFxzfC8/PnwkKSknLCAnaScpLCAvXiQvLCB0cnVlIF0sXG4gIFsgbmV3IFJlZ0V4cChIVE1MX09QRU5fQ0xPU0VfVEFHX1JFLnNvdXJjZSArICdcXFxccyokJyksICAvXiQvLCBmYWxzZSBdXG5dO1xuXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaHRtbF9ibG9jayhzdGF0ZSwgc3RhcnRMaW5lLCBlbmRMaW5lLCBzaWxlbnQpIHtcbiAgdmFyIGksIG5leHRMaW5lLCB0b2tlbiwgbGluZVRleHQsXG4gICAgICBwb3MgPSBzdGF0ZS5iTWFya3Nbc3RhcnRMaW5lXSArIHN0YXRlLnRTaGlmdFtzdGFydExpbmVdLFxuICAgICAgbWF4ID0gc3RhdGUuZU1hcmtzW3N0YXJ0TGluZV07XG5cbiAgLy8gaWYgaXQncyBpbmRlbnRlZCBtb3JlIHRoYW4gMyBzcGFjZXMsIGl0IHNob3VsZCBiZSBhIGNvZGUgYmxvY2tcbiAgaWYgKHN0YXRlLnNDb3VudFtzdGFydExpbmVdIC0gc3RhdGUuYmxrSW5kZW50ID49IDQpIHsgcmV0dXJuIGZhbHNlOyB9XG5cbiAgaWYgKCFzdGF0ZS5tZC5vcHRpb25zLmh0bWwpIHsgcmV0dXJuIGZhbHNlOyB9XG5cbiAgaWYgKHN0YXRlLnNyYy5jaGFyQ29kZUF0KHBvcykgIT09IDB4M0MvKiA8ICovKSB7IHJldHVybiBmYWxzZTsgfVxuXG4gIGxpbmVUZXh0ID0gc3RhdGUuc3JjLnNsaWNlKHBvcywgbWF4KTtcblxuICBmb3IgKGkgPSAwOyBpIDwgSFRNTF9TRVFVRU5DRVMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoSFRNTF9TRVFVRU5DRVNbaV1bMF0udGVzdChsaW5lVGV4dCkpIHsgYnJlYWs7IH1cbiAgfVxuXG4gIGlmIChpID09PSBIVE1MX1NFUVVFTkNFUy5sZW5ndGgpIHsgcmV0dXJuIGZhbHNlOyB9XG5cbiAgaWYgKHNpbGVudCkge1xuICAgIC8vIHRydWUgaWYgdGhpcyBzZXF1ZW5jZSBjYW4gYmUgYSB0ZXJtaW5hdG9yLCBmYWxzZSBvdGhlcndpc2VcbiAgICByZXR1cm4gSFRNTF9TRVFVRU5DRVNbaV1bMl07XG4gIH1cblxuICBuZXh0TGluZSA9IHN0YXJ0TGluZSArIDE7XG5cbiAgLy8gSWYgd2UgYXJlIGhlcmUgLSB3ZSBkZXRlY3RlZCBIVE1MIGJsb2NrLlxuICAvLyBMZXQncyByb2xsIGRvd24gdGlsbCBibG9jayBlbmQuXG4gIGlmICghSFRNTF9TRVFVRU5DRVNbaV1bMV0udGVzdChsaW5lVGV4dCkpIHtcbiAgICBmb3IgKDsgbmV4dExpbmUgPCBlbmRMaW5lOyBuZXh0TGluZSsrKSB7XG4gICAgICBpZiAoc3RhdGUuc0NvdW50W25leHRMaW5lXSA8IHN0YXRlLmJsa0luZGVudCkgeyBicmVhazsgfVxuXG4gICAgICBwb3MgPSBzdGF0ZS5iTWFya3NbbmV4dExpbmVdICsgc3RhdGUudFNoaWZ0W25leHRMaW5lXTtcbiAgICAgIG1heCA9IHN0YXRlLmVNYXJrc1tuZXh0TGluZV07XG4gICAgICBsaW5lVGV4dCA9IHN0YXRlLnNyYy5zbGljZShwb3MsIG1heCk7XG5cbiAgICAgIGlmIChIVE1MX1NFUVVFTkNFU1tpXVsxXS50ZXN0KGxpbmVUZXh0KSkge1xuICAgICAgICBpZiAobGluZVRleHQubGVuZ3RoICE9PSAwKSB7IG5leHRMaW5lKys7IH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgc3RhdGUubGluZSA9IG5leHRMaW5lO1xuXG4gIHRva2VuICAgICAgICAgPSBzdGF0ZS5wdXNoKCdodG1sX2Jsb2NrJywgJycsIDApO1xuICB0b2tlbi5tYXAgICAgID0gWyBzdGFydExpbmUsIG5leHRMaW5lIF07XG4gIHRva2VuLmNvbnRlbnQgPSBzdGF0ZS5nZXRMaW5lcyhzdGFydExpbmUsIG5leHRMaW5lLCBzdGF0ZS5ibGtJbmRlbnQsIHRydWUpO1xuXG4gIHJldHVybiB0cnVlO1xufTtcbiJdLCJuYW1lcyI6WyJibG9ja19uYW1lcyIsInJlcXVpcmUiLCJIVE1MX09QRU5fQ0xPU0VfVEFHX1JFIiwiSFRNTF9TRVFVRU5DRVMiLCJSZWdFeHAiLCJqb2luIiwic291cmNlIiwibW9kdWxlIiwiZXhwb3J0cyIsImh0bWxfYmxvY2siLCJzdGF0ZSIsInN0YXJ0TGluZSIsImVuZExpbmUiLCJzaWxlbnQiLCJpIiwibmV4dExpbmUiLCJ0b2tlbiIsImxpbmVUZXh0IiwicG9zIiwiYk1hcmtzIiwidFNoaWZ0IiwibWF4IiwiZU1hcmtzIiwic0NvdW50IiwiYmxrSW5kZW50IiwibWQiLCJvcHRpb25zIiwiaHRtbCIsInNyYyIsImNoYXJDb2RlQXQiLCJzbGljZSIsImxlbmd0aCIsInRlc3QiLCJsaW5lIiwicHVzaCIsIm1hcCIsImNvbnRlbnQiLCJnZXRMaW5lcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/markdown-it/lib/rules_block/html_block.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/markdown-it/lib/rules_block/lheading.js":
/*!**************************************************************!*\
  !*** ./node_modules/markdown-it/lib/rules_block/lheading.js ***!
  \**************************************************************/
/***/ ((module) => {

eval("// lheading (---, ===)\n\nmodule.exports = function lheading(state, startLine, endLine /*, silent*/ ) {\n    var content, terminate, i, l, token, pos, max, level, marker, nextLine = startLine + 1, oldParentType, terminatorRules = state.md.block.ruler.getRules(\"paragraph\");\n    // if it's indented more than 3 spaces, it should be a code block\n    if (state.sCount[startLine] - state.blkIndent >= 4) {\n        return false;\n    }\n    oldParentType = state.parentType;\n    state.parentType = \"paragraph\"; // use paragraph to match terminatorRules\n    // jump line-by-line until empty one or EOF\n    for(; nextLine < endLine && !state.isEmpty(nextLine); nextLine++){\n        // this would be a code block normally, but after paragraph\n        // it's considered a lazy continuation regardless of what's there\n        if (state.sCount[nextLine] - state.blkIndent > 3) {\n            continue;\n        }\n        //\n        // Check for underline in setext header\n        //\n        if (state.sCount[nextLine] >= state.blkIndent) {\n            pos = state.bMarks[nextLine] + state.tShift[nextLine];\n            max = state.eMarks[nextLine];\n            if (pos < max) {\n                marker = state.src.charCodeAt(pos);\n                if (marker === 0x2D /* - */  || marker === 0x3D /* = */ ) {\n                    pos = state.skipChars(pos, marker);\n                    pos = state.skipSpaces(pos);\n                    if (pos >= max) {\n                        level = marker === 0x3D /* = */  ? 1 : 2;\n                        break;\n                    }\n                }\n            }\n        }\n        // quirk for blockquotes, this line should already be checked by that rule\n        if (state.sCount[nextLine] < 0) {\n            continue;\n        }\n        // Some tags can terminate paragraph without empty line.\n        terminate = false;\n        for(i = 0, l = terminatorRules.length; i < l; i++){\n            if (terminatorRules[i](state, nextLine, endLine, true)) {\n                terminate = true;\n                break;\n            }\n        }\n        if (terminate) {\n            break;\n        }\n    }\n    if (!level) {\n        // Didn't find valid underline\n        return false;\n    }\n    content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();\n    state.line = nextLine + 1;\n    token = state.push(\"heading_open\", \"h\" + String(level), 1);\n    token.markup = String.fromCharCode(marker);\n    token.map = [\n        startLine,\n        state.line\n    ];\n    token = state.push(\"inline\", \"\", 0);\n    token.content = content;\n    token.map = [\n        startLine,\n        state.line - 1\n    ];\n    token.children = [];\n    token = state.push(\"heading_close\", \"h\" + String(level), -1);\n    token.markup = String.fromCharCode(marker);\n    state.parentType = oldParentType;\n    return true;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3J1bGVzX2Jsb2NrL2xoZWFkaW5nLmpzIiwibWFwcGluZ3MiOiJBQUFBLHNCQUFzQjtBQUV0QjtBQUdBQSxPQUFPQyxPQUFPLEdBQUcsU0FBU0MsU0FBU0MsS0FBSyxFQUFFQyxTQUFTLEVBQUVDLFFBQU8sVUFBVSxHQUFWO0lBQzFELElBQUlDLFNBQVNDLFdBQVdDLEdBQUdDLEdBQUdDLE9BQU9DLEtBQUtDLEtBQUtDLE9BQU9DLFFBQ2xEQyxXQUFXWCxZQUFZLEdBQUdZLGVBQzFCQyxrQkFBa0JkLE1BQU1lLEVBQUUsQ0FBQ0MsS0FBSyxDQUFDQyxLQUFLLENBQUNDLFFBQVEsQ0FBQztJQUVwRCxpRUFBaUU7SUFDakUsSUFBSWxCLE1BQU1tQixNQUFNLENBQUNsQixVQUFVLEdBQUdELE1BQU1vQixTQUFTLElBQUksR0FBRztRQUFFLE9BQU87SUFBTztJQUVwRVAsZ0JBQWdCYixNQUFNcUIsVUFBVTtJQUNoQ3JCLE1BQU1xQixVQUFVLEdBQUcsYUFBYSx5Q0FBeUM7SUFFekUsMkNBQTJDO0lBQzNDLE1BQU9ULFdBQVdWLFdBQVcsQ0FBQ0YsTUFBTXNCLE9BQU8sQ0FBQ1YsV0FBV0EsV0FBWTtRQUNqRSwyREFBMkQ7UUFDM0QsaUVBQWlFO1FBQ2pFLElBQUlaLE1BQU1tQixNQUFNLENBQUNQLFNBQVMsR0FBR1osTUFBTW9CLFNBQVMsR0FBRyxHQUFHO1lBQUU7UUFBVTtRQUU5RCxFQUFFO1FBQ0YsdUNBQXVDO1FBQ3ZDLEVBQUU7UUFDRixJQUFJcEIsTUFBTW1CLE1BQU0sQ0FBQ1AsU0FBUyxJQUFJWixNQUFNb0IsU0FBUyxFQUFFO1lBQzdDWixNQUFNUixNQUFNdUIsTUFBTSxDQUFDWCxTQUFTLEdBQUdaLE1BQU13QixNQUFNLENBQUNaLFNBQVM7WUFDckRILE1BQU1ULE1BQU15QixNQUFNLENBQUNiLFNBQVM7WUFFNUIsSUFBSUosTUFBTUMsS0FBSztnQkFDYkUsU0FBU1gsTUFBTTBCLEdBQUcsQ0FBQ0MsVUFBVSxDQUFDbkI7Z0JBRTlCLElBQUlHLFdBQVcsS0FBSSxLQUFLLE9BQU1BLFdBQVcsS0FBSSxLQUFLLEtBQUk7b0JBQ3BESCxNQUFNUixNQUFNNEIsU0FBUyxDQUFDcEIsS0FBS0c7b0JBQzNCSCxNQUFNUixNQUFNNkIsVUFBVSxDQUFDckI7b0JBRXZCLElBQUlBLE9BQU9DLEtBQUs7d0JBQ2RDLFFBQVNDLFdBQVcsS0FBSSxLQUFLLE1BQUssSUFBSTt3QkFDdEM7b0JBQ0Y7Z0JBQ0Y7WUFDRjtRQUNGO1FBRUEsMEVBQTBFO1FBQzFFLElBQUlYLE1BQU1tQixNQUFNLENBQUNQLFNBQVMsR0FBRyxHQUFHO1lBQUU7UUFBVTtRQUU1Qyx3REFBd0Q7UUFDeERSLFlBQVk7UUFDWixJQUFLQyxJQUFJLEdBQUdDLElBQUlRLGdCQUFnQmdCLE1BQU0sRUFBRXpCLElBQUlDLEdBQUdELElBQUs7WUFDbEQsSUFBSVMsZUFBZSxDQUFDVCxFQUFFLENBQUNMLE9BQU9ZLFVBQVVWLFNBQVMsT0FBTztnQkFDdERFLFlBQVk7Z0JBQ1o7WUFDRjtRQUNGO1FBQ0EsSUFBSUEsV0FBVztZQUFFO1FBQU87SUFDMUI7SUFFQSxJQUFJLENBQUNNLE9BQU87UUFDViw4QkFBOEI7UUFDOUIsT0FBTztJQUNUO0lBRUFQLFVBQVVILE1BQU0rQixRQUFRLENBQUM5QixXQUFXVyxVQUFVWixNQUFNb0IsU0FBUyxFQUFFLE9BQU9ZLElBQUk7SUFFMUVoQyxNQUFNaUMsSUFBSSxHQUFHckIsV0FBVztJQUV4QkwsUUFBaUJQLE1BQU1rQyxJQUFJLENBQUMsZ0JBQWdCLE1BQU1DLE9BQU96QixRQUFRO0lBQ2pFSCxNQUFNNkIsTUFBTSxHQUFLRCxPQUFPRSxZQUFZLENBQUMxQjtJQUNyQ0osTUFBTStCLEdBQUcsR0FBUTtRQUFFckM7UUFBV0QsTUFBTWlDLElBQUk7S0FBRTtJQUUxQzFCLFFBQWlCUCxNQUFNa0MsSUFBSSxDQUFDLFVBQVUsSUFBSTtJQUMxQzNCLE1BQU1KLE9BQU8sR0FBSUE7SUFDakJJLE1BQU0rQixHQUFHLEdBQVE7UUFBRXJDO1FBQVdELE1BQU1pQyxJQUFJLEdBQUc7S0FBRztJQUM5QzFCLE1BQU1nQyxRQUFRLEdBQUcsRUFBRTtJQUVuQmhDLFFBQWlCUCxNQUFNa0MsSUFBSSxDQUFDLGlCQUFpQixNQUFNQyxPQUFPekIsUUFBUSxDQUFDO0lBQ25FSCxNQUFNNkIsTUFBTSxHQUFLRCxPQUFPRSxZQUFZLENBQUMxQjtJQUVyQ1gsTUFBTXFCLFVBQVUsR0FBR1I7SUFFbkIsT0FBTztBQUNUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvZy8uL25vZGVfbW9kdWxlcy9tYXJrZG93bi1pdC9saWIvcnVsZXNfYmxvY2svbGhlYWRpbmcuanM/NTUyMyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBsaGVhZGluZyAoLS0tLCA9PT0pXG5cbid1c2Ugc3RyaWN0JztcblxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGxoZWFkaW5nKHN0YXRlLCBzdGFydExpbmUsIGVuZExpbmUvKiwgc2lsZW50Ki8pIHtcbiAgdmFyIGNvbnRlbnQsIHRlcm1pbmF0ZSwgaSwgbCwgdG9rZW4sIHBvcywgbWF4LCBsZXZlbCwgbWFya2VyLFxuICAgICAgbmV4dExpbmUgPSBzdGFydExpbmUgKyAxLCBvbGRQYXJlbnRUeXBlLFxuICAgICAgdGVybWluYXRvclJ1bGVzID0gc3RhdGUubWQuYmxvY2sucnVsZXIuZ2V0UnVsZXMoJ3BhcmFncmFwaCcpO1xuXG4gIC8vIGlmIGl0J3MgaW5kZW50ZWQgbW9yZSB0aGFuIDMgc3BhY2VzLCBpdCBzaG91bGQgYmUgYSBjb2RlIGJsb2NrXG4gIGlmIChzdGF0ZS5zQ291bnRbc3RhcnRMaW5lXSAtIHN0YXRlLmJsa0luZGVudCA+PSA0KSB7IHJldHVybiBmYWxzZTsgfVxuXG4gIG9sZFBhcmVudFR5cGUgPSBzdGF0ZS5wYXJlbnRUeXBlO1xuICBzdGF0ZS5wYXJlbnRUeXBlID0gJ3BhcmFncmFwaCc7IC8vIHVzZSBwYXJhZ3JhcGggdG8gbWF0Y2ggdGVybWluYXRvclJ1bGVzXG5cbiAgLy8ganVtcCBsaW5lLWJ5LWxpbmUgdW50aWwgZW1wdHkgb25lIG9yIEVPRlxuICBmb3IgKDsgbmV4dExpbmUgPCBlbmRMaW5lICYmICFzdGF0ZS5pc0VtcHR5KG5leHRMaW5lKTsgbmV4dExpbmUrKykge1xuICAgIC8vIHRoaXMgd291bGQgYmUgYSBjb2RlIGJsb2NrIG5vcm1hbGx5LCBidXQgYWZ0ZXIgcGFyYWdyYXBoXG4gICAgLy8gaXQncyBjb25zaWRlcmVkIGEgbGF6eSBjb250aW51YXRpb24gcmVnYXJkbGVzcyBvZiB3aGF0J3MgdGhlcmVcbiAgICBpZiAoc3RhdGUuc0NvdW50W25leHRMaW5lXSAtIHN0YXRlLmJsa0luZGVudCA+IDMpIHsgY29udGludWU7IH1cblxuICAgIC8vXG4gICAgLy8gQ2hlY2sgZm9yIHVuZGVybGluZSBpbiBzZXRleHQgaGVhZGVyXG4gICAgLy9cbiAgICBpZiAoc3RhdGUuc0NvdW50W25leHRMaW5lXSA+PSBzdGF0ZS5ibGtJbmRlbnQpIHtcbiAgICAgIHBvcyA9IHN0YXRlLmJNYXJrc1tuZXh0TGluZV0gKyBzdGF0ZS50U2hpZnRbbmV4dExpbmVdO1xuICAgICAgbWF4ID0gc3RhdGUuZU1hcmtzW25leHRMaW5lXTtcblxuICAgICAgaWYgKHBvcyA8IG1heCkge1xuICAgICAgICBtYXJrZXIgPSBzdGF0ZS5zcmMuY2hhckNvZGVBdChwb3MpO1xuXG4gICAgICAgIGlmIChtYXJrZXIgPT09IDB4MkQvKiAtICovIHx8IG1hcmtlciA9PT0gMHgzRC8qID0gKi8pIHtcbiAgICAgICAgICBwb3MgPSBzdGF0ZS5za2lwQ2hhcnMocG9zLCBtYXJrZXIpO1xuICAgICAgICAgIHBvcyA9IHN0YXRlLnNraXBTcGFjZXMocG9zKTtcblxuICAgICAgICAgIGlmIChwb3MgPj0gbWF4KSB7XG4gICAgICAgICAgICBsZXZlbCA9IChtYXJrZXIgPT09IDB4M0QvKiA9ICovID8gMSA6IDIpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gcXVpcmsgZm9yIGJsb2NrcXVvdGVzLCB0aGlzIGxpbmUgc2hvdWxkIGFscmVhZHkgYmUgY2hlY2tlZCBieSB0aGF0IHJ1bGVcbiAgICBpZiAoc3RhdGUuc0NvdW50W25leHRMaW5lXSA8IDApIHsgY29udGludWU7IH1cblxuICAgIC8vIFNvbWUgdGFncyBjYW4gdGVybWluYXRlIHBhcmFncmFwaCB3aXRob3V0IGVtcHR5IGxpbmUuXG4gICAgdGVybWluYXRlID0gZmFsc2U7XG4gICAgZm9yIChpID0gMCwgbCA9IHRlcm1pbmF0b3JSdWxlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGlmICh0ZXJtaW5hdG9yUnVsZXNbaV0oc3RhdGUsIG5leHRMaW5lLCBlbmRMaW5lLCB0cnVlKSkge1xuICAgICAgICB0ZXJtaW5hdGUgPSB0cnVlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRlcm1pbmF0ZSkgeyBicmVhazsgfVxuICB9XG5cbiAgaWYgKCFsZXZlbCkge1xuICAgIC8vIERpZG4ndCBmaW5kIHZhbGlkIHVuZGVybGluZVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNvbnRlbnQgPSBzdGF0ZS5nZXRMaW5lcyhzdGFydExpbmUsIG5leHRMaW5lLCBzdGF0ZS5ibGtJbmRlbnQsIGZhbHNlKS50cmltKCk7XG5cbiAgc3RhdGUubGluZSA9IG5leHRMaW5lICsgMTtcblxuICB0b2tlbiAgICAgICAgICA9IHN0YXRlLnB1c2goJ2hlYWRpbmdfb3BlbicsICdoJyArIFN0cmluZyhsZXZlbCksIDEpO1xuICB0b2tlbi5tYXJrdXAgICA9IFN0cmluZy5mcm9tQ2hhckNvZGUobWFya2VyKTtcbiAgdG9rZW4ubWFwICAgICAgPSBbIHN0YXJ0TGluZSwgc3RhdGUubGluZSBdO1xuXG4gIHRva2VuICAgICAgICAgID0gc3RhdGUucHVzaCgnaW5saW5lJywgJycsIDApO1xuICB0b2tlbi5jb250ZW50ICA9IGNvbnRlbnQ7XG4gIHRva2VuLm1hcCAgICAgID0gWyBzdGFydExpbmUsIHN0YXRlLmxpbmUgLSAxIF07XG4gIHRva2VuLmNoaWxkcmVuID0gW107XG5cbiAgdG9rZW4gICAgICAgICAgPSBzdGF0ZS5wdXNoKCdoZWFkaW5nX2Nsb3NlJywgJ2gnICsgU3RyaW5nKGxldmVsKSwgLTEpO1xuICB0b2tlbi5tYXJrdXAgICA9IFN0cmluZy5mcm9tQ2hhckNvZGUobWFya2VyKTtcblxuICBzdGF0ZS5wYXJlbnRUeXBlID0gb2xkUGFyZW50VHlwZTtcblxuICByZXR1cm4gdHJ1ZTtcbn07XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImxoZWFkaW5nIiwic3RhdGUiLCJzdGFydExpbmUiLCJlbmRMaW5lIiwiY29udGVudCIsInRlcm1pbmF0ZSIsImkiLCJsIiwidG9rZW4iLCJwb3MiLCJtYXgiLCJsZXZlbCIsIm1hcmtlciIsIm5leHRMaW5lIiwib2xkUGFyZW50VHlwZSIsInRlcm1pbmF0b3JSdWxlcyIsIm1kIiwiYmxvY2siLCJydWxlciIsImdldFJ1bGVzIiwic0NvdW50IiwiYmxrSW5kZW50IiwicGFyZW50VHlwZSIsImlzRW1wdHkiLCJiTWFya3MiLCJ0U2hpZnQiLCJlTWFya3MiLCJzcmMiLCJjaGFyQ29kZUF0Iiwic2tpcENoYXJzIiwic2tpcFNwYWNlcyIsImxlbmd0aCIsImdldExpbmVzIiwidHJpbSIsImxpbmUiLCJwdXNoIiwiU3RyaW5nIiwibWFya3VwIiwiZnJvbUNoYXJDb2RlIiwibWFwIiwiY2hpbGRyZW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/markdown-it/lib/rules_block/lheading.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/markdown-it/lib/rules_block/list.js":
/*!**********************************************************!*\
  !*** ./node_modules/markdown-it/lib/rules_block/list.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Lists\n\nvar isSpace = (__webpack_require__(/*! ../common/utils */ \"(rsc)/./node_modules/markdown-it/lib/common/utils.js\").isSpace);\n// Search `[-+*][\\n ]`, returns next pos after marker on success\n// or -1 on fail.\nfunction skipBulletListMarker(state, startLine) {\n    var marker, pos, max, ch;\n    pos = state.bMarks[startLine] + state.tShift[startLine];\n    max = state.eMarks[startLine];\n    marker = state.src.charCodeAt(pos++);\n    // Check bullet\n    if (marker !== 0x2A /* * */  && marker !== 0x2D /* - */  && marker !== 0x2B /* + */ ) {\n        return -1;\n    }\n    if (pos < max) {\n        ch = state.src.charCodeAt(pos);\n        if (!isSpace(ch)) {\n            // \" -test \" - is not a list item\n            return -1;\n        }\n    }\n    return pos;\n}\n// Search `\\d+[.)][\\n ]`, returns next pos after marker on success\n// or -1 on fail.\nfunction skipOrderedListMarker(state, startLine) {\n    var ch, start = state.bMarks[startLine] + state.tShift[startLine], pos = start, max = state.eMarks[startLine];\n    // List marker should have at least 2 chars (digit + dot)\n    if (pos + 1 >= max) {\n        return -1;\n    }\n    ch = state.src.charCodeAt(pos++);\n    if (ch < 0x30 /* 0 */  || ch > 0x39 /* 9 */ ) {\n        return -1;\n    }\n    for(;;){\n        // EOL -> fail\n        if (pos >= max) {\n            return -1;\n        }\n        ch = state.src.charCodeAt(pos++);\n        if (ch >= 0x30 /* 0 */  && ch <= 0x39 /* 9 */ ) {\n            // List marker should have no more than 9 digits\n            // (prevents integer overflow in browsers)\n            if (pos - start >= 10) {\n                return -1;\n            }\n            continue;\n        }\n        // found valid marker\n        if (ch === 0x29 /* ) */  || ch === 0x2e /* . */ ) {\n            break;\n        }\n        return -1;\n    }\n    if (pos < max) {\n        ch = state.src.charCodeAt(pos);\n        if (!isSpace(ch)) {\n            // \" 1.test \" - is not a list item\n            return -1;\n        }\n    }\n    return pos;\n}\nfunction markTightParagraphs(state, idx) {\n    var i, l, level = state.level + 2;\n    for(i = idx + 2, l = state.tokens.length - 2; i < l; i++){\n        if (state.tokens[i].level === level && state.tokens[i].type === \"paragraph_open\") {\n            state.tokens[i + 2].hidden = true;\n            state.tokens[i].hidden = true;\n            i += 2;\n        }\n    }\n}\nmodule.exports = function list(state, startLine, endLine, silent) {\n    var ch, contentStart, i, indent, indentAfterMarker, initial, isOrdered, itemLines, l, listLines, listTokIdx, markerCharCode, markerValue, max, offset, oldListIndent, oldParentType, oldSCount, oldTShift, oldTight, pos, posAfterMarker, prevEmptyEnd, start, terminate, terminatorRules, token, nextLine = startLine, isTerminatingParagraph = false, tight = true;\n    // if it's indented more than 3 spaces, it should be a code block\n    if (state.sCount[nextLine] - state.blkIndent >= 4) {\n        return false;\n    }\n    // Special case:\n    //  - item 1\n    //   - item 2\n    //    - item 3\n    //     - item 4\n    //      - this one is a paragraph continuation\n    if (state.listIndent >= 0 && state.sCount[nextLine] - state.listIndent >= 4 && state.sCount[nextLine] < state.blkIndent) {\n        return false;\n    }\n    // limit conditions when list can interrupt\n    // a paragraph (validation mode only)\n    if (silent && state.parentType === \"paragraph\") {\n        // Next list item should still terminate previous list item;\n        //\n        // This code can fail if plugins use blkIndent as well as lists,\n        // but I hope the spec gets fixed long before that happens.\n        //\n        if (state.sCount[nextLine] >= state.blkIndent) {\n            isTerminatingParagraph = true;\n        }\n    }\n    // Detect list type and position after marker\n    if ((posAfterMarker = skipOrderedListMarker(state, nextLine)) >= 0) {\n        isOrdered = true;\n        start = state.bMarks[nextLine] + state.tShift[nextLine];\n        markerValue = Number(state.src.slice(start, posAfterMarker - 1));\n        // If we're starting a new ordered list right after\n        // a paragraph, it should start with 1.\n        if (isTerminatingParagraph && markerValue !== 1) return false;\n    } else if ((posAfterMarker = skipBulletListMarker(state, nextLine)) >= 0) {\n        isOrdered = false;\n    } else {\n        return false;\n    }\n    // If we're starting a new unordered list right after\n    // a paragraph, first line should not be empty.\n    if (isTerminatingParagraph) {\n        if (state.skipSpaces(posAfterMarker) >= state.eMarks[nextLine]) return false;\n    }\n    // For validation mode we can terminate immediately\n    if (silent) {\n        return true;\n    }\n    // We should terminate list on style change. Remember first one to compare.\n    markerCharCode = state.src.charCodeAt(posAfterMarker - 1);\n    // Start list\n    listTokIdx = state.tokens.length;\n    if (isOrdered) {\n        token = state.push(\"ordered_list_open\", \"ol\", 1);\n        if (markerValue !== 1) {\n            token.attrs = [\n                [\n                    \"start\",\n                    markerValue\n                ]\n            ];\n        }\n    } else {\n        token = state.push(\"bullet_list_open\", \"ul\", 1);\n    }\n    token.map = listLines = [\n        nextLine,\n        0\n    ];\n    token.markup = String.fromCharCode(markerCharCode);\n    //\n    // Iterate list items\n    //\n    prevEmptyEnd = false;\n    terminatorRules = state.md.block.ruler.getRules(\"list\");\n    oldParentType = state.parentType;\n    state.parentType = \"list\";\n    while(nextLine < endLine){\n        pos = posAfterMarker;\n        max = state.eMarks[nextLine];\n        initial = offset = state.sCount[nextLine] + posAfterMarker - (state.bMarks[nextLine] + state.tShift[nextLine]);\n        while(pos < max){\n            ch = state.src.charCodeAt(pos);\n            if (ch === 0x09) {\n                offset += 4 - (offset + state.bsCount[nextLine]) % 4;\n            } else if (ch === 0x20) {\n                offset++;\n            } else {\n                break;\n            }\n            pos++;\n        }\n        contentStart = pos;\n        if (contentStart >= max) {\n            // trimming space in \"-    \\n  3\" case, indent is 1 here\n            indentAfterMarker = 1;\n        } else {\n            indentAfterMarker = offset - initial;\n        }\n        // If we have more than 4 spaces, the indent is 1\n        // (the rest is just indented code block)\n        if (indentAfterMarker > 4) {\n            indentAfterMarker = 1;\n        }\n        // \"  -  test\"\n        //  ^^^^^ - calculating total length of this thing\n        indent = initial + indentAfterMarker;\n        // Run subparser & write tokens\n        token = state.push(\"list_item_open\", \"li\", 1);\n        token.markup = String.fromCharCode(markerCharCode);\n        token.map = itemLines = [\n            nextLine,\n            0\n        ];\n        if (isOrdered) {\n            token.info = state.src.slice(start, posAfterMarker - 1);\n        }\n        // change current state, then restore it after parser subcall\n        oldTight = state.tight;\n        oldTShift = state.tShift[nextLine];\n        oldSCount = state.sCount[nextLine];\n        //  - example list\n        // ^ listIndent position will be here\n        //   ^ blkIndent position will be here\n        //\n        oldListIndent = state.listIndent;\n        state.listIndent = state.blkIndent;\n        state.blkIndent = indent;\n        state.tight = true;\n        state.tShift[nextLine] = contentStart - state.bMarks[nextLine];\n        state.sCount[nextLine] = offset;\n        if (contentStart >= max && state.isEmpty(nextLine + 1)) {\n            // workaround for this case\n            // (list item is empty, list terminates before \"foo\"):\n            // ~~~~~~~~\n            //   -\n            //\n            //     foo\n            // ~~~~~~~~\n            state.line = Math.min(state.line + 2, endLine);\n        } else {\n            state.md.block.tokenize(state, nextLine, endLine, true);\n        }\n        // If any of list item is tight, mark list as tight\n        if (!state.tight || prevEmptyEnd) {\n            tight = false;\n        }\n        // Item become loose if finish with empty line,\n        // but we should filter last element, because it means list finish\n        prevEmptyEnd = state.line - nextLine > 1 && state.isEmpty(state.line - 1);\n        state.blkIndent = state.listIndent;\n        state.listIndent = oldListIndent;\n        state.tShift[nextLine] = oldTShift;\n        state.sCount[nextLine] = oldSCount;\n        state.tight = oldTight;\n        token = state.push(\"list_item_close\", \"li\", -1);\n        token.markup = String.fromCharCode(markerCharCode);\n        nextLine = state.line;\n        itemLines[1] = nextLine;\n        if (nextLine >= endLine) {\n            break;\n        }\n        //\n        // Try to check if list is terminated or continued.\n        //\n        if (state.sCount[nextLine] < state.blkIndent) {\n            break;\n        }\n        // if it's indented more than 3 spaces, it should be a code block\n        if (state.sCount[nextLine] - state.blkIndent >= 4) {\n            break;\n        }\n        // fail if terminating block found\n        terminate = false;\n        for(i = 0, l = terminatorRules.length; i < l; i++){\n            if (terminatorRules[i](state, nextLine, endLine, true)) {\n                terminate = true;\n                break;\n            }\n        }\n        if (terminate) {\n            break;\n        }\n        // fail if list has another type\n        if (isOrdered) {\n            posAfterMarker = skipOrderedListMarker(state, nextLine);\n            if (posAfterMarker < 0) {\n                break;\n            }\n            start = state.bMarks[nextLine] + state.tShift[nextLine];\n        } else {\n            posAfterMarker = skipBulletListMarker(state, nextLine);\n            if (posAfterMarker < 0) {\n                break;\n            }\n        }\n        if (markerCharCode !== state.src.charCodeAt(posAfterMarker - 1)) {\n            break;\n        }\n    }\n    // Finalize list\n    if (isOrdered) {\n        token = state.push(\"ordered_list_close\", \"ol\", -1);\n    } else {\n        token = state.push(\"bullet_list_close\", \"ul\", -1);\n    }\n    token.markup = String.fromCharCode(markerCharCode);\n    listLines[1] = nextLine;\n    state.line = nextLine;\n    state.parentType = oldParentType;\n    // mark paragraphs tight if needed\n    if (tight) {\n        markTightParagraphs(state, listTokIdx);\n    }\n    return true;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/markdown-it/lib/rules_block/list.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/markdown-it/lib/rules_block/paragraph.js":
/*!***************************************************************!*\
  !*** ./node_modules/markdown-it/lib/rules_block/paragraph.js ***!
  \***************************************************************/
/***/ ((module) => {

eval("// Paragraph\n\nmodule.exports = function paragraph(state, startLine, endLine) {\n    var content, terminate, i, l, token, oldParentType, nextLine = startLine + 1, terminatorRules = state.md.block.ruler.getRules(\"paragraph\");\n    oldParentType = state.parentType;\n    state.parentType = \"paragraph\";\n    // jump line-by-line until empty one or EOF\n    for(; nextLine < endLine && !state.isEmpty(nextLine); nextLine++){\n        // this would be a code block normally, but after paragraph\n        // it's considered a lazy continuation regardless of what's there\n        if (state.sCount[nextLine] - state.blkIndent > 3) {\n            continue;\n        }\n        // quirk for blockquotes, this line should already be checked by that rule\n        if (state.sCount[nextLine] < 0) {\n            continue;\n        }\n        // Some tags can terminate paragraph without empty line.\n        terminate = false;\n        for(i = 0, l = terminatorRules.length; i < l; i++){\n            if (terminatorRules[i](state, nextLine, endLine, true)) {\n                terminate = true;\n                break;\n            }\n        }\n        if (terminate) {\n            break;\n        }\n    }\n    content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();\n    state.line = nextLine;\n    token = state.push(\"paragraph_open\", \"p\", 1);\n    token.map = [\n        startLine,\n        state.line\n    ];\n    token = state.push(\"inline\", \"\", 0);\n    token.content = content;\n    token.map = [\n        startLine,\n        state.line\n    ];\n    token.children = [];\n    token = state.push(\"paragraph_close\", \"p\", -1);\n    state.parentType = oldParentType;\n    return true;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3J1bGVzX2Jsb2NrL3BhcmFncmFwaC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxZQUFZO0FBRVo7QUFHQUEsT0FBT0MsT0FBTyxHQUFHLFNBQVNDLFVBQVVDLEtBQUssRUFBRUMsU0FBUyxFQUFFQyxPQUFPO0lBQzNELElBQUlDLFNBQVNDLFdBQVdDLEdBQUdDLEdBQUdDLE9BQU9DLGVBQ2pDQyxXQUFXUixZQUFZLEdBQ3ZCUyxrQkFBa0JWLE1BQU1XLEVBQUUsQ0FBQ0MsS0FBSyxDQUFDQyxLQUFLLENBQUNDLFFBQVEsQ0FBQztJQUVwRE4sZ0JBQWdCUixNQUFNZSxVQUFVO0lBQ2hDZixNQUFNZSxVQUFVLEdBQUc7SUFFbkIsMkNBQTJDO0lBQzNDLE1BQU9OLFdBQVdQLFdBQVcsQ0FBQ0YsTUFBTWdCLE9BQU8sQ0FBQ1AsV0FBV0EsV0FBWTtRQUNqRSwyREFBMkQ7UUFDM0QsaUVBQWlFO1FBQ2pFLElBQUlULE1BQU1pQixNQUFNLENBQUNSLFNBQVMsR0FBR1QsTUFBTWtCLFNBQVMsR0FBRyxHQUFHO1lBQUU7UUFBVTtRQUU5RCwwRUFBMEU7UUFDMUUsSUFBSWxCLE1BQU1pQixNQUFNLENBQUNSLFNBQVMsR0FBRyxHQUFHO1lBQUU7UUFBVTtRQUU1Qyx3REFBd0Q7UUFDeERMLFlBQVk7UUFDWixJQUFLQyxJQUFJLEdBQUdDLElBQUlJLGdCQUFnQlMsTUFBTSxFQUFFZCxJQUFJQyxHQUFHRCxJQUFLO1lBQ2xELElBQUlLLGVBQWUsQ0FBQ0wsRUFBRSxDQUFDTCxPQUFPUyxVQUFVUCxTQUFTLE9BQU87Z0JBQ3RERSxZQUFZO2dCQUNaO1lBQ0Y7UUFDRjtRQUNBLElBQUlBLFdBQVc7WUFBRTtRQUFPO0lBQzFCO0lBRUFELFVBQVVILE1BQU1vQixRQUFRLENBQUNuQixXQUFXUSxVQUFVVCxNQUFNa0IsU0FBUyxFQUFFLE9BQU9HLElBQUk7SUFFMUVyQixNQUFNc0IsSUFBSSxHQUFHYjtJQUViRixRQUFpQlAsTUFBTXVCLElBQUksQ0FBQyxrQkFBa0IsS0FBSztJQUNuRGhCLE1BQU1pQixHQUFHLEdBQVE7UUFBRXZCO1FBQVdELE1BQU1zQixJQUFJO0tBQUU7SUFFMUNmLFFBQWlCUCxNQUFNdUIsSUFBSSxDQUFDLFVBQVUsSUFBSTtJQUMxQ2hCLE1BQU1KLE9BQU8sR0FBSUE7SUFDakJJLE1BQU1pQixHQUFHLEdBQVE7UUFBRXZCO1FBQVdELE1BQU1zQixJQUFJO0tBQUU7SUFDMUNmLE1BQU1rQixRQUFRLEdBQUcsRUFBRTtJQUVuQmxCLFFBQWlCUCxNQUFNdUIsSUFBSSxDQUFDLG1CQUFtQixLQUFLLENBQUM7SUFFckR2QixNQUFNZSxVQUFVLEdBQUdQO0lBRW5CLE9BQU87QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2cvLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3J1bGVzX2Jsb2NrL3BhcmFncmFwaC5qcz9hNzQ4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIFBhcmFncmFwaFxuXG4ndXNlIHN0cmljdCc7XG5cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwYXJhZ3JhcGgoc3RhdGUsIHN0YXJ0TGluZSwgZW5kTGluZSkge1xuICB2YXIgY29udGVudCwgdGVybWluYXRlLCBpLCBsLCB0b2tlbiwgb2xkUGFyZW50VHlwZSxcbiAgICAgIG5leHRMaW5lID0gc3RhcnRMaW5lICsgMSxcbiAgICAgIHRlcm1pbmF0b3JSdWxlcyA9IHN0YXRlLm1kLmJsb2NrLnJ1bGVyLmdldFJ1bGVzKCdwYXJhZ3JhcGgnKTtcblxuICBvbGRQYXJlbnRUeXBlID0gc3RhdGUucGFyZW50VHlwZTtcbiAgc3RhdGUucGFyZW50VHlwZSA9ICdwYXJhZ3JhcGgnO1xuXG4gIC8vIGp1bXAgbGluZS1ieS1saW5lIHVudGlsIGVtcHR5IG9uZSBvciBFT0ZcbiAgZm9yICg7IG5leHRMaW5lIDwgZW5kTGluZSAmJiAhc3RhdGUuaXNFbXB0eShuZXh0TGluZSk7IG5leHRMaW5lKyspIHtcbiAgICAvLyB0aGlzIHdvdWxkIGJlIGEgY29kZSBibG9jayBub3JtYWxseSwgYnV0IGFmdGVyIHBhcmFncmFwaFxuICAgIC8vIGl0J3MgY29uc2lkZXJlZCBhIGxhenkgY29udGludWF0aW9uIHJlZ2FyZGxlc3Mgb2Ygd2hhdCdzIHRoZXJlXG4gICAgaWYgKHN0YXRlLnNDb3VudFtuZXh0TGluZV0gLSBzdGF0ZS5ibGtJbmRlbnQgPiAzKSB7IGNvbnRpbnVlOyB9XG5cbiAgICAvLyBxdWlyayBmb3IgYmxvY2txdW90ZXMsIHRoaXMgbGluZSBzaG91bGQgYWxyZWFkeSBiZSBjaGVja2VkIGJ5IHRoYXQgcnVsZVxuICAgIGlmIChzdGF0ZS5zQ291bnRbbmV4dExpbmVdIDwgMCkgeyBjb250aW51ZTsgfVxuXG4gICAgLy8gU29tZSB0YWdzIGNhbiB0ZXJtaW5hdGUgcGFyYWdyYXBoIHdpdGhvdXQgZW1wdHkgbGluZS5cbiAgICB0ZXJtaW5hdGUgPSBmYWxzZTtcbiAgICBmb3IgKGkgPSAwLCBsID0gdGVybWluYXRvclJ1bGVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgaWYgKHRlcm1pbmF0b3JSdWxlc1tpXShzdGF0ZSwgbmV4dExpbmUsIGVuZExpbmUsIHRydWUpKSB7XG4gICAgICAgIHRlcm1pbmF0ZSA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAodGVybWluYXRlKSB7IGJyZWFrOyB9XG4gIH1cblxuICBjb250ZW50ID0gc3RhdGUuZ2V0TGluZXMoc3RhcnRMaW5lLCBuZXh0TGluZSwgc3RhdGUuYmxrSW5kZW50LCBmYWxzZSkudHJpbSgpO1xuXG4gIHN0YXRlLmxpbmUgPSBuZXh0TGluZTtcblxuICB0b2tlbiAgICAgICAgICA9IHN0YXRlLnB1c2goJ3BhcmFncmFwaF9vcGVuJywgJ3AnLCAxKTtcbiAgdG9rZW4ubWFwICAgICAgPSBbIHN0YXJ0TGluZSwgc3RhdGUubGluZSBdO1xuXG4gIHRva2VuICAgICAgICAgID0gc3RhdGUucHVzaCgnaW5saW5lJywgJycsIDApO1xuICB0b2tlbi5jb250ZW50ICA9IGNvbnRlbnQ7XG4gIHRva2VuLm1hcCAgICAgID0gWyBzdGFydExpbmUsIHN0YXRlLmxpbmUgXTtcbiAgdG9rZW4uY2hpbGRyZW4gPSBbXTtcblxuICB0b2tlbiAgICAgICAgICA9IHN0YXRlLnB1c2goJ3BhcmFncmFwaF9jbG9zZScsICdwJywgLTEpO1xuXG4gIHN0YXRlLnBhcmVudFR5cGUgPSBvbGRQYXJlbnRUeXBlO1xuXG4gIHJldHVybiB0cnVlO1xufTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwicGFyYWdyYXBoIiwic3RhdGUiLCJzdGFydExpbmUiLCJlbmRMaW5lIiwiY29udGVudCIsInRlcm1pbmF0ZSIsImkiLCJsIiwidG9rZW4iLCJvbGRQYXJlbnRUeXBlIiwibmV4dExpbmUiLCJ0ZXJtaW5hdG9yUnVsZXMiLCJtZCIsImJsb2NrIiwicnVsZXIiLCJnZXRSdWxlcyIsInBhcmVudFR5cGUiLCJpc0VtcHR5Iiwic0NvdW50IiwiYmxrSW5kZW50IiwibGVuZ3RoIiwiZ2V0TGluZXMiLCJ0cmltIiwibGluZSIsInB1c2giLCJtYXAiLCJjaGlsZHJlbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/markdown-it/lib/rules_block/paragraph.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/markdown-it/lib/rules_block/reference.js":
/*!***************************************************************!*\
  !*** ./node_modules/markdown-it/lib/rules_block/reference.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar normalizeReference = (__webpack_require__(/*! ../common/utils */ \"(rsc)/./node_modules/markdown-it/lib/common/utils.js\").normalizeReference);\nvar isSpace = (__webpack_require__(/*! ../common/utils */ \"(rsc)/./node_modules/markdown-it/lib/common/utils.js\").isSpace);\nmodule.exports = function reference(state, startLine, _endLine, silent) {\n    var ch, destEndPos, destEndLineNo, endLine, href, i, l, label, labelEnd, oldParentType, res, start, str, terminate, terminatorRules, title, lines = 0, pos = state.bMarks[startLine] + state.tShift[startLine], max = state.eMarks[startLine], nextLine = startLine + 1;\n    // if it's indented more than 3 spaces, it should be a code block\n    if (state.sCount[startLine] - state.blkIndent >= 4) {\n        return false;\n    }\n    if (state.src.charCodeAt(pos) !== 0x5B /* [ */ ) {\n        return false;\n    }\n    // Simple check to quickly interrupt scan on [link](url) at the start of line.\n    // Can be useful on practice: https://github.com/markdown-it/markdown-it/issues/54\n    while(++pos < max){\n        if (state.src.charCodeAt(pos) === 0x5D /* ] */  && state.src.charCodeAt(pos - 1) !== 0x5C /* \\ */ ) {\n            if (pos + 1 === max) {\n                return false;\n            }\n            if (state.src.charCodeAt(pos + 1) !== 0x3A /* : */ ) {\n                return false;\n            }\n            break;\n        }\n    }\n    endLine = state.lineMax;\n    // jump line-by-line until empty one or EOF\n    terminatorRules = state.md.block.ruler.getRules(\"reference\");\n    oldParentType = state.parentType;\n    state.parentType = \"reference\";\n    for(; nextLine < endLine && !state.isEmpty(nextLine); nextLine++){\n        // this would be a code block normally, but after paragraph\n        // it's considered a lazy continuation regardless of what's there\n        if (state.sCount[nextLine] - state.blkIndent > 3) {\n            continue;\n        }\n        // quirk for blockquotes, this line should already be checked by that rule\n        if (state.sCount[nextLine] < 0) {\n            continue;\n        }\n        // Some tags can terminate paragraph without empty line.\n        terminate = false;\n        for(i = 0, l = terminatorRules.length; i < l; i++){\n            if (terminatorRules[i](state, nextLine, endLine, true)) {\n                terminate = true;\n                break;\n            }\n        }\n        if (terminate) {\n            break;\n        }\n    }\n    str = state.getLines(startLine, nextLine, state.blkIndent, false).trim();\n    max = str.length;\n    for(pos = 1; pos < max; pos++){\n        ch = str.charCodeAt(pos);\n        if (ch === 0x5B /* [ */ ) {\n            return false;\n        } else if (ch === 0x5D /* ] */ ) {\n            labelEnd = pos;\n            break;\n        } else if (ch === 0x0A /* \\n */ ) {\n            lines++;\n        } else if (ch === 0x5C /* \\ */ ) {\n            pos++;\n            if (pos < max && str.charCodeAt(pos) === 0x0A) {\n                lines++;\n            }\n        }\n    }\n    if (labelEnd < 0 || str.charCodeAt(labelEnd + 1) !== 0x3A /* : */ ) {\n        return false;\n    }\n    // [label]:   destination   'title'\n    //         ^^^ skip optional whitespace here\n    for(pos = labelEnd + 2; pos < max; pos++){\n        ch = str.charCodeAt(pos);\n        if (ch === 0x0A) {\n            lines++;\n        } else if (isSpace(ch)) {\n        /*eslint no-empty:0*/ } else {\n            break;\n        }\n    }\n    // [label]:   destination   'title'\n    //            ^^^^^^^^^^^ parse this\n    res = state.md.helpers.parseLinkDestination(str, pos, max);\n    if (!res.ok) {\n        return false;\n    }\n    href = state.md.normalizeLink(res.str);\n    if (!state.md.validateLink(href)) {\n        return false;\n    }\n    pos = res.pos;\n    lines += res.lines;\n    // save cursor state, we could require to rollback later\n    destEndPos = pos;\n    destEndLineNo = lines;\n    // [label]:   destination   'title'\n    //                       ^^^ skipping those spaces\n    start = pos;\n    for(; pos < max; pos++){\n        ch = str.charCodeAt(pos);\n        if (ch === 0x0A) {\n            lines++;\n        } else if (isSpace(ch)) {\n        /*eslint no-empty:0*/ } else {\n            break;\n        }\n    }\n    // [label]:   destination   'title'\n    //                          ^^^^^^^ parse this\n    res = state.md.helpers.parseLinkTitle(str, pos, max);\n    if (pos < max && start !== pos && res.ok) {\n        title = res.str;\n        pos = res.pos;\n        lines += res.lines;\n    } else {\n        title = \"\";\n        pos = destEndPos;\n        lines = destEndLineNo;\n    }\n    // skip trailing spaces until the rest of the line\n    while(pos < max){\n        ch = str.charCodeAt(pos);\n        if (!isSpace(ch)) {\n            break;\n        }\n        pos++;\n    }\n    if (pos < max && str.charCodeAt(pos) !== 0x0A) {\n        if (title) {\n            // garbage at the end of the line after title,\n            // but it could still be a valid reference if we roll back\n            title = \"\";\n            pos = destEndPos;\n            lines = destEndLineNo;\n            while(pos < max){\n                ch = str.charCodeAt(pos);\n                if (!isSpace(ch)) {\n                    break;\n                }\n                pos++;\n            }\n        }\n    }\n    if (pos < max && str.charCodeAt(pos) !== 0x0A) {\n        // garbage at the end of the line\n        return false;\n    }\n    label = normalizeReference(str.slice(1, labelEnd));\n    if (!label) {\n        // CommonMark 0.20 disallows empty labels\n        return false;\n    }\n    // Reference can not terminate anything. This check is for safety only.\n    /*istanbul ignore if*/ if (silent) {\n        return true;\n    }\n    if (typeof state.env.references === \"undefined\") {\n        state.env.references = {};\n    }\n    if (typeof state.env.references[label] === \"undefined\") {\n        state.env.references[label] = {\n            title: title,\n            href: href\n        };\n    }\n    state.parentType = oldParentType;\n    state.line = startLine + lines + 1;\n    return true;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/markdown-it/lib/rules_block/reference.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/markdown-it/lib/rules_block/state_block.js":
/*!*****************************************************************!*\
  !*** ./node_modules/markdown-it/lib/rules_block/state_block.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Parser state class\n\nvar Token = __webpack_require__(/*! ../token */ \"(rsc)/./node_modules/markdown-it/lib/token.js\");\nvar isSpace = (__webpack_require__(/*! ../common/utils */ \"(rsc)/./node_modules/markdown-it/lib/common/utils.js\").isSpace);\nfunction StateBlock(src, md, env, tokens) {\n    var ch, s, start, pos, len, indent, offset, indent_found;\n    this.src = src;\n    // link to parser instance\n    this.md = md;\n    this.env = env;\n    //\n    // Internal state vartiables\n    //\n    this.tokens = tokens;\n    this.bMarks = []; // line begin offsets for fast jumps\n    this.eMarks = []; // line end offsets for fast jumps\n    this.tShift = []; // offsets of the first non-space characters (tabs not expanded)\n    this.sCount = []; // indents for each line (tabs expanded)\n    // An amount of virtual spaces (tabs expanded) between beginning\n    // of each line (bMarks) and real beginning of that line.\n    //\n    // It exists only as a hack because blockquotes override bMarks\n    // losing information in the process.\n    //\n    // It's used only when expanding tabs, you can think about it as\n    // an initial tab length, e.g. bsCount=21 applied to string `\\t123`\n    // means first tab should be expanded to 4-21%4 === 3 spaces.\n    //\n    this.bsCount = [];\n    // block parser variables\n    this.blkIndent = 0; // required block content indent (for example, if we are\n    // inside a list, it would be positioned after list marker)\n    this.line = 0; // line index in src\n    this.lineMax = 0; // lines count\n    this.tight = false; // loose/tight mode for lists\n    this.ddIndent = -1; // indent of the current dd block (-1 if there isn't any)\n    this.listIndent = -1; // indent of the current list block (-1 if there isn't any)\n    // can be 'blockquote', 'list', 'root', 'paragraph' or 'reference'\n    // used in lists to determine if they interrupt a paragraph\n    this.parentType = \"root\";\n    this.level = 0;\n    // renderer\n    this.result = \"\";\n    // Create caches\n    // Generate markers.\n    s = this.src;\n    indent_found = false;\n    for(start = pos = indent = offset = 0, len = s.length; pos < len; pos++){\n        ch = s.charCodeAt(pos);\n        if (!indent_found) {\n            if (isSpace(ch)) {\n                indent++;\n                if (ch === 0x09) {\n                    offset += 4 - offset % 4;\n                } else {\n                    offset++;\n                }\n                continue;\n            } else {\n                indent_found = true;\n            }\n        }\n        if (ch === 0x0A || pos === len - 1) {\n            if (ch !== 0x0A) {\n                pos++;\n            }\n            this.bMarks.push(start);\n            this.eMarks.push(pos);\n            this.tShift.push(indent);\n            this.sCount.push(offset);\n            this.bsCount.push(0);\n            indent_found = false;\n            indent = 0;\n            offset = 0;\n            start = pos + 1;\n        }\n    }\n    // Push fake entry to simplify cache bounds checks\n    this.bMarks.push(s.length);\n    this.eMarks.push(s.length);\n    this.tShift.push(0);\n    this.sCount.push(0);\n    this.bsCount.push(0);\n    this.lineMax = this.bMarks.length - 1; // don't count last fake line\n}\n// Push new token to \"stream\".\n//\nStateBlock.prototype.push = function(type, tag, nesting) {\n    var token = new Token(type, tag, nesting);\n    token.block = true;\n    if (nesting < 0) this.level--; // closing tag\n    token.level = this.level;\n    if (nesting > 0) this.level++; // opening tag\n    this.tokens.push(token);\n    return token;\n};\nStateBlock.prototype.isEmpty = function isEmpty(line) {\n    return this.bMarks[line] + this.tShift[line] >= this.eMarks[line];\n};\nStateBlock.prototype.skipEmptyLines = function skipEmptyLines(from) {\n    for(var max = this.lineMax; from < max; from++){\n        if (this.bMarks[from] + this.tShift[from] < this.eMarks[from]) {\n            break;\n        }\n    }\n    return from;\n};\n// Skip spaces from given position.\nStateBlock.prototype.skipSpaces = function skipSpaces(pos) {\n    var ch;\n    for(var max = this.src.length; pos < max; pos++){\n        ch = this.src.charCodeAt(pos);\n        if (!isSpace(ch)) {\n            break;\n        }\n    }\n    return pos;\n};\n// Skip spaces from given position in reverse.\nStateBlock.prototype.skipSpacesBack = function skipSpacesBack(pos, min) {\n    if (pos <= min) {\n        return pos;\n    }\n    while(pos > min){\n        if (!isSpace(this.src.charCodeAt(--pos))) {\n            return pos + 1;\n        }\n    }\n    return pos;\n};\n// Skip char codes from given position\nStateBlock.prototype.skipChars = function skipChars(pos, code) {\n    for(var max = this.src.length; pos < max; pos++){\n        if (this.src.charCodeAt(pos) !== code) {\n            break;\n        }\n    }\n    return pos;\n};\n// Skip char codes reverse from given position - 1\nStateBlock.prototype.skipCharsBack = function skipCharsBack(pos, code, min) {\n    if (pos <= min) {\n        return pos;\n    }\n    while(pos > min){\n        if (code !== this.src.charCodeAt(--pos)) {\n            return pos + 1;\n        }\n    }\n    return pos;\n};\n// cut lines range from source.\nStateBlock.prototype.getLines = function getLines(begin, end, indent, keepLastLF) {\n    var i, lineIndent, ch, first, last, queue, lineStart, line = begin;\n    if (begin >= end) {\n        return \"\";\n    }\n    queue = new Array(end - begin);\n    for(i = 0; line < end; line++, i++){\n        lineIndent = 0;\n        lineStart = first = this.bMarks[line];\n        if (line + 1 < end || keepLastLF) {\n            // No need for bounds check because we have fake entry on tail.\n            last = this.eMarks[line] + 1;\n        } else {\n            last = this.eMarks[line];\n        }\n        while(first < last && lineIndent < indent){\n            ch = this.src.charCodeAt(first);\n            if (isSpace(ch)) {\n                if (ch === 0x09) {\n                    lineIndent += 4 - (lineIndent + this.bsCount[line]) % 4;\n                } else {\n                    lineIndent++;\n                }\n            } else if (first - lineStart < this.tShift[line]) {\n                // patched tShift masked characters to look like spaces (blockquotes, list markers)\n                lineIndent++;\n            } else {\n                break;\n            }\n            first++;\n        }\n        if (lineIndent > indent) {\n            // partially expanding tabs in code blocks, e.g '\\t\\tfoobar'\n            // with indent=2 becomes '  \\tfoobar'\n            queue[i] = new Array(lineIndent - indent + 1).join(\" \") + this.src.slice(first, last);\n        } else {\n            queue[i] = this.src.slice(first, last);\n        }\n    }\n    return queue.join(\"\");\n};\n// re-export Token class to use in block rules\nStateBlock.prototype.Token = Token;\nmodule.exports = StateBlock;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/markdown-it/lib/rules_block/state_block.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/markdown-it/lib/rules_block/table.js":
/*!***********************************************************!*\
  !*** ./node_modules/markdown-it/lib/rules_block/table.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// GFM table, https://github.github.com/gfm/#tables-extension-\n\nvar isSpace = (__webpack_require__(/*! ../common/utils */ \"(rsc)/./node_modules/markdown-it/lib/common/utils.js\").isSpace);\nfunction getLine(state, line) {\n    var pos = state.bMarks[line] + state.tShift[line], max = state.eMarks[line];\n    return state.src.slice(pos, max);\n}\nfunction escapedSplit(str) {\n    var result = [], pos = 0, max = str.length, ch, isEscaped = false, lastPos = 0, current = \"\";\n    ch = str.charCodeAt(pos);\n    while(pos < max){\n        if (ch === 0x7c /* | */ ) {\n            if (!isEscaped) {\n                // pipe separating cells, '|'\n                result.push(current + str.substring(lastPos, pos));\n                current = \"\";\n                lastPos = pos + 1;\n            } else {\n                // escaped pipe, '\\|'\n                current += str.substring(lastPos, pos - 1);\n                lastPos = pos;\n            }\n        }\n        isEscaped = ch === 0x5c /* \\ */ ;\n        pos++;\n        ch = str.charCodeAt(pos);\n    }\n    result.push(current + str.substring(lastPos));\n    return result;\n}\nmodule.exports = function table(state, startLine, endLine, silent) {\n    var ch, lineText, pos, i, l, nextLine, columns, columnCount, token, aligns, t, tableLines, tbodyLines, oldParentType, terminate, terminatorRules, firstCh, secondCh;\n    // should have at least two lines\n    if (startLine + 2 > endLine) {\n        return false;\n    }\n    nextLine = startLine + 1;\n    if (state.sCount[nextLine] < state.blkIndent) {\n        return false;\n    }\n    // if it's indented more than 3 spaces, it should be a code block\n    if (state.sCount[nextLine] - state.blkIndent >= 4) {\n        return false;\n    }\n    // first character of the second line should be '|', '-', ':',\n    // and no other characters are allowed but spaces;\n    // basically, this is the equivalent of /^[-:|][-:|\\s]*$/ regexp\n    pos = state.bMarks[nextLine] + state.tShift[nextLine];\n    if (pos >= state.eMarks[nextLine]) {\n        return false;\n    }\n    firstCh = state.src.charCodeAt(pos++);\n    if (firstCh !== 0x7C /* | */  && firstCh !== 0x2D /* - */  && firstCh !== 0x3A /* : */ ) {\n        return false;\n    }\n    if (pos >= state.eMarks[nextLine]) {\n        return false;\n    }\n    secondCh = state.src.charCodeAt(pos++);\n    if (secondCh !== 0x7C /* | */  && secondCh !== 0x2D /* - */  && secondCh !== 0x3A /* : */  && !isSpace(secondCh)) {\n        return false;\n    }\n    // if first character is '-', then second character must not be a space\n    // (due to parsing ambiguity with list)\n    if (firstCh === 0x2D /* - */  && isSpace(secondCh)) {\n        return false;\n    }\n    while(pos < state.eMarks[nextLine]){\n        ch = state.src.charCodeAt(pos);\n        if (ch !== 0x7C /* | */  && ch !== 0x2D /* - */  && ch !== 0x3A /* : */  && !isSpace(ch)) {\n            return false;\n        }\n        pos++;\n    }\n    lineText = getLine(state, startLine + 1);\n    columns = lineText.split(\"|\");\n    aligns = [];\n    for(i = 0; i < columns.length; i++){\n        t = columns[i].trim();\n        if (!t) {\n            // allow empty columns before and after table, but not in between columns;\n            // e.g. allow ` |---| `, disallow ` ---||--- `\n            if (i === 0 || i === columns.length - 1) {\n                continue;\n            } else {\n                return false;\n            }\n        }\n        if (!/^:?-+:?$/.test(t)) {\n            return false;\n        }\n        if (t.charCodeAt(t.length - 1) === 0x3A /* : */ ) {\n            aligns.push(t.charCodeAt(0) === 0x3A /* : */  ? \"center\" : \"right\");\n        } else if (t.charCodeAt(0) === 0x3A /* : */ ) {\n            aligns.push(\"left\");\n        } else {\n            aligns.push(\"\");\n        }\n    }\n    lineText = getLine(state, startLine).trim();\n    if (lineText.indexOf(\"|\") === -1) {\n        return false;\n    }\n    if (state.sCount[startLine] - state.blkIndent >= 4) {\n        return false;\n    }\n    columns = escapedSplit(lineText);\n    if (columns.length && columns[0] === \"\") columns.shift();\n    if (columns.length && columns[columns.length - 1] === \"\") columns.pop();\n    // header row will define an amount of columns in the entire table,\n    // and align row should be exactly the same (the rest of the rows can differ)\n    columnCount = columns.length;\n    if (columnCount === 0 || columnCount !== aligns.length) {\n        return false;\n    }\n    if (silent) {\n        return true;\n    }\n    oldParentType = state.parentType;\n    state.parentType = \"table\";\n    // use 'blockquote' lists for termination because it's\n    // the most similar to tables\n    terminatorRules = state.md.block.ruler.getRules(\"blockquote\");\n    token = state.push(\"table_open\", \"table\", 1);\n    token.map = tableLines = [\n        startLine,\n        0\n    ];\n    token = state.push(\"thead_open\", \"thead\", 1);\n    token.map = [\n        startLine,\n        startLine + 1\n    ];\n    token = state.push(\"tr_open\", \"tr\", 1);\n    token.map = [\n        startLine,\n        startLine + 1\n    ];\n    for(i = 0; i < columns.length; i++){\n        token = state.push(\"th_open\", \"th\", 1);\n        if (aligns[i]) {\n            token.attrs = [\n                [\n                    \"style\",\n                    \"text-align:\" + aligns[i]\n                ]\n            ];\n        }\n        token = state.push(\"inline\", \"\", 0);\n        token.content = columns[i].trim();\n        token.children = [];\n        token = state.push(\"th_close\", \"th\", -1);\n    }\n    token = state.push(\"tr_close\", \"tr\", -1);\n    token = state.push(\"thead_close\", \"thead\", -1);\n    for(nextLine = startLine + 2; nextLine < endLine; nextLine++){\n        if (state.sCount[nextLine] < state.blkIndent) {\n            break;\n        }\n        terminate = false;\n        for(i = 0, l = terminatorRules.length; i < l; i++){\n            if (terminatorRules[i](state, nextLine, endLine, true)) {\n                terminate = true;\n                break;\n            }\n        }\n        if (terminate) {\n            break;\n        }\n        lineText = getLine(state, nextLine).trim();\n        if (!lineText) {\n            break;\n        }\n        if (state.sCount[nextLine] - state.blkIndent >= 4) {\n            break;\n        }\n        columns = escapedSplit(lineText);\n        if (columns.length && columns[0] === \"\") columns.shift();\n        if (columns.length && columns[columns.length - 1] === \"\") columns.pop();\n        if (nextLine === startLine + 2) {\n            token = state.push(\"tbody_open\", \"tbody\", 1);\n            token.map = tbodyLines = [\n                startLine + 2,\n                0\n            ];\n        }\n        token = state.push(\"tr_open\", \"tr\", 1);\n        token.map = [\n            nextLine,\n            nextLine + 1\n        ];\n        for(i = 0; i < columnCount; i++){\n            token = state.push(\"td_open\", \"td\", 1);\n            if (aligns[i]) {\n                token.attrs = [\n                    [\n                        \"style\",\n                        \"text-align:\" + aligns[i]\n                    ]\n                ];\n            }\n            token = state.push(\"inline\", \"\", 0);\n            token.content = columns[i] ? columns[i].trim() : \"\";\n            token.children = [];\n            token = state.push(\"td_close\", \"td\", -1);\n        }\n        token = state.push(\"tr_close\", \"tr\", -1);\n    }\n    if (tbodyLines) {\n        token = state.push(\"tbody_close\", \"tbody\", -1);\n        tbodyLines[1] = nextLine;\n    }\n    token = state.push(\"table_close\", \"table\", -1);\n    tableLines[1] = nextLine;\n    state.parentType = oldParentType;\n    state.line = nextLine;\n    return true;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/markdown-it/lib/rules_block/table.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/markdown-it/lib/rules_core/block.js":
/*!**********************************************************!*\
  !*** ./node_modules/markdown-it/lib/rules_core/block.js ***!
  \**********************************************************/
/***/ ((module) => {

eval("\nmodule.exports = function block(state) {\n    var token;\n    if (state.inlineMode) {\n        token = new state.Token(\"inline\", \"\", 0);\n        token.content = state.src;\n        token.map = [\n            0,\n            1\n        ];\n        token.children = [];\n        state.tokens.push(token);\n    } else {\n        state.md.block.parse(state.src, state.md, state.env, state.tokens);\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3J1bGVzX2NvcmUvYmxvY2suanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFHQUEsT0FBT0MsT0FBTyxHQUFHLFNBQVNDLE1BQU1DLEtBQUs7SUFDbkMsSUFBSUM7SUFFSixJQUFJRCxNQUFNRSxVQUFVLEVBQUU7UUFDcEJELFFBQWlCLElBQUlELE1BQU1HLEtBQUssQ0FBQyxVQUFVLElBQUk7UUFDL0NGLE1BQU1HLE9BQU8sR0FBSUosTUFBTUssR0FBRztRQUMxQkosTUFBTUssR0FBRyxHQUFRO1lBQUU7WUFBRztTQUFHO1FBQ3pCTCxNQUFNTSxRQUFRLEdBQUcsRUFBRTtRQUNuQlAsTUFBTVEsTUFBTSxDQUFDQyxJQUFJLENBQUNSO0lBQ3BCLE9BQU87UUFDTEQsTUFBTVUsRUFBRSxDQUFDWCxLQUFLLENBQUNZLEtBQUssQ0FBQ1gsTUFBTUssR0FBRyxFQUFFTCxNQUFNVSxFQUFFLEVBQUVWLE1BQU1ZLEdBQUcsRUFBRVosTUFBTVEsTUFBTTtJQUNuRTtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvZy8uL25vZGVfbW9kdWxlcy9tYXJrZG93bi1pdC9saWIvcnVsZXNfY29yZS9ibG9jay5qcz8xODk4Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJsb2NrKHN0YXRlKSB7XG4gIHZhciB0b2tlbjtcblxuICBpZiAoc3RhdGUuaW5saW5lTW9kZSkge1xuICAgIHRva2VuICAgICAgICAgID0gbmV3IHN0YXRlLlRva2VuKCdpbmxpbmUnLCAnJywgMCk7XG4gICAgdG9rZW4uY29udGVudCAgPSBzdGF0ZS5zcmM7XG4gICAgdG9rZW4ubWFwICAgICAgPSBbIDAsIDEgXTtcbiAgICB0b2tlbi5jaGlsZHJlbiA9IFtdO1xuICAgIHN0YXRlLnRva2Vucy5wdXNoKHRva2VuKTtcbiAgfSBlbHNlIHtcbiAgICBzdGF0ZS5tZC5ibG9jay5wYXJzZShzdGF0ZS5zcmMsIHN0YXRlLm1kLCBzdGF0ZS5lbnYsIHN0YXRlLnRva2Vucyk7XG4gIH1cbn07XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImJsb2NrIiwic3RhdGUiLCJ0b2tlbiIsImlubGluZU1vZGUiLCJUb2tlbiIsImNvbnRlbnQiLCJzcmMiLCJtYXAiLCJjaGlsZHJlbiIsInRva2VucyIsInB1c2giLCJtZCIsInBhcnNlIiwiZW52Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/markdown-it/lib/rules_core/block.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/markdown-it/lib/rules_core/inline.js":
/*!***********************************************************!*\
  !*** ./node_modules/markdown-it/lib/rules_core/inline.js ***!
  \***********************************************************/
/***/ ((module) => {

eval("\nmodule.exports = function inline(state) {\n    var tokens = state.tokens, tok, i, l;\n    // Parse inlines\n    for(i = 0, l = tokens.length; i < l; i++){\n        tok = tokens[i];\n        if (tok.type === \"inline\") {\n            state.md.inline.parse(tok.content, state.md, state.env, tok.children);\n        }\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3J1bGVzX2NvcmUvaW5saW5lLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUFBLE9BQU9DLE9BQU8sR0FBRyxTQUFTQyxPQUFPQyxLQUFLO0lBQ3BDLElBQUlDLFNBQVNELE1BQU1DLE1BQU0sRUFBRUMsS0FBS0MsR0FBR0M7SUFFbkMsZ0JBQWdCO0lBQ2hCLElBQUtELElBQUksR0FBR0MsSUFBSUgsT0FBT0ksTUFBTSxFQUFFRixJQUFJQyxHQUFHRCxJQUFLO1FBQ3pDRCxNQUFNRCxNQUFNLENBQUNFLEVBQUU7UUFDZixJQUFJRCxJQUFJSSxJQUFJLEtBQUssVUFBVTtZQUN6Qk4sTUFBTU8sRUFBRSxDQUFDUixNQUFNLENBQUNTLEtBQUssQ0FBQ04sSUFBSU8sT0FBTyxFQUFFVCxNQUFNTyxFQUFFLEVBQUVQLE1BQU1VLEdBQUcsRUFBRVIsSUFBSVMsUUFBUTtRQUN0RTtJQUNGO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9nLy4vbm9kZV9tb2R1bGVzL21hcmtkb3duLWl0L2xpYi9ydWxlc19jb3JlL2lubGluZS5qcz85MzE4Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmxpbmUoc3RhdGUpIHtcbiAgdmFyIHRva2VucyA9IHN0YXRlLnRva2VucywgdG9rLCBpLCBsO1xuXG4gIC8vIFBhcnNlIGlubGluZXNcbiAgZm9yIChpID0gMCwgbCA9IHRva2Vucy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICB0b2sgPSB0b2tlbnNbaV07XG4gICAgaWYgKHRvay50eXBlID09PSAnaW5saW5lJykge1xuICAgICAgc3RhdGUubWQuaW5saW5lLnBhcnNlKHRvay5jb250ZW50LCBzdGF0ZS5tZCwgc3RhdGUuZW52LCB0b2suY2hpbGRyZW4pO1xuICAgIH1cbiAgfVxufTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiaW5saW5lIiwic3RhdGUiLCJ0b2tlbnMiLCJ0b2siLCJpIiwibCIsImxlbmd0aCIsInR5cGUiLCJtZCIsInBhcnNlIiwiY29udGVudCIsImVudiIsImNoaWxkcmVuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/markdown-it/lib/rules_core/inline.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/markdown-it/lib/rules_core/linkify.js":
/*!************************************************************!*\
  !*** ./node_modules/markdown-it/lib/rules_core/linkify.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Replace link-like texts with link nodes.\n//\n// Currently restricted by `md.validateLink()` to http/https/ftp\n//\n\nvar arrayReplaceAt = (__webpack_require__(/*! ../common/utils */ \"(rsc)/./node_modules/markdown-it/lib/common/utils.js\").arrayReplaceAt);\nfunction isLinkOpen(str) {\n    return /^<a[>\\s]/i.test(str);\n}\nfunction isLinkClose(str) {\n    return /^<\\/a\\s*>/i.test(str);\n}\nmodule.exports = function linkify(state) {\n    var i, j, l, tokens, token, currentToken, nodes, ln, text, pos, lastPos, level, htmlLinkLevel, url, fullUrl, urlText, blockTokens = state.tokens, links;\n    if (!state.md.options.linkify) {\n        return;\n    }\n    for(j = 0, l = blockTokens.length; j < l; j++){\n        if (blockTokens[j].type !== \"inline\" || !state.md.linkify.pretest(blockTokens[j].content)) {\n            continue;\n        }\n        tokens = blockTokens[j].children;\n        htmlLinkLevel = 0;\n        // We scan from the end, to keep position when new tags added.\n        // Use reversed logic in links start/end match\n        for(i = tokens.length - 1; i >= 0; i--){\n            currentToken = tokens[i];\n            // Skip content of markdown links\n            if (currentToken.type === \"link_close\") {\n                i--;\n                while(tokens[i].level !== currentToken.level && tokens[i].type !== \"link_open\"){\n                    i--;\n                }\n                continue;\n            }\n            // Skip content of html tag links\n            if (currentToken.type === \"html_inline\") {\n                if (isLinkOpen(currentToken.content) && htmlLinkLevel > 0) {\n                    htmlLinkLevel--;\n                }\n                if (isLinkClose(currentToken.content)) {\n                    htmlLinkLevel++;\n                }\n            }\n            if (htmlLinkLevel > 0) {\n                continue;\n            }\n            if (currentToken.type === \"text\" && state.md.linkify.test(currentToken.content)) {\n                text = currentToken.content;\n                links = state.md.linkify.match(text);\n                // Now split string to nodes\n                nodes = [];\n                level = currentToken.level;\n                lastPos = 0;\n                // forbid escape sequence at the start of the string,\n                // this avoids http\\://example.com/ from being linkified as\n                // http:<a href=\"//example.com/\">//example.com/</a>\n                if (links.length > 0 && links[0].index === 0 && i > 0 && tokens[i - 1].type === \"text_special\") {\n                    links = links.slice(1);\n                }\n                for(ln = 0; ln < links.length; ln++){\n                    url = links[ln].url;\n                    fullUrl = state.md.normalizeLink(url);\n                    if (!state.md.validateLink(fullUrl)) {\n                        continue;\n                    }\n                    urlText = links[ln].text;\n                    // Linkifier might send raw hostnames like \"example.com\", where url\n                    // starts with domain name. So we prepend http:// in those cases,\n                    // and remove it afterwards.\n                    //\n                    if (!links[ln].schema) {\n                        urlText = state.md.normalizeLinkText(\"http://\" + urlText).replace(/^http:\\/\\//, \"\");\n                    } else if (links[ln].schema === \"mailto:\" && !/^mailto:/i.test(urlText)) {\n                        urlText = state.md.normalizeLinkText(\"mailto:\" + urlText).replace(/^mailto:/, \"\");\n                    } else {\n                        urlText = state.md.normalizeLinkText(urlText);\n                    }\n                    pos = links[ln].index;\n                    if (pos > lastPos) {\n                        token = new state.Token(\"text\", \"\", 0);\n                        token.content = text.slice(lastPos, pos);\n                        token.level = level;\n                        nodes.push(token);\n                    }\n                    token = new state.Token(\"link_open\", \"a\", 1);\n                    token.attrs = [\n                        [\n                            \"href\",\n                            fullUrl\n                        ]\n                    ];\n                    token.level = level++;\n                    token.markup = \"linkify\";\n                    token.info = \"auto\";\n                    nodes.push(token);\n                    token = new state.Token(\"text\", \"\", 0);\n                    token.content = urlText;\n                    token.level = level;\n                    nodes.push(token);\n                    token = new state.Token(\"link_close\", \"a\", -1);\n                    token.level = --level;\n                    token.markup = \"linkify\";\n                    token.info = \"auto\";\n                    nodes.push(token);\n                    lastPos = links[ln].lastIndex;\n                }\n                if (lastPos < text.length) {\n                    token = new state.Token(\"text\", \"\", 0);\n                    token.content = text.slice(lastPos);\n                    token.level = level;\n                    nodes.push(token);\n                }\n                // replace current node\n                blockTokens[j].children = tokens = arrayReplaceAt(tokens, i, nodes);\n            }\n        }\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/markdown-it/lib/rules_core/linkify.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/markdown-it/lib/rules_core/normalize.js":
/*!**************************************************************!*\
  !*** ./node_modules/markdown-it/lib/rules_core/normalize.js ***!
  \**************************************************************/
/***/ ((module) => {

eval("// Normalize input string\n\n// https://spec.commonmark.org/0.29/#line-ending\nvar NEWLINES_RE = /\\r\\n?|\\n/g;\nvar NULL_RE = /\\0/g;\nmodule.exports = function normalize(state) {\n    var str;\n    // Normalize newlines\n    str = state.src.replace(NEWLINES_RE, \"\\n\");\n    // Replace NULL characters\n    str = str.replace(NULL_RE, \"�\");\n    state.src = str;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3J1bGVzX2NvcmUvbm9ybWFsaXplLmpzIiwibWFwcGluZ3MiOiJBQUFBLHlCQUF5QjtBQUV6QjtBQUdBLGdEQUFnRDtBQUNoRCxJQUFJQSxjQUFlO0FBQ25CLElBQUlDLFVBQWU7QUFHbkJDLE9BQU9DLE9BQU8sR0FBRyxTQUFTQyxVQUFVQyxLQUFLO0lBQ3ZDLElBQUlDO0lBRUoscUJBQXFCO0lBQ3JCQSxNQUFNRCxNQUFNRSxHQUFHLENBQUNDLE9BQU8sQ0FBQ1IsYUFBYTtJQUVyQywwQkFBMEI7SUFDMUJNLE1BQU1BLElBQUlFLE9BQU8sQ0FBQ1AsU0FBUztJQUUzQkksTUFBTUUsR0FBRyxHQUFHRDtBQUNkIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvZy8uL25vZGVfbW9kdWxlcy9tYXJrZG93bi1pdC9saWIvcnVsZXNfY29yZS9ub3JtYWxpemUuanM/ZjBiYSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBOb3JtYWxpemUgaW5wdXQgc3RyaW5nXG5cbid1c2Ugc3RyaWN0JztcblxuXG4vLyBodHRwczovL3NwZWMuY29tbW9ubWFyay5vcmcvMC4yOS8jbGluZS1lbmRpbmdcbnZhciBORVdMSU5FU19SRSAgPSAvXFxyXFxuP3xcXG4vZztcbnZhciBOVUxMX1JFICAgICAgPSAvXFwwL2c7XG5cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBub3JtYWxpemUoc3RhdGUpIHtcbiAgdmFyIHN0cjtcblxuICAvLyBOb3JtYWxpemUgbmV3bGluZXNcbiAgc3RyID0gc3RhdGUuc3JjLnJlcGxhY2UoTkVXTElORVNfUkUsICdcXG4nKTtcblxuICAvLyBSZXBsYWNlIE5VTEwgY2hhcmFjdGVyc1xuICBzdHIgPSBzdHIucmVwbGFjZShOVUxMX1JFLCAnXFx1RkZGRCcpO1xuXG4gIHN0YXRlLnNyYyA9IHN0cjtcbn07XG4iXSwibmFtZXMiOlsiTkVXTElORVNfUkUiLCJOVUxMX1JFIiwibW9kdWxlIiwiZXhwb3J0cyIsIm5vcm1hbGl6ZSIsInN0YXRlIiwic3RyIiwic3JjIiwicmVwbGFjZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/markdown-it/lib/rules_core/normalize.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/markdown-it/lib/rules_core/replacements.js":
/*!*****************************************************************!*\
  !*** ./node_modules/markdown-it/lib/rules_core/replacements.js ***!
  \*****************************************************************/
/***/ ((module) => {

eval("// Simple typographic replacements\n//\n// (c) (C) → ©\n// (tm) (TM) → ™\n// (r) (R) → ®\n// +- → ±\n// ... → … (also ?.... → ?.., !.... → !..)\n// ???????? → ???, !!!!! → !!!, `,,` → `,`\n// -- → &ndash;, --- → &mdash;\n//\n\n// TODO:\n// - fractionals 1/2, 1/4, 3/4 -> ½, ¼, ¾\n// - multiplications 2 x 4 -> 2 × 4\nvar RARE_RE = /\\+-|\\.\\.|\\?\\?\\?\\?|!!!!|,,|--/;\n// Workaround for phantomjs - need regex without /g flag,\n// or root check will fail every second time\nvar SCOPED_ABBR_TEST_RE = /\\((c|tm|r)\\)/i;\nvar SCOPED_ABBR_RE = /\\((c|tm|r)\\)/ig;\nvar SCOPED_ABBR = {\n    c: \"\\xa9\",\n    r: \"\\xae\",\n    tm: \"™\"\n};\nfunction replaceFn(match, name) {\n    return SCOPED_ABBR[name.toLowerCase()];\n}\nfunction replace_scoped(inlineTokens) {\n    var i, token, inside_autolink = 0;\n    for(i = inlineTokens.length - 1; i >= 0; i--){\n        token = inlineTokens[i];\n        if (token.type === \"text\" && !inside_autolink) {\n            token.content = token.content.replace(SCOPED_ABBR_RE, replaceFn);\n        }\n        if (token.type === \"link_open\" && token.info === \"auto\") {\n            inside_autolink--;\n        }\n        if (token.type === \"link_close\" && token.info === \"auto\") {\n            inside_autolink++;\n        }\n    }\n}\nfunction replace_rare(inlineTokens) {\n    var i, token, inside_autolink = 0;\n    for(i = inlineTokens.length - 1; i >= 0; i--){\n        token = inlineTokens[i];\n        if (token.type === \"text\" && !inside_autolink) {\n            if (RARE_RE.test(token.content)) {\n                token.content = token.content.replace(/\\+-/g, \"\\xb1\")// .., ..., ....... -> …\n                // but ?..... & !..... -> ?.. & !..\n                .replace(/\\.{2,}/g, \"…\").replace(/([?!])…/g, \"$1..\").replace(/([?!]){4,}/g, \"$1$1$1\").replace(/,{2,}/g, \",\")// em-dash\n                .replace(/(^|[^-])---(?=[^-]|$)/mg, \"$1—\")// en-dash\n                .replace(/(^|\\s)--(?=\\s|$)/mg, \"$1–\").replace(/(^|[^-\\s])--(?=[^-\\s]|$)/mg, \"$1–\");\n            }\n        }\n        if (token.type === \"link_open\" && token.info === \"auto\") {\n            inside_autolink--;\n        }\n        if (token.type === \"link_close\" && token.info === \"auto\") {\n            inside_autolink++;\n        }\n    }\n}\nmodule.exports = function replace(state) {\n    var blkIdx;\n    if (!state.md.options.typographer) {\n        return;\n    }\n    for(blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--){\n        if (state.tokens[blkIdx].type !== \"inline\") {\n            continue;\n        }\n        if (SCOPED_ABBR_TEST_RE.test(state.tokens[blkIdx].content)) {\n            replace_scoped(state.tokens[blkIdx].children);\n        }\n        if (RARE_RE.test(state.tokens[blkIdx].content)) {\n            replace_rare(state.tokens[blkIdx].children);\n        }\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3J1bGVzX2NvcmUvcmVwbGFjZW1lbnRzLmpzIiwibWFwcGluZ3MiOiJBQUFBLGtDQUFrQztBQUNsQyxFQUFFO0FBQ0YsY0FBYztBQUNkLGdCQUFnQjtBQUNoQixjQUFjO0FBQ2QsU0FBUztBQUNULDBDQUEwQztBQUMxQywwQ0FBMEM7QUFDMUMsOEJBQThCO0FBQzlCLEVBQUU7QUFDRjtBQUVBLFFBQVE7QUFDUix5Q0FBeUM7QUFDekMsbUNBQW1DO0FBRW5DLElBQUlBLFVBQVU7QUFFZCx5REFBeUQ7QUFDekQsNENBQTRDO0FBQzVDLElBQUlDLHNCQUFzQjtBQUUxQixJQUFJQyxpQkFBaUI7QUFDckIsSUFBSUMsY0FBYztJQUNoQkMsR0FBRztJQUNIQyxHQUFHO0lBQ0hDLElBQUk7QUFDTjtBQUVBLFNBQVNDLFVBQVVDLEtBQUssRUFBRUMsSUFBSTtJQUM1QixPQUFPTixXQUFXLENBQUNNLEtBQUtDLFdBQVcsR0FBRztBQUN4QztBQUVBLFNBQVNDLGVBQWVDLFlBQVk7SUFDbEMsSUFBSUMsR0FBR0MsT0FBT0Msa0JBQWtCO0lBRWhDLElBQUtGLElBQUlELGFBQWFJLE1BQU0sR0FBRyxHQUFHSCxLQUFLLEdBQUdBLElBQUs7UUFDN0NDLFFBQVFGLFlBQVksQ0FBQ0MsRUFBRTtRQUV2QixJQUFJQyxNQUFNRyxJQUFJLEtBQUssVUFBVSxDQUFDRixpQkFBaUI7WUFDN0NELE1BQU1JLE9BQU8sR0FBR0osTUFBTUksT0FBTyxDQUFDQyxPQUFPLENBQUNqQixnQkFBZ0JLO1FBQ3hEO1FBRUEsSUFBSU8sTUFBTUcsSUFBSSxLQUFLLGVBQWVILE1BQU1NLElBQUksS0FBSyxRQUFRO1lBQ3ZETDtRQUNGO1FBRUEsSUFBSUQsTUFBTUcsSUFBSSxLQUFLLGdCQUFnQkgsTUFBTU0sSUFBSSxLQUFLLFFBQVE7WUFDeERMO1FBQ0Y7SUFDRjtBQUNGO0FBRUEsU0FBU00sYUFBYVQsWUFBWTtJQUNoQyxJQUFJQyxHQUFHQyxPQUFPQyxrQkFBa0I7SUFFaEMsSUFBS0YsSUFBSUQsYUFBYUksTUFBTSxHQUFHLEdBQUdILEtBQUssR0FBR0EsSUFBSztRQUM3Q0MsUUFBUUYsWUFBWSxDQUFDQyxFQUFFO1FBRXZCLElBQUlDLE1BQU1HLElBQUksS0FBSyxVQUFVLENBQUNGLGlCQUFpQjtZQUM3QyxJQUFJZixRQUFRc0IsSUFBSSxDQUFDUixNQUFNSSxPQUFPLEdBQUc7Z0JBQy9CSixNQUFNSSxPQUFPLEdBQUdKLE1BQU1JLE9BQU8sQ0FDMUJDLE9BQU8sQ0FBQyxRQUFRLE9BQ2pCLHdCQUF3QjtnQkFDeEIsbUNBQW1DO2lCQUNsQ0EsT0FBTyxDQUFDLFdBQVcsS0FBS0EsT0FBTyxDQUFDLFlBQVksUUFDNUNBLE9BQU8sQ0FBQyxlQUFlLFVBQVVBLE9BQU8sQ0FBQyxVQUFVLElBQ3BELFVBQVU7aUJBQ1RBLE9BQU8sQ0FBQywyQkFBMkIsTUFDcEMsVUFBVTtpQkFDVEEsT0FBTyxDQUFDLHNCQUFzQixPQUM5QkEsT0FBTyxDQUFDLDhCQUE4QjtZQUMzQztRQUNGO1FBRUEsSUFBSUwsTUFBTUcsSUFBSSxLQUFLLGVBQWVILE1BQU1NLElBQUksS0FBSyxRQUFRO1lBQ3ZETDtRQUNGO1FBRUEsSUFBSUQsTUFBTUcsSUFBSSxLQUFLLGdCQUFnQkgsTUFBTU0sSUFBSSxLQUFLLFFBQVE7WUFDeERMO1FBQ0Y7SUFDRjtBQUNGO0FBR0FRLE9BQU9DLE9BQU8sR0FBRyxTQUFTTCxRQUFRTSxLQUFLO0lBQ3JDLElBQUlDO0lBRUosSUFBSSxDQUFDRCxNQUFNRSxFQUFFLENBQUNDLE9BQU8sQ0FBQ0MsV0FBVyxFQUFFO1FBQUU7SUFBUTtJQUU3QyxJQUFLSCxTQUFTRCxNQUFNSyxNQUFNLENBQUNkLE1BQU0sR0FBRyxHQUFHVSxVQUFVLEdBQUdBLFNBQVU7UUFFNUQsSUFBSUQsTUFBTUssTUFBTSxDQUFDSixPQUFPLENBQUNULElBQUksS0FBSyxVQUFVO1lBQUU7UUFBVTtRQUV4RCxJQUFJaEIsb0JBQW9CcUIsSUFBSSxDQUFDRyxNQUFNSyxNQUFNLENBQUNKLE9BQU8sQ0FBQ1IsT0FBTyxHQUFHO1lBQzFEUCxlQUFlYyxNQUFNSyxNQUFNLENBQUNKLE9BQU8sQ0FBQ0ssUUFBUTtRQUM5QztRQUVBLElBQUkvQixRQUFRc0IsSUFBSSxDQUFDRyxNQUFNSyxNQUFNLENBQUNKLE9BQU8sQ0FBQ1IsT0FBTyxHQUFHO1lBQzlDRyxhQUFhSSxNQUFNSyxNQUFNLENBQUNKLE9BQU8sQ0FBQ0ssUUFBUTtRQUM1QztJQUVGO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9nLy4vbm9kZV9tb2R1bGVzL21hcmtkb3duLWl0L2xpYi9ydWxlc19jb3JlL3JlcGxhY2VtZW50cy5qcz80YzkzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFNpbXBsZSB0eXBvZ3JhcGhpYyByZXBsYWNlbWVudHNcbi8vXG4vLyAoYykgKEMpIOKGkiDCqVxuLy8gKHRtKSAoVE0pIOKGkiDihKJcbi8vIChyKSAoUikg4oaSIMKuXG4vLyArLSDihpIgwrFcbi8vIC4uLiDihpIg4oCmIChhbHNvID8uLi4uIOKGkiA/Li4sICEuLi4uIOKGkiAhLi4pXG4vLyA/Pz8/Pz8/PyDihpIgPz8/LCAhISEhISDihpIgISEhLCBgLCxgIOKGkiBgLGBcbi8vIC0tIOKGkiAmbmRhc2g7LCAtLS0g4oaSICZtZGFzaDtcbi8vXG4ndXNlIHN0cmljdCc7XG5cbi8vIFRPRE86XG4vLyAtIGZyYWN0aW9uYWxzIDEvMiwgMS80LCAzLzQgLT4gwr0sIMK8LCDCvlxuLy8gLSBtdWx0aXBsaWNhdGlvbnMgMiB4IDQgLT4gMiDDlyA0XG5cbnZhciBSQVJFX1JFID0gL1xcKy18XFwuXFwufFxcP1xcP1xcP1xcP3whISEhfCwsfC0tLztcblxuLy8gV29ya2Fyb3VuZCBmb3IgcGhhbnRvbWpzIC0gbmVlZCByZWdleCB3aXRob3V0IC9nIGZsYWcsXG4vLyBvciByb290IGNoZWNrIHdpbGwgZmFpbCBldmVyeSBzZWNvbmQgdGltZVxudmFyIFNDT1BFRF9BQkJSX1RFU1RfUkUgPSAvXFwoKGN8dG18cilcXCkvaTtcblxudmFyIFNDT1BFRF9BQkJSX1JFID0gL1xcKChjfHRtfHIpXFwpL2lnO1xudmFyIFNDT1BFRF9BQkJSID0ge1xuICBjOiAnwqknLFxuICByOiAnwq4nLFxuICB0bTogJ+KEoidcbn07XG5cbmZ1bmN0aW9uIHJlcGxhY2VGbihtYXRjaCwgbmFtZSkge1xuICByZXR1cm4gU0NPUEVEX0FCQlJbbmFtZS50b0xvd2VyQ2FzZSgpXTtcbn1cblxuZnVuY3Rpb24gcmVwbGFjZV9zY29wZWQoaW5saW5lVG9rZW5zKSB7XG4gIHZhciBpLCB0b2tlbiwgaW5zaWRlX2F1dG9saW5rID0gMDtcblxuICBmb3IgKGkgPSBpbmxpbmVUb2tlbnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICB0b2tlbiA9IGlubGluZVRva2Vuc1tpXTtcblxuICAgIGlmICh0b2tlbi50eXBlID09PSAndGV4dCcgJiYgIWluc2lkZV9hdXRvbGluaykge1xuICAgICAgdG9rZW4uY29udGVudCA9IHRva2VuLmNvbnRlbnQucmVwbGFjZShTQ09QRURfQUJCUl9SRSwgcmVwbGFjZUZuKTtcbiAgICB9XG5cbiAgICBpZiAodG9rZW4udHlwZSA9PT0gJ2xpbmtfb3BlbicgJiYgdG9rZW4uaW5mbyA9PT0gJ2F1dG8nKSB7XG4gICAgICBpbnNpZGVfYXV0b2xpbmstLTtcbiAgICB9XG5cbiAgICBpZiAodG9rZW4udHlwZSA9PT0gJ2xpbmtfY2xvc2UnICYmIHRva2VuLmluZm8gPT09ICdhdXRvJykge1xuICAgICAgaW5zaWRlX2F1dG9saW5rKys7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHJlcGxhY2VfcmFyZShpbmxpbmVUb2tlbnMpIHtcbiAgdmFyIGksIHRva2VuLCBpbnNpZGVfYXV0b2xpbmsgPSAwO1xuXG4gIGZvciAoaSA9IGlubGluZVRva2Vucy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIHRva2VuID0gaW5saW5lVG9rZW5zW2ldO1xuXG4gICAgaWYgKHRva2VuLnR5cGUgPT09ICd0ZXh0JyAmJiAhaW5zaWRlX2F1dG9saW5rKSB7XG4gICAgICBpZiAoUkFSRV9SRS50ZXN0KHRva2VuLmNvbnRlbnQpKSB7XG4gICAgICAgIHRva2VuLmNvbnRlbnQgPSB0b2tlbi5jb250ZW50XG4gICAgICAgICAgLnJlcGxhY2UoL1xcKy0vZywgJ8KxJylcbiAgICAgICAgICAvLyAuLiwgLi4uLCAuLi4uLi4uIC0+IOKAplxuICAgICAgICAgIC8vIGJ1dCA/Li4uLi4gJiAhLi4uLi4gLT4gPy4uICYgIS4uXG4gICAgICAgICAgLnJlcGxhY2UoL1xcLnsyLH0vZywgJ+KApicpLnJlcGxhY2UoLyhbPyFdKeKApi9nLCAnJDEuLicpXG4gICAgICAgICAgLnJlcGxhY2UoLyhbPyFdKXs0LH0vZywgJyQxJDEkMScpLnJlcGxhY2UoLyx7Mix9L2csICcsJylcbiAgICAgICAgICAvLyBlbS1kYXNoXG4gICAgICAgICAgLnJlcGxhY2UoLyhefFteLV0pLS0tKD89W14tXXwkKS9tZywgJyQxXFx1MjAxNCcpXG4gICAgICAgICAgLy8gZW4tZGFzaFxuICAgICAgICAgIC5yZXBsYWNlKC8oXnxcXHMpLS0oPz1cXHN8JCkvbWcsICckMVxcdTIwMTMnKVxuICAgICAgICAgIC5yZXBsYWNlKC8oXnxbXi1cXHNdKS0tKD89W14tXFxzXXwkKS9tZywgJyQxXFx1MjAxMycpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0b2tlbi50eXBlID09PSAnbGlua19vcGVuJyAmJiB0b2tlbi5pbmZvID09PSAnYXV0bycpIHtcbiAgICAgIGluc2lkZV9hdXRvbGluay0tO1xuICAgIH1cblxuICAgIGlmICh0b2tlbi50eXBlID09PSAnbGlua19jbG9zZScgJiYgdG9rZW4uaW5mbyA9PT0gJ2F1dG8nKSB7XG4gICAgICBpbnNpZGVfYXV0b2xpbmsrKztcbiAgICB9XG4gIH1cbn1cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHJlcGxhY2Uoc3RhdGUpIHtcbiAgdmFyIGJsa0lkeDtcblxuICBpZiAoIXN0YXRlLm1kLm9wdGlvbnMudHlwb2dyYXBoZXIpIHsgcmV0dXJuOyB9XG5cbiAgZm9yIChibGtJZHggPSBzdGF0ZS50b2tlbnMubGVuZ3RoIC0gMTsgYmxrSWR4ID49IDA7IGJsa0lkeC0tKSB7XG5cbiAgICBpZiAoc3RhdGUudG9rZW5zW2Jsa0lkeF0udHlwZSAhPT0gJ2lubGluZScpIHsgY29udGludWU7IH1cblxuICAgIGlmIChTQ09QRURfQUJCUl9URVNUX1JFLnRlc3Qoc3RhdGUudG9rZW5zW2Jsa0lkeF0uY29udGVudCkpIHtcbiAgICAgIHJlcGxhY2Vfc2NvcGVkKHN0YXRlLnRva2Vuc1tibGtJZHhdLmNoaWxkcmVuKTtcbiAgICB9XG5cbiAgICBpZiAoUkFSRV9SRS50ZXN0KHN0YXRlLnRva2Vuc1tibGtJZHhdLmNvbnRlbnQpKSB7XG4gICAgICByZXBsYWNlX3JhcmUoc3RhdGUudG9rZW5zW2Jsa0lkeF0uY2hpbGRyZW4pO1xuICAgIH1cblxuICB9XG59O1xuIl0sIm5hbWVzIjpbIlJBUkVfUkUiLCJTQ09QRURfQUJCUl9URVNUX1JFIiwiU0NPUEVEX0FCQlJfUkUiLCJTQ09QRURfQUJCUiIsImMiLCJyIiwidG0iLCJyZXBsYWNlRm4iLCJtYXRjaCIsIm5hbWUiLCJ0b0xvd2VyQ2FzZSIsInJlcGxhY2Vfc2NvcGVkIiwiaW5saW5lVG9rZW5zIiwiaSIsInRva2VuIiwiaW5zaWRlX2F1dG9saW5rIiwibGVuZ3RoIiwidHlwZSIsImNvbnRlbnQiLCJyZXBsYWNlIiwiaW5mbyIsInJlcGxhY2VfcmFyZSIsInRlc3QiLCJtb2R1bGUiLCJleHBvcnRzIiwic3RhdGUiLCJibGtJZHgiLCJtZCIsIm9wdGlvbnMiLCJ0eXBvZ3JhcGhlciIsInRva2VucyIsImNoaWxkcmVuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/markdown-it/lib/rules_core/replacements.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/markdown-it/lib/rules_core/smartquotes.js":
/*!****************************************************************!*\
  !*** ./node_modules/markdown-it/lib/rules_core/smartquotes.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Convert straight quotation marks to typographic ones\n//\n\nvar isWhiteSpace = (__webpack_require__(/*! ../common/utils */ \"(rsc)/./node_modules/markdown-it/lib/common/utils.js\").isWhiteSpace);\nvar isPunctChar = (__webpack_require__(/*! ../common/utils */ \"(rsc)/./node_modules/markdown-it/lib/common/utils.js\").isPunctChar);\nvar isMdAsciiPunct = (__webpack_require__(/*! ../common/utils */ \"(rsc)/./node_modules/markdown-it/lib/common/utils.js\").isMdAsciiPunct);\nvar QUOTE_TEST_RE = /['\"]/;\nvar QUOTE_RE = /['\"]/g;\nvar APOSTROPHE = \"’\"; /* ’ */ \nfunction replaceAt(str, index, ch) {\n    return str.slice(0, index) + ch + str.slice(index + 1);\n}\nfunction process_inlines(tokens, state) {\n    var i, token, text, t, pos, max, thisLevel, item, lastChar, nextChar, isLastPunctChar, isNextPunctChar, isLastWhiteSpace, isNextWhiteSpace, canOpen, canClose, j, isSingle, stack, openQuote, closeQuote;\n    stack = [];\n    for(i = 0; i < tokens.length; i++){\n        token = tokens[i];\n        thisLevel = tokens[i].level;\n        for(j = stack.length - 1; j >= 0; j--){\n            if (stack[j].level <= thisLevel) {\n                break;\n            }\n        }\n        stack.length = j + 1;\n        if (token.type !== \"text\") {\n            continue;\n        }\n        text = token.content;\n        pos = 0;\n        max = text.length;\n        /*eslint no-labels:0,block-scoped-var:0*/ OUTER: while(pos < max){\n            QUOTE_RE.lastIndex = pos;\n            t = QUOTE_RE.exec(text);\n            if (!t) {\n                break;\n            }\n            canOpen = canClose = true;\n            pos = t.index + 1;\n            isSingle = t[0] === \"'\";\n            // Find previous character,\n            // default to space if it's the beginning of the line\n            //\n            lastChar = 0x20;\n            if (t.index - 1 >= 0) {\n                lastChar = text.charCodeAt(t.index - 1);\n            } else {\n                for(j = i - 1; j >= 0; j--){\n                    if (tokens[j].type === \"softbreak\" || tokens[j].type === \"hardbreak\") break; // lastChar defaults to 0x20\n                    if (!tokens[j].content) continue; // should skip all tokens except 'text', 'html_inline' or 'code_inline'\n                    lastChar = tokens[j].content.charCodeAt(tokens[j].content.length - 1);\n                    break;\n                }\n            }\n            // Find next character,\n            // default to space if it's the end of the line\n            //\n            nextChar = 0x20;\n            if (pos < max) {\n                nextChar = text.charCodeAt(pos);\n            } else {\n                for(j = i + 1; j < tokens.length; j++){\n                    if (tokens[j].type === \"softbreak\" || tokens[j].type === \"hardbreak\") break; // nextChar defaults to 0x20\n                    if (!tokens[j].content) continue; // should skip all tokens except 'text', 'html_inline' or 'code_inline'\n                    nextChar = tokens[j].content.charCodeAt(0);\n                    break;\n                }\n            }\n            isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));\n            isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));\n            isLastWhiteSpace = isWhiteSpace(lastChar);\n            isNextWhiteSpace = isWhiteSpace(nextChar);\n            if (isNextWhiteSpace) {\n                canOpen = false;\n            } else if (isNextPunctChar) {\n                if (!(isLastWhiteSpace || isLastPunctChar)) {\n                    canOpen = false;\n                }\n            }\n            if (isLastWhiteSpace) {\n                canClose = false;\n            } else if (isLastPunctChar) {\n                if (!(isNextWhiteSpace || isNextPunctChar)) {\n                    canClose = false;\n                }\n            }\n            if (nextChar === 0x22 /* \" */  && t[0] === '\"') {\n                if (lastChar >= 0x30 /* 0 */  && lastChar <= 0x39 /* 9 */ ) {\n                    // special case: 1\"\" - count first quote as an inch\n                    canClose = canOpen = false;\n                }\n            }\n            if (canOpen && canClose) {\n                // Replace quotes in the middle of punctuation sequence, but not\n                // in the middle of the words, i.e.:\n                //\n                // 1. foo \" bar \" baz - not replaced\n                // 2. foo-\"-bar-\"-baz - replaced\n                // 3. foo\"bar\"baz     - not replaced\n                //\n                canOpen = isLastPunctChar;\n                canClose = isNextPunctChar;\n            }\n            if (!canOpen && !canClose) {\n                // middle of word\n                if (isSingle) {\n                    token.content = replaceAt(token.content, t.index, APOSTROPHE);\n                }\n                continue;\n            }\n            if (canClose) {\n                // this could be a closing quote, rewind the stack to get a match\n                for(j = stack.length - 1; j >= 0; j--){\n                    item = stack[j];\n                    if (stack[j].level < thisLevel) {\n                        break;\n                    }\n                    if (item.single === isSingle && stack[j].level === thisLevel) {\n                        item = stack[j];\n                        if (isSingle) {\n                            openQuote = state.md.options.quotes[2];\n                            closeQuote = state.md.options.quotes[3];\n                        } else {\n                            openQuote = state.md.options.quotes[0];\n                            closeQuote = state.md.options.quotes[1];\n                        }\n                        // replace token.content *before* tokens[item.token].content,\n                        // because, if they are pointing at the same token, replaceAt\n                        // could mess up indices when quote length != 1\n                        token.content = replaceAt(token.content, t.index, closeQuote);\n                        tokens[item.token].content = replaceAt(tokens[item.token].content, item.pos, openQuote);\n                        pos += closeQuote.length - 1;\n                        if (item.token === i) {\n                            pos += openQuote.length - 1;\n                        }\n                        text = token.content;\n                        max = text.length;\n                        stack.length = j;\n                        continue OUTER;\n                    }\n                }\n            }\n            if (canOpen) {\n                stack.push({\n                    token: i,\n                    pos: t.index,\n                    single: isSingle,\n                    level: thisLevel\n                });\n            } else if (canClose && isSingle) {\n                token.content = replaceAt(token.content, t.index, APOSTROPHE);\n            }\n        }\n    }\n}\nmodule.exports = function smartquotes(state) {\n    /*eslint max-depth:0*/ var blkIdx;\n    if (!state.md.options.typographer) {\n        return;\n    }\n    for(blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--){\n        if (state.tokens[blkIdx].type !== \"inline\" || !QUOTE_TEST_RE.test(state.tokens[blkIdx].content)) {\n            continue;\n        }\n        process_inlines(state.tokens[blkIdx].children, state);\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/markdown-it/lib/rules_core/smartquotes.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/markdown-it/lib/rules_core/state_core.js":
/*!***************************************************************!*\
  !*** ./node_modules/markdown-it/lib/rules_core/state_core.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Core state object\n//\n\nvar Token = __webpack_require__(/*! ../token */ \"(rsc)/./node_modules/markdown-it/lib/token.js\");\nfunction StateCore(src, md, env) {\n    this.src = src;\n    this.env = env;\n    this.tokens = [];\n    this.inlineMode = false;\n    this.md = md; // link to parser instance\n}\n// re-export Token class to use in core rules\nStateCore.prototype.Token = Token;\nmodule.exports = StateCore;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3J1bGVzX2NvcmUvc3RhdGVfY29yZS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsRUFBRTtBQUNGO0FBRUEsSUFBSUEsUUFBUUMsbUJBQU9BLENBQUM7QUFHcEIsU0FBU0MsVUFBVUMsR0FBRyxFQUFFQyxFQUFFLEVBQUVDLEdBQUc7SUFDN0IsSUFBSSxDQUFDRixHQUFHLEdBQUdBO0lBQ1gsSUFBSSxDQUFDRSxHQUFHLEdBQUdBO0lBQ1gsSUFBSSxDQUFDQyxNQUFNLEdBQUcsRUFBRTtJQUNoQixJQUFJLENBQUNDLFVBQVUsR0FBRztJQUNsQixJQUFJLENBQUNILEVBQUUsR0FBR0EsSUFBSSwwQkFBMEI7QUFDMUM7QUFFQSw2Q0FBNkM7QUFDN0NGLFVBQVVNLFNBQVMsQ0FBQ1IsS0FBSyxHQUFHQTtBQUc1QlMsT0FBT0MsT0FBTyxHQUFHUiIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2cvLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3J1bGVzX2NvcmUvc3RhdGVfY29yZS5qcz9iM2U0Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcmUgc3RhdGUgb2JqZWN0XG4vL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgVG9rZW4gPSByZXF1aXJlKCcuLi90b2tlbicpO1xuXG5cbmZ1bmN0aW9uIFN0YXRlQ29yZShzcmMsIG1kLCBlbnYpIHtcbiAgdGhpcy5zcmMgPSBzcmM7XG4gIHRoaXMuZW52ID0gZW52O1xuICB0aGlzLnRva2VucyA9IFtdO1xuICB0aGlzLmlubGluZU1vZGUgPSBmYWxzZTtcbiAgdGhpcy5tZCA9IG1kOyAvLyBsaW5rIHRvIHBhcnNlciBpbnN0YW5jZVxufVxuXG4vLyByZS1leHBvcnQgVG9rZW4gY2xhc3MgdG8gdXNlIGluIGNvcmUgcnVsZXNcblN0YXRlQ29yZS5wcm90b3R5cGUuVG9rZW4gPSBUb2tlbjtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IFN0YXRlQ29yZTtcbiJdLCJuYW1lcyI6WyJUb2tlbiIsInJlcXVpcmUiLCJTdGF0ZUNvcmUiLCJzcmMiLCJtZCIsImVudiIsInRva2VucyIsImlubGluZU1vZGUiLCJwcm90b3R5cGUiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/markdown-it/lib/rules_core/state_core.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/markdown-it/lib/rules_core/text_join.js":
/*!**************************************************************!*\
  !*** ./node_modules/markdown-it/lib/rules_core/text_join.js ***!
  \**************************************************************/
/***/ ((module) => {

eval("// Join raw text tokens with the rest of the text\n//\n// This is set as a separate rule to provide an opportunity for plugins\n// to run text replacements after text join, but before escape join.\n//\n// For example, `\\:)` shouldn't be replaced with an emoji.\n//\n\nmodule.exports = function text_join(state) {\n    var j, l, tokens, curr, max, last, blockTokens = state.tokens;\n    for(j = 0, l = blockTokens.length; j < l; j++){\n        if (blockTokens[j].type !== \"inline\") continue;\n        tokens = blockTokens[j].children;\n        max = tokens.length;\n        for(curr = 0; curr < max; curr++){\n            if (tokens[curr].type === \"text_special\") {\n                tokens[curr].type = \"text\";\n            }\n        }\n        for(curr = last = 0; curr < max; curr++){\n            if (tokens[curr].type === \"text\" && curr + 1 < max && tokens[curr + 1].type === \"text\") {\n                // collapse two adjacent text nodes\n                tokens[curr + 1].content = tokens[curr].content + tokens[curr + 1].content;\n            } else {\n                if (curr !== last) {\n                    tokens[last] = tokens[curr];\n                }\n                last++;\n            }\n        }\n        if (curr !== last) {\n            tokens.length = last;\n        }\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3J1bGVzX2NvcmUvdGV4dF9qb2luLmpzIiwibWFwcGluZ3MiOiJBQUFBLGlEQUFpRDtBQUNqRCxFQUFFO0FBQ0YsdUVBQXVFO0FBQ3ZFLG9FQUFvRTtBQUNwRSxFQUFFO0FBQ0YsMERBQTBEO0FBQzFELEVBQUU7QUFDRjtBQUdBQSxPQUFPQyxPQUFPLEdBQUcsU0FBU0MsVUFBVUMsS0FBSztJQUN2QyxJQUFJQyxHQUFHQyxHQUFHQyxRQUFRQyxNQUFNQyxLQUFLQyxNQUN6QkMsY0FBY1AsTUFBTUcsTUFBTTtJQUU5QixJQUFLRixJQUFJLEdBQUdDLElBQUlLLFlBQVlDLE1BQU0sRUFBRVAsSUFBSUMsR0FBR0QsSUFBSztRQUM5QyxJQUFJTSxXQUFXLENBQUNOLEVBQUUsQ0FBQ1EsSUFBSSxLQUFLLFVBQVU7UUFFdENOLFNBQVNJLFdBQVcsQ0FBQ04sRUFBRSxDQUFDUyxRQUFRO1FBQ2hDTCxNQUFNRixPQUFPSyxNQUFNO1FBRW5CLElBQUtKLE9BQU8sR0FBR0EsT0FBT0MsS0FBS0QsT0FBUTtZQUNqQyxJQUFJRCxNQUFNLENBQUNDLEtBQUssQ0FBQ0ssSUFBSSxLQUFLLGdCQUFnQjtnQkFDeENOLE1BQU0sQ0FBQ0MsS0FBSyxDQUFDSyxJQUFJLEdBQUc7WUFDdEI7UUFDRjtRQUVBLElBQUtMLE9BQU9FLE9BQU8sR0FBR0YsT0FBT0MsS0FBS0QsT0FBUTtZQUN4QyxJQUFJRCxNQUFNLENBQUNDLEtBQUssQ0FBQ0ssSUFBSSxLQUFLLFVBQ3RCTCxPQUFPLElBQUlDLE9BQ1hGLE1BQU0sQ0FBQ0MsT0FBTyxFQUFFLENBQUNLLElBQUksS0FBSyxRQUFRO2dCQUVwQyxtQ0FBbUM7Z0JBQ25DTixNQUFNLENBQUNDLE9BQU8sRUFBRSxDQUFDTyxPQUFPLEdBQUdSLE1BQU0sQ0FBQ0MsS0FBSyxDQUFDTyxPQUFPLEdBQUdSLE1BQU0sQ0FBQ0MsT0FBTyxFQUFFLENBQUNPLE9BQU87WUFDNUUsT0FBTztnQkFDTCxJQUFJUCxTQUFTRSxNQUFNO29CQUFFSCxNQUFNLENBQUNHLEtBQUssR0FBR0gsTUFBTSxDQUFDQyxLQUFLO2dCQUFFO2dCQUVsREU7WUFDRjtRQUNGO1FBRUEsSUFBSUYsU0FBU0UsTUFBTTtZQUNqQkgsT0FBT0ssTUFBTSxHQUFHRjtRQUNsQjtJQUNGO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9nLy4vbm9kZV9tb2R1bGVzL21hcmtkb3duLWl0L2xpYi9ydWxlc19jb3JlL3RleHRfam9pbi5qcz9iNDc1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEpvaW4gcmF3IHRleHQgdG9rZW5zIHdpdGggdGhlIHJlc3Qgb2YgdGhlIHRleHRcbi8vXG4vLyBUaGlzIGlzIHNldCBhcyBhIHNlcGFyYXRlIHJ1bGUgdG8gcHJvdmlkZSBhbiBvcHBvcnR1bml0eSBmb3IgcGx1Z2luc1xuLy8gdG8gcnVuIHRleHQgcmVwbGFjZW1lbnRzIGFmdGVyIHRleHQgam9pbiwgYnV0IGJlZm9yZSBlc2NhcGUgam9pbi5cbi8vXG4vLyBGb3IgZXhhbXBsZSwgYFxcOilgIHNob3VsZG4ndCBiZSByZXBsYWNlZCB3aXRoIGFuIGVtb2ppLlxuLy9cbid1c2Ugc3RyaWN0JztcblxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHRleHRfam9pbihzdGF0ZSkge1xuICB2YXIgaiwgbCwgdG9rZW5zLCBjdXJyLCBtYXgsIGxhc3QsXG4gICAgICBibG9ja1Rva2VucyA9IHN0YXRlLnRva2VucztcblxuICBmb3IgKGogPSAwLCBsID0gYmxvY2tUb2tlbnMubGVuZ3RoOyBqIDwgbDsgaisrKSB7XG4gICAgaWYgKGJsb2NrVG9rZW5zW2pdLnR5cGUgIT09ICdpbmxpbmUnKSBjb250aW51ZTtcblxuICAgIHRva2VucyA9IGJsb2NrVG9rZW5zW2pdLmNoaWxkcmVuO1xuICAgIG1heCA9IHRva2Vucy5sZW5ndGg7XG5cbiAgICBmb3IgKGN1cnIgPSAwOyBjdXJyIDwgbWF4OyBjdXJyKyspIHtcbiAgICAgIGlmICh0b2tlbnNbY3Vycl0udHlwZSA9PT0gJ3RleHRfc3BlY2lhbCcpIHtcbiAgICAgICAgdG9rZW5zW2N1cnJdLnR5cGUgPSAndGV4dCc7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yIChjdXJyID0gbGFzdCA9IDA7IGN1cnIgPCBtYXg7IGN1cnIrKykge1xuICAgICAgaWYgKHRva2Vuc1tjdXJyXS50eXBlID09PSAndGV4dCcgJiZcbiAgICAgICAgICBjdXJyICsgMSA8IG1heCAmJlxuICAgICAgICAgIHRva2Vuc1tjdXJyICsgMV0udHlwZSA9PT0gJ3RleHQnKSB7XG5cbiAgICAgICAgLy8gY29sbGFwc2UgdHdvIGFkamFjZW50IHRleHQgbm9kZXNcbiAgICAgICAgdG9rZW5zW2N1cnIgKyAxXS5jb250ZW50ID0gdG9rZW5zW2N1cnJdLmNvbnRlbnQgKyB0b2tlbnNbY3VyciArIDFdLmNvbnRlbnQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoY3VyciAhPT0gbGFzdCkgeyB0b2tlbnNbbGFzdF0gPSB0b2tlbnNbY3Vycl07IH1cblxuICAgICAgICBsYXN0Kys7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGN1cnIgIT09IGxhc3QpIHtcbiAgICAgIHRva2Vucy5sZW5ndGggPSBsYXN0O1xuICAgIH1cbiAgfVxufTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwidGV4dF9qb2luIiwic3RhdGUiLCJqIiwibCIsInRva2VucyIsImN1cnIiLCJtYXgiLCJsYXN0IiwiYmxvY2tUb2tlbnMiLCJsZW5ndGgiLCJ0eXBlIiwiY2hpbGRyZW4iLCJjb250ZW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/markdown-it/lib/rules_core/text_join.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/markdown-it/lib/rules_inline/autolink.js":
/*!***************************************************************!*\
  !*** ./node_modules/markdown-it/lib/rules_inline/autolink.js ***!
  \***************************************************************/
/***/ ((module) => {

eval("// Process autolinks '<protocol:...>'\n\n/*eslint max-len:0*/ var EMAIL_RE = /^([a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)$/;\nvar AUTOLINK_RE = /^([a-zA-Z][a-zA-Z0-9+.\\-]{1,31}):([^<>\\x00-\\x20]*)$/;\nmodule.exports = function autolink(state, silent) {\n    var url, fullUrl, token, ch, start, max, pos = state.pos;\n    if (state.src.charCodeAt(pos) !== 0x3C /* < */ ) {\n        return false;\n    }\n    start = state.pos;\n    max = state.posMax;\n    for(;;){\n        if (++pos >= max) return false;\n        ch = state.src.charCodeAt(pos);\n        if (ch === 0x3C /* < */ ) return false;\n        if (ch === 0x3E /* > */ ) break;\n    }\n    url = state.src.slice(start + 1, pos);\n    if (AUTOLINK_RE.test(url)) {\n        fullUrl = state.md.normalizeLink(url);\n        if (!state.md.validateLink(fullUrl)) {\n            return false;\n        }\n        if (!silent) {\n            token = state.push(\"link_open\", \"a\", 1);\n            token.attrs = [\n                [\n                    \"href\",\n                    fullUrl\n                ]\n            ];\n            token.markup = \"autolink\";\n            token.info = \"auto\";\n            token = state.push(\"text\", \"\", 0);\n            token.content = state.md.normalizeLinkText(url);\n            token = state.push(\"link_close\", \"a\", -1);\n            token.markup = \"autolink\";\n            token.info = \"auto\";\n        }\n        state.pos += url.length + 2;\n        return true;\n    }\n    if (EMAIL_RE.test(url)) {\n        fullUrl = state.md.normalizeLink(\"mailto:\" + url);\n        if (!state.md.validateLink(fullUrl)) {\n            return false;\n        }\n        if (!silent) {\n            token = state.push(\"link_open\", \"a\", 1);\n            token.attrs = [\n                [\n                    \"href\",\n                    fullUrl\n                ]\n            ];\n            token.markup = \"autolink\";\n            token.info = \"auto\";\n            token = state.push(\"text\", \"\", 0);\n            token.content = state.md.normalizeLinkText(url);\n            token = state.push(\"link_close\", \"a\", -1);\n            token.markup = \"autolink\";\n            token.info = \"auto\";\n        }\n        state.pos += url.length + 2;\n        return true;\n    }\n    return false;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3J1bGVzX2lubGluZS9hdXRvbGluay5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxQ0FBcUM7QUFFckM7QUFHQSxrQkFBa0IsR0FDbEIsSUFBSUEsV0FBYztBQUNsQixJQUFJQyxjQUFjO0FBR2xCQyxPQUFPQyxPQUFPLEdBQUcsU0FBU0MsU0FBU0MsS0FBSyxFQUFFQyxNQUFNO0lBQzlDLElBQUlDLEtBQUtDLFNBQVNDLE9BQU9DLElBQUlDLE9BQU9DLEtBQ2hDQyxNQUFNUixNQUFNUSxHQUFHO0lBRW5CLElBQUlSLE1BQU1TLEdBQUcsQ0FBQ0MsVUFBVSxDQUFDRixTQUFTLEtBQUksS0FBSyxLQUFJO1FBQUUsT0FBTztJQUFPO0lBRS9ERixRQUFRTixNQUFNUSxHQUFHO0lBQ2pCRCxNQUFNUCxNQUFNVyxNQUFNO0lBRWxCLE9BQVM7UUFDUCxJQUFJLEVBQUVILE9BQU9ELEtBQUssT0FBTztRQUV6QkYsS0FBS0wsTUFBTVMsR0FBRyxDQUFDQyxVQUFVLENBQUNGO1FBRTFCLElBQUlILE9BQU8sS0FBSyxLQUFLLEtBQUksT0FBTztRQUNoQyxJQUFJQSxPQUFPLEtBQUssS0FBSyxLQUFJO0lBQzNCO0lBRUFILE1BQU1GLE1BQU1TLEdBQUcsQ0FBQ0csS0FBSyxDQUFDTixRQUFRLEdBQUdFO0lBRWpDLElBQUlaLFlBQVlpQixJQUFJLENBQUNYLE1BQU07UUFDekJDLFVBQVVILE1BQU1jLEVBQUUsQ0FBQ0MsYUFBYSxDQUFDYjtRQUNqQyxJQUFJLENBQUNGLE1BQU1jLEVBQUUsQ0FBQ0UsWUFBWSxDQUFDYixVQUFVO1lBQUUsT0FBTztRQUFPO1FBRXJELElBQUksQ0FBQ0YsUUFBUTtZQUNYRyxRQUFnQkosTUFBTWlCLElBQUksQ0FBQyxhQUFhLEtBQUs7WUFDN0NiLE1BQU1jLEtBQUssR0FBSztnQkFBRTtvQkFBRTtvQkFBUWY7aUJBQVM7YUFBRTtZQUN2Q0MsTUFBTWUsTUFBTSxHQUFJO1lBQ2hCZixNQUFNZ0IsSUFBSSxHQUFNO1lBRWhCaEIsUUFBZ0JKLE1BQU1pQixJQUFJLENBQUMsUUFBUSxJQUFJO1lBQ3ZDYixNQUFNaUIsT0FBTyxHQUFHckIsTUFBTWMsRUFBRSxDQUFDUSxpQkFBaUIsQ0FBQ3BCO1lBRTNDRSxRQUFnQkosTUFBTWlCLElBQUksQ0FBQyxjQUFjLEtBQUssQ0FBQztZQUMvQ2IsTUFBTWUsTUFBTSxHQUFJO1lBQ2hCZixNQUFNZ0IsSUFBSSxHQUFNO1FBQ2xCO1FBRUFwQixNQUFNUSxHQUFHLElBQUlOLElBQUlxQixNQUFNLEdBQUc7UUFDMUIsT0FBTztJQUNUO0lBRUEsSUFBSTVCLFNBQVNrQixJQUFJLENBQUNYLE1BQU07UUFDdEJDLFVBQVVILE1BQU1jLEVBQUUsQ0FBQ0MsYUFBYSxDQUFDLFlBQVliO1FBQzdDLElBQUksQ0FBQ0YsTUFBTWMsRUFBRSxDQUFDRSxZQUFZLENBQUNiLFVBQVU7WUFBRSxPQUFPO1FBQU87UUFFckQsSUFBSSxDQUFDRixRQUFRO1lBQ1hHLFFBQWdCSixNQUFNaUIsSUFBSSxDQUFDLGFBQWEsS0FBSztZQUM3Q2IsTUFBTWMsS0FBSyxHQUFLO2dCQUFFO29CQUFFO29CQUFRZjtpQkFBUzthQUFFO1lBQ3ZDQyxNQUFNZSxNQUFNLEdBQUk7WUFDaEJmLE1BQU1nQixJQUFJLEdBQU07WUFFaEJoQixRQUFnQkosTUFBTWlCLElBQUksQ0FBQyxRQUFRLElBQUk7WUFDdkNiLE1BQU1pQixPQUFPLEdBQUdyQixNQUFNYyxFQUFFLENBQUNRLGlCQUFpQixDQUFDcEI7WUFFM0NFLFFBQWdCSixNQUFNaUIsSUFBSSxDQUFDLGNBQWMsS0FBSyxDQUFDO1lBQy9DYixNQUFNZSxNQUFNLEdBQUk7WUFDaEJmLE1BQU1nQixJQUFJLEdBQU07UUFDbEI7UUFFQXBCLE1BQU1RLEdBQUcsSUFBSU4sSUFBSXFCLE1BQU0sR0FBRztRQUMxQixPQUFPO0lBQ1Q7SUFFQSxPQUFPO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9nLy4vbm9kZV9tb2R1bGVzL21hcmtkb3duLWl0L2xpYi9ydWxlc19pbmxpbmUvYXV0b2xpbmsuanM/ZWFjYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBQcm9jZXNzIGF1dG9saW5rcyAnPHByb3RvY29sOi4uLj4nXG5cbid1c2Ugc3RyaWN0JztcblxuXG4vKmVzbGludCBtYXgtbGVuOjAqL1xudmFyIEVNQUlMX1JFICAgID0gL14oW2EtekEtWjAtOS4hIyQlJicqK1xcLz0/Xl9ge3x9fi1dK0BbYS16QS1aMC05XSg/OlthLXpBLVowLTktXXswLDYxfVthLXpBLVowLTldKT8oPzpcXC5bYS16QS1aMC05XSg/OlthLXpBLVowLTktXXswLDYxfVthLXpBLVowLTldKT8pKikkLztcbnZhciBBVVRPTElOS19SRSA9IC9eKFthLXpBLVpdW2EtekEtWjAtOSsuXFwtXXsxLDMxfSk6KFtePD5cXHgwMC1cXHgyMF0qKSQvO1xuXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYXV0b2xpbmsoc3RhdGUsIHNpbGVudCkge1xuICB2YXIgdXJsLCBmdWxsVXJsLCB0b2tlbiwgY2gsIHN0YXJ0LCBtYXgsXG4gICAgICBwb3MgPSBzdGF0ZS5wb3M7XG5cbiAgaWYgKHN0YXRlLnNyYy5jaGFyQ29kZUF0KHBvcykgIT09IDB4M0MvKiA8ICovKSB7IHJldHVybiBmYWxzZTsgfVxuXG4gIHN0YXJ0ID0gc3RhdGUucG9zO1xuICBtYXggPSBzdGF0ZS5wb3NNYXg7XG5cbiAgZm9yICg7Oykge1xuICAgIGlmICgrK3BvcyA+PSBtYXgpIHJldHVybiBmYWxzZTtcblxuICAgIGNoID0gc3RhdGUuc3JjLmNoYXJDb2RlQXQocG9zKTtcblxuICAgIGlmIChjaCA9PT0gMHgzQyAvKiA8ICovKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKGNoID09PSAweDNFIC8qID4gKi8pIGJyZWFrO1xuICB9XG5cbiAgdXJsID0gc3RhdGUuc3JjLnNsaWNlKHN0YXJ0ICsgMSwgcG9zKTtcblxuICBpZiAoQVVUT0xJTktfUkUudGVzdCh1cmwpKSB7XG4gICAgZnVsbFVybCA9IHN0YXRlLm1kLm5vcm1hbGl6ZUxpbmsodXJsKTtcbiAgICBpZiAoIXN0YXRlLm1kLnZhbGlkYXRlTGluayhmdWxsVXJsKSkgeyByZXR1cm4gZmFsc2U7IH1cblxuICAgIGlmICghc2lsZW50KSB7XG4gICAgICB0b2tlbiAgICAgICAgID0gc3RhdGUucHVzaCgnbGlua19vcGVuJywgJ2EnLCAxKTtcbiAgICAgIHRva2VuLmF0dHJzICAgPSBbIFsgJ2hyZWYnLCBmdWxsVXJsIF0gXTtcbiAgICAgIHRva2VuLm1hcmt1cCAgPSAnYXV0b2xpbmsnO1xuICAgICAgdG9rZW4uaW5mbyAgICA9ICdhdXRvJztcblxuICAgICAgdG9rZW4gICAgICAgICA9IHN0YXRlLnB1c2goJ3RleHQnLCAnJywgMCk7XG4gICAgICB0b2tlbi5jb250ZW50ID0gc3RhdGUubWQubm9ybWFsaXplTGlua1RleHQodXJsKTtcblxuICAgICAgdG9rZW4gICAgICAgICA9IHN0YXRlLnB1c2goJ2xpbmtfY2xvc2UnLCAnYScsIC0xKTtcbiAgICAgIHRva2VuLm1hcmt1cCAgPSAnYXV0b2xpbmsnO1xuICAgICAgdG9rZW4uaW5mbyAgICA9ICdhdXRvJztcbiAgICB9XG5cbiAgICBzdGF0ZS5wb3MgKz0gdXJsLmxlbmd0aCArIDI7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAoRU1BSUxfUkUudGVzdCh1cmwpKSB7XG4gICAgZnVsbFVybCA9IHN0YXRlLm1kLm5vcm1hbGl6ZUxpbmsoJ21haWx0bzonICsgdXJsKTtcbiAgICBpZiAoIXN0YXRlLm1kLnZhbGlkYXRlTGluayhmdWxsVXJsKSkgeyByZXR1cm4gZmFsc2U7IH1cblxuICAgIGlmICghc2lsZW50KSB7XG4gICAgICB0b2tlbiAgICAgICAgID0gc3RhdGUucHVzaCgnbGlua19vcGVuJywgJ2EnLCAxKTtcbiAgICAgIHRva2VuLmF0dHJzICAgPSBbIFsgJ2hyZWYnLCBmdWxsVXJsIF0gXTtcbiAgICAgIHRva2VuLm1hcmt1cCAgPSAnYXV0b2xpbmsnO1xuICAgICAgdG9rZW4uaW5mbyAgICA9ICdhdXRvJztcblxuICAgICAgdG9rZW4gICAgICAgICA9IHN0YXRlLnB1c2goJ3RleHQnLCAnJywgMCk7XG4gICAgICB0b2tlbi5jb250ZW50ID0gc3RhdGUubWQubm9ybWFsaXplTGlua1RleHQodXJsKTtcblxuICAgICAgdG9rZW4gICAgICAgICA9IHN0YXRlLnB1c2goJ2xpbmtfY2xvc2UnLCAnYScsIC0xKTtcbiAgICAgIHRva2VuLm1hcmt1cCAgPSAnYXV0b2xpbmsnO1xuICAgICAgdG9rZW4uaW5mbyAgICA9ICdhdXRvJztcbiAgICB9XG5cbiAgICBzdGF0ZS5wb3MgKz0gdXJsLmxlbmd0aCArIDI7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59O1xuIl0sIm5hbWVzIjpbIkVNQUlMX1JFIiwiQVVUT0xJTktfUkUiLCJtb2R1bGUiLCJleHBvcnRzIiwiYXV0b2xpbmsiLCJzdGF0ZSIsInNpbGVudCIsInVybCIsImZ1bGxVcmwiLCJ0b2tlbiIsImNoIiwic3RhcnQiLCJtYXgiLCJwb3MiLCJzcmMiLCJjaGFyQ29kZUF0IiwicG9zTWF4Iiwic2xpY2UiLCJ0ZXN0IiwibWQiLCJub3JtYWxpemVMaW5rIiwidmFsaWRhdGVMaW5rIiwicHVzaCIsImF0dHJzIiwibWFya3VwIiwiaW5mbyIsImNvbnRlbnQiLCJub3JtYWxpemVMaW5rVGV4dCIsImxlbmd0aCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/markdown-it/lib/rules_inline/autolink.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/markdown-it/lib/rules_inline/backticks.js":
/*!****************************************************************!*\
  !*** ./node_modules/markdown-it/lib/rules_inline/backticks.js ***!
  \****************************************************************/
/***/ ((module) => {

eval("// Parse backticks\n\nmodule.exports = function backtick(state, silent) {\n    var start, max, marker, token, matchStart, matchEnd, openerLength, closerLength, pos = state.pos, ch = state.src.charCodeAt(pos);\n    if (ch !== 0x60 /* ` */ ) {\n        return false;\n    }\n    start = pos;\n    pos++;\n    max = state.posMax;\n    // scan marker length\n    while(pos < max && state.src.charCodeAt(pos) === 0x60 /* ` */ ){\n        pos++;\n    }\n    marker = state.src.slice(start, pos);\n    openerLength = marker.length;\n    if (state.backticksScanned && (state.backticks[openerLength] || 0) <= start) {\n        if (!silent) state.pending += marker;\n        state.pos += openerLength;\n        return true;\n    }\n    matchEnd = pos;\n    // Nothing found in the cache, scan until the end of the line (or until marker is found)\n    while((matchStart = state.src.indexOf(\"`\", matchEnd)) !== -1){\n        matchEnd = matchStart + 1;\n        // scan marker length\n        while(matchEnd < max && state.src.charCodeAt(matchEnd) === 0x60 /* ` */ ){\n            matchEnd++;\n        }\n        closerLength = matchEnd - matchStart;\n        if (closerLength === openerLength) {\n            // Found matching closer length.\n            if (!silent) {\n                token = state.push(\"code_inline\", \"code\", 0);\n                token.markup = marker;\n                token.content = state.src.slice(pos, matchStart).replace(/\\n/g, \" \").replace(/^ (.+) $/, \"$1\");\n            }\n            state.pos = matchEnd;\n            return true;\n        }\n        // Some different length found, put it in cache as upper limit of where closer can be found\n        state.backticks[closerLength] = matchStart;\n    }\n    // Scanned through the end, didn't find anything\n    state.backticksScanned = true;\n    if (!silent) state.pending += marker;\n    state.pos += openerLength;\n    return true;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3J1bGVzX2lubGluZS9iYWNrdGlja3MuanMiLCJtYXBwaW5ncyI6IkFBQUEsa0JBQWtCO0FBRWxCO0FBR0FBLE9BQU9DLE9BQU8sR0FBRyxTQUFTQyxTQUFTQyxLQUFLLEVBQUVDLE1BQU07SUFDOUMsSUFBSUMsT0FBT0MsS0FBS0MsUUFBUUMsT0FBT0MsWUFBWUMsVUFBVUMsY0FBY0MsY0FDL0RDLE1BQU1WLE1BQU1VLEdBQUcsRUFDZkMsS0FBS1gsTUFBTVksR0FBRyxDQUFDQyxVQUFVLENBQUNIO0lBRTlCLElBQUlDLE9BQU8sS0FBSSxLQUFLLEtBQUk7UUFBRSxPQUFPO0lBQU87SUFFeENULFFBQVFRO0lBQ1JBO0lBQ0FQLE1BQU1ILE1BQU1jLE1BQU07SUFFbEIscUJBQXFCO0lBQ3JCLE1BQU9KLE1BQU1QLE9BQU9ILE1BQU1ZLEdBQUcsQ0FBQ0MsVUFBVSxDQUFDSCxTQUFTLEtBQUksS0FBSyxJQUFJO1FBQUVBO0lBQU87SUFFeEVOLFNBQVNKLE1BQU1ZLEdBQUcsQ0FBQ0csS0FBSyxDQUFDYixPQUFPUTtJQUNoQ0YsZUFBZUosT0FBT1ksTUFBTTtJQUU1QixJQUFJaEIsTUFBTWlCLGdCQUFnQixJQUFJLENBQUNqQixNQUFNa0IsU0FBUyxDQUFDVixhQUFhLElBQUksTUFBTU4sT0FBTztRQUMzRSxJQUFJLENBQUNELFFBQVFELE1BQU1tQixPQUFPLElBQUlmO1FBQzlCSixNQUFNVSxHQUFHLElBQUlGO1FBQ2IsT0FBTztJQUNUO0lBRUFELFdBQVdHO0lBRVgsd0ZBQXdGO0lBQ3hGLE1BQU8sQ0FBQ0osYUFBYU4sTUFBTVksR0FBRyxDQUFDUSxPQUFPLENBQUMsS0FBS2IsU0FBUSxNQUFPLENBQUMsRUFBRztRQUM3REEsV0FBV0QsYUFBYTtRQUV4QixxQkFBcUI7UUFDckIsTUFBT0MsV0FBV0osT0FBT0gsTUFBTVksR0FBRyxDQUFDQyxVQUFVLENBQUNOLGNBQWMsS0FBSSxLQUFLLElBQUk7WUFBRUE7UUFBWTtRQUV2RkUsZUFBZUYsV0FBV0Q7UUFFMUIsSUFBSUcsaUJBQWlCRCxjQUFjO1lBQ2pDLGdDQUFnQztZQUNoQyxJQUFJLENBQUNQLFFBQVE7Z0JBQ1hJLFFBQVlMLE1BQU1xQixJQUFJLENBQUMsZUFBZSxRQUFRO2dCQUM5Q2hCLE1BQU1pQixNQUFNLEdBQUlsQjtnQkFDaEJDLE1BQU1rQixPQUFPLEdBQUd2QixNQUFNWSxHQUFHLENBQUNHLEtBQUssQ0FBQ0wsS0FBS0osWUFDbENrQixPQUFPLENBQUMsT0FBTyxLQUNmQSxPQUFPLENBQUMsWUFBWTtZQUN6QjtZQUNBeEIsTUFBTVUsR0FBRyxHQUFHSDtZQUNaLE9BQU87UUFDVDtRQUVBLDJGQUEyRjtRQUMzRlAsTUFBTWtCLFNBQVMsQ0FBQ1QsYUFBYSxHQUFHSDtJQUNsQztJQUVBLGdEQUFnRDtJQUNoRE4sTUFBTWlCLGdCQUFnQixHQUFHO0lBRXpCLElBQUksQ0FBQ2hCLFFBQVFELE1BQU1tQixPQUFPLElBQUlmO0lBQzlCSixNQUFNVSxHQUFHLElBQUlGO0lBQ2IsT0FBTztBQUNUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvZy8uL25vZGVfbW9kdWxlcy9tYXJrZG93bi1pdC9saWIvcnVsZXNfaW5saW5lL2JhY2t0aWNrcy5qcz8yYjMyIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFBhcnNlIGJhY2t0aWNrc1xuXG4ndXNlIHN0cmljdCc7XG5cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBiYWNrdGljayhzdGF0ZSwgc2lsZW50KSB7XG4gIHZhciBzdGFydCwgbWF4LCBtYXJrZXIsIHRva2VuLCBtYXRjaFN0YXJ0LCBtYXRjaEVuZCwgb3BlbmVyTGVuZ3RoLCBjbG9zZXJMZW5ndGgsXG4gICAgICBwb3MgPSBzdGF0ZS5wb3MsXG4gICAgICBjaCA9IHN0YXRlLnNyYy5jaGFyQ29kZUF0KHBvcyk7XG5cbiAgaWYgKGNoICE9PSAweDYwLyogYCAqLykgeyByZXR1cm4gZmFsc2U7IH1cblxuICBzdGFydCA9IHBvcztcbiAgcG9zKys7XG4gIG1heCA9IHN0YXRlLnBvc01heDtcblxuICAvLyBzY2FuIG1hcmtlciBsZW5ndGhcbiAgd2hpbGUgKHBvcyA8IG1heCAmJiBzdGF0ZS5zcmMuY2hhckNvZGVBdChwb3MpID09PSAweDYwLyogYCAqLykgeyBwb3MrKzsgfVxuXG4gIG1hcmtlciA9IHN0YXRlLnNyYy5zbGljZShzdGFydCwgcG9zKTtcbiAgb3BlbmVyTGVuZ3RoID0gbWFya2VyLmxlbmd0aDtcblxuICBpZiAoc3RhdGUuYmFja3RpY2tzU2Nhbm5lZCAmJiAoc3RhdGUuYmFja3RpY2tzW29wZW5lckxlbmd0aF0gfHwgMCkgPD0gc3RhcnQpIHtcbiAgICBpZiAoIXNpbGVudCkgc3RhdGUucGVuZGluZyArPSBtYXJrZXI7XG4gICAgc3RhdGUucG9zICs9IG9wZW5lckxlbmd0aDtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIG1hdGNoRW5kID0gcG9zO1xuXG4gIC8vIE5vdGhpbmcgZm91bmQgaW4gdGhlIGNhY2hlLCBzY2FuIHVudGlsIHRoZSBlbmQgb2YgdGhlIGxpbmUgKG9yIHVudGlsIG1hcmtlciBpcyBmb3VuZClcbiAgd2hpbGUgKChtYXRjaFN0YXJ0ID0gc3RhdGUuc3JjLmluZGV4T2YoJ2AnLCBtYXRjaEVuZCkpICE9PSAtMSkge1xuICAgIG1hdGNoRW5kID0gbWF0Y2hTdGFydCArIDE7XG5cbiAgICAvLyBzY2FuIG1hcmtlciBsZW5ndGhcbiAgICB3aGlsZSAobWF0Y2hFbmQgPCBtYXggJiYgc3RhdGUuc3JjLmNoYXJDb2RlQXQobWF0Y2hFbmQpID09PSAweDYwLyogYCAqLykgeyBtYXRjaEVuZCsrOyB9XG5cbiAgICBjbG9zZXJMZW5ndGggPSBtYXRjaEVuZCAtIG1hdGNoU3RhcnQ7XG5cbiAgICBpZiAoY2xvc2VyTGVuZ3RoID09PSBvcGVuZXJMZW5ndGgpIHtcbiAgICAgIC8vIEZvdW5kIG1hdGNoaW5nIGNsb3NlciBsZW5ndGguXG4gICAgICBpZiAoIXNpbGVudCkge1xuICAgICAgICB0b2tlbiAgICAgPSBzdGF0ZS5wdXNoKCdjb2RlX2lubGluZScsICdjb2RlJywgMCk7XG4gICAgICAgIHRva2VuLm1hcmt1cCAgPSBtYXJrZXI7XG4gICAgICAgIHRva2VuLmNvbnRlbnQgPSBzdGF0ZS5zcmMuc2xpY2UocG9zLCBtYXRjaFN0YXJ0KVxuICAgICAgICAgIC5yZXBsYWNlKC9cXG4vZywgJyAnKVxuICAgICAgICAgIC5yZXBsYWNlKC9eICguKykgJC8sICckMScpO1xuICAgICAgfVxuICAgICAgc3RhdGUucG9zID0gbWF0Y2hFbmQ7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBTb21lIGRpZmZlcmVudCBsZW5ndGggZm91bmQsIHB1dCBpdCBpbiBjYWNoZSBhcyB1cHBlciBsaW1pdCBvZiB3aGVyZSBjbG9zZXIgY2FuIGJlIGZvdW5kXG4gICAgc3RhdGUuYmFja3RpY2tzW2Nsb3Nlckxlbmd0aF0gPSBtYXRjaFN0YXJ0O1xuICB9XG5cbiAgLy8gU2Nhbm5lZCB0aHJvdWdoIHRoZSBlbmQsIGRpZG4ndCBmaW5kIGFueXRoaW5nXG4gIHN0YXRlLmJhY2t0aWNrc1NjYW5uZWQgPSB0cnVlO1xuXG4gIGlmICghc2lsZW50KSBzdGF0ZS5wZW5kaW5nICs9IG1hcmtlcjtcbiAgc3RhdGUucG9zICs9IG9wZW5lckxlbmd0aDtcbiAgcmV0dXJuIHRydWU7XG59O1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJiYWNrdGljayIsInN0YXRlIiwic2lsZW50Iiwic3RhcnQiLCJtYXgiLCJtYXJrZXIiLCJ0b2tlbiIsIm1hdGNoU3RhcnQiLCJtYXRjaEVuZCIsIm9wZW5lckxlbmd0aCIsImNsb3Nlckxlbmd0aCIsInBvcyIsImNoIiwic3JjIiwiY2hhckNvZGVBdCIsInBvc01heCIsInNsaWNlIiwibGVuZ3RoIiwiYmFja3RpY2tzU2Nhbm5lZCIsImJhY2t0aWNrcyIsInBlbmRpbmciLCJpbmRleE9mIiwicHVzaCIsIm1hcmt1cCIsImNvbnRlbnQiLCJyZXBsYWNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/markdown-it/lib/rules_inline/backticks.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/markdown-it/lib/rules_inline/balance_pairs.js":
/*!********************************************************************!*\
  !*** ./node_modules/markdown-it/lib/rules_inline/balance_pairs.js ***!
  \********************************************************************/
/***/ ((module) => {

eval("// For each opening emphasis-like marker find a matching closing one\n//\n\nfunction processDelimiters(delimiters) {\n    var closerIdx, openerIdx, closer, opener, minOpenerIdx, newMinOpenerIdx, isOddMatch, lastJump, openersBottom = {}, max = delimiters.length;\n    if (!max) return;\n    // headerIdx is the first delimiter of the current (where closer is) delimiter run\n    var headerIdx = 0;\n    var lastTokenIdx = -2; // needs any value lower than -1\n    var jumps = [];\n    for(closerIdx = 0; closerIdx < max; closerIdx++){\n        closer = delimiters[closerIdx];\n        jumps.push(0);\n        // markers belong to same delimiter run if:\n        //  - they have adjacent tokens\n        //  - AND markers are the same\n        //\n        if (delimiters[headerIdx].marker !== closer.marker || lastTokenIdx !== closer.token - 1) {\n            headerIdx = closerIdx;\n        }\n        lastTokenIdx = closer.token;\n        // Length is only used for emphasis-specific \"rule of 3\",\n        // if it's not defined (in strikethrough or 3rd party plugins),\n        // we can default it to 0 to disable those checks.\n        //\n        closer.length = closer.length || 0;\n        if (!closer.close) continue;\n        // Previously calculated lower bounds (previous fails)\n        // for each marker, each delimiter length modulo 3,\n        // and for whether this closer can be an opener;\n        // https://github.com/commonmark/cmark/commit/34250e12ccebdc6372b8b49c44fab57c72443460\n        if (!openersBottom.hasOwnProperty(closer.marker)) {\n            openersBottom[closer.marker] = [\n                -1,\n                -1,\n                -1,\n                -1,\n                -1,\n                -1\n            ];\n        }\n        minOpenerIdx = openersBottom[closer.marker][(closer.open ? 3 : 0) + closer.length % 3];\n        openerIdx = headerIdx - jumps[headerIdx] - 1;\n        newMinOpenerIdx = openerIdx;\n        for(; openerIdx > minOpenerIdx; openerIdx -= jumps[openerIdx] + 1){\n            opener = delimiters[openerIdx];\n            if (opener.marker !== closer.marker) continue;\n            if (opener.open && opener.end < 0) {\n                isOddMatch = false;\n                // from spec:\n                //\n                // If one of the delimiters can both open and close emphasis, then the\n                // sum of the lengths of the delimiter runs containing the opening and\n                // closing delimiters must not be a multiple of 3 unless both lengths\n                // are multiples of 3.\n                //\n                if (opener.close || closer.open) {\n                    if ((opener.length + closer.length) % 3 === 0) {\n                        if (opener.length % 3 !== 0 || closer.length % 3 !== 0) {\n                            isOddMatch = true;\n                        }\n                    }\n                }\n                if (!isOddMatch) {\n                    // If previous delimiter cannot be an opener, we can safely skip\n                    // the entire sequence in future checks. This is required to make\n                    // sure algorithm has linear complexity (see *_*_*_*_*_... case).\n                    //\n                    lastJump = openerIdx > 0 && !delimiters[openerIdx - 1].open ? jumps[openerIdx - 1] + 1 : 0;\n                    jumps[closerIdx] = closerIdx - openerIdx + lastJump;\n                    jumps[openerIdx] = lastJump;\n                    closer.open = false;\n                    opener.end = closerIdx;\n                    opener.close = false;\n                    newMinOpenerIdx = -1;\n                    // treat next token as start of run,\n                    // it optimizes skips in **<...>**a**<...>** pathological case\n                    lastTokenIdx = -2;\n                    break;\n                }\n            }\n        }\n        if (newMinOpenerIdx !== -1) {\n            // If match for this delimiter run failed, we want to set lower bound for\n            // future lookups. This is required to make sure algorithm has linear\n            // complexity.\n            //\n            // See details here:\n            // https://github.com/commonmark/cmark/issues/178#issuecomment-270417442\n            //\n            openersBottom[closer.marker][(closer.open ? 3 : 0) + (closer.length || 0) % 3] = newMinOpenerIdx;\n        }\n    }\n}\nmodule.exports = function link_pairs(state) {\n    var curr, tokens_meta = state.tokens_meta, max = state.tokens_meta.length;\n    processDelimiters(state.delimiters);\n    for(curr = 0; curr < max; curr++){\n        if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n            processDelimiters(tokens_meta[curr].delimiters);\n        }\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3J1bGVzX2lubGluZS9iYWxhbmNlX3BhaXJzLmpzIiwibWFwcGluZ3MiOiJBQUFBLG9FQUFvRTtBQUNwRSxFQUFFO0FBQ0Y7QUFHQSxTQUFTQSxrQkFBa0JDLFVBQVU7SUFDbkMsSUFBSUMsV0FBV0MsV0FBV0MsUUFBUUMsUUFBUUMsY0FBY0MsaUJBQ3BEQyxZQUFZQyxVQUNaQyxnQkFBZ0IsQ0FBQyxHQUNqQkMsTUFBTVYsV0FBV1csTUFBTTtJQUUzQixJQUFJLENBQUNELEtBQUs7SUFFVixrRkFBa0Y7SUFDbEYsSUFBSUUsWUFBWTtJQUNoQixJQUFJQyxlQUFlLENBQUMsR0FBRyxnQ0FBZ0M7SUFDdkQsSUFBSUMsUUFBUSxFQUFFO0lBRWQsSUFBS2IsWUFBWSxHQUFHQSxZQUFZUyxLQUFLVCxZQUFhO1FBQ2hERSxTQUFTSCxVQUFVLENBQUNDLFVBQVU7UUFFOUJhLE1BQU1DLElBQUksQ0FBQztRQUVYLDJDQUEyQztRQUMzQywrQkFBK0I7UUFDL0IsOEJBQThCO1FBQzlCLEVBQUU7UUFDRixJQUFJZixVQUFVLENBQUNZLFVBQVUsQ0FBQ0ksTUFBTSxLQUFLYixPQUFPYSxNQUFNLElBQUlILGlCQUFpQlYsT0FBT2MsS0FBSyxHQUFHLEdBQUc7WUFDdkZMLFlBQVlYO1FBQ2Q7UUFFQVksZUFBZVYsT0FBT2MsS0FBSztRQUUzQix5REFBeUQ7UUFDekQsK0RBQStEO1FBQy9ELGtEQUFrRDtRQUNsRCxFQUFFO1FBQ0ZkLE9BQU9RLE1BQU0sR0FBR1IsT0FBT1EsTUFBTSxJQUFJO1FBRWpDLElBQUksQ0FBQ1IsT0FBT2UsS0FBSyxFQUFFO1FBRW5CLHNEQUFzRDtRQUN0RCxtREFBbUQ7UUFDbkQsZ0RBQWdEO1FBQ2hELHNGQUFzRjtRQUN0RixJQUFJLENBQUNULGNBQWNVLGNBQWMsQ0FBQ2hCLE9BQU9hLE1BQU0sR0FBRztZQUNoRFAsYUFBYSxDQUFDTixPQUFPYSxNQUFNLENBQUMsR0FBRztnQkFBRSxDQUFDO2dCQUFHLENBQUM7Z0JBQUcsQ0FBQztnQkFBRyxDQUFDO2dCQUFHLENBQUM7Z0JBQUcsQ0FBQzthQUFHO1FBQzNEO1FBRUFYLGVBQWVJLGFBQWEsQ0FBQ04sT0FBT2EsTUFBTSxDQUFDLENBQUMsQ0FBQ2IsT0FBT2lCLElBQUksR0FBRyxJQUFJLEtBQU1qQixPQUFPUSxNQUFNLEdBQUcsRUFBRztRQUV4RlQsWUFBWVUsWUFBWUUsS0FBSyxDQUFDRixVQUFVLEdBQUc7UUFFM0NOLGtCQUFrQko7UUFFbEIsTUFBT0EsWUFBWUcsY0FBY0gsYUFBYVksS0FBSyxDQUFDWixVQUFVLEdBQUcsRUFBRztZQUNsRUUsU0FBU0osVUFBVSxDQUFDRSxVQUFVO1lBRTlCLElBQUlFLE9BQU9ZLE1BQU0sS0FBS2IsT0FBT2EsTUFBTSxFQUFFO1lBRXJDLElBQUlaLE9BQU9nQixJQUFJLElBQUloQixPQUFPaUIsR0FBRyxHQUFHLEdBQUc7Z0JBRWpDZCxhQUFhO2dCQUViLGFBQWE7Z0JBQ2IsRUFBRTtnQkFDRixzRUFBc0U7Z0JBQ3RFLHNFQUFzRTtnQkFDdEUscUVBQXFFO2dCQUNyRSxzQkFBc0I7Z0JBQ3RCLEVBQUU7Z0JBQ0YsSUFBSUgsT0FBT2MsS0FBSyxJQUFJZixPQUFPaUIsSUFBSSxFQUFFO29CQUMvQixJQUFJLENBQUNoQixPQUFPTyxNQUFNLEdBQUdSLE9BQU9RLE1BQU0sSUFBSSxNQUFNLEdBQUc7d0JBQzdDLElBQUlQLE9BQU9PLE1BQU0sR0FBRyxNQUFNLEtBQUtSLE9BQU9RLE1BQU0sR0FBRyxNQUFNLEdBQUc7NEJBQ3RESixhQUFhO3dCQUNmO29CQUNGO2dCQUNGO2dCQUVBLElBQUksQ0FBQ0EsWUFBWTtvQkFDZixnRUFBZ0U7b0JBQ2hFLGlFQUFpRTtvQkFDakUsaUVBQWlFO29CQUNqRSxFQUFFO29CQUNGQyxXQUFXTixZQUFZLEtBQUssQ0FBQ0YsVUFBVSxDQUFDRSxZQUFZLEVBQUUsQ0FBQ2tCLElBQUksR0FDekROLEtBQUssQ0FBQ1osWUFBWSxFQUFFLEdBQUcsSUFDdkI7b0JBRUZZLEtBQUssQ0FBQ2IsVUFBVSxHQUFHQSxZQUFZQyxZQUFZTTtvQkFDM0NNLEtBQUssQ0FBQ1osVUFBVSxHQUFHTTtvQkFFbkJMLE9BQU9pQixJQUFJLEdBQUk7b0JBQ2ZoQixPQUFPaUIsR0FBRyxHQUFLcEI7b0JBQ2ZHLE9BQU9jLEtBQUssR0FBRztvQkFDZlosa0JBQWtCLENBQUM7b0JBQ25CLG9DQUFvQztvQkFDcEMsOERBQThEO29CQUM5RE8sZUFBZSxDQUFDO29CQUNoQjtnQkFDRjtZQUNGO1FBQ0Y7UUFFQSxJQUFJUCxvQkFBb0IsQ0FBQyxHQUFHO1lBQzFCLHlFQUF5RTtZQUN6RSxxRUFBcUU7WUFDckUsY0FBYztZQUNkLEVBQUU7WUFDRixvQkFBb0I7WUFDcEIsd0VBQXdFO1lBQ3hFLEVBQUU7WUFDRkcsYUFBYSxDQUFDTixPQUFPYSxNQUFNLENBQUMsQ0FBQyxDQUFDYixPQUFPaUIsSUFBSSxHQUFHLElBQUksS0FBTSxDQUFDakIsT0FBT1EsTUFBTSxJQUFJLEtBQUssRUFBRyxHQUFHTDtRQUNyRjtJQUNGO0FBQ0Y7QUFHQWdCLE9BQU9DLE9BQU8sR0FBRyxTQUFTQyxXQUFXQyxLQUFLO0lBQ3hDLElBQUlDLE1BQ0FDLGNBQWNGLE1BQU1FLFdBQVcsRUFDL0JqQixNQUFNZSxNQUFNRSxXQUFXLENBQUNoQixNQUFNO0lBRWxDWixrQkFBa0IwQixNQUFNekIsVUFBVTtJQUVsQyxJQUFLMEIsT0FBTyxHQUFHQSxPQUFPaEIsS0FBS2dCLE9BQVE7UUFDakMsSUFBSUMsV0FBVyxDQUFDRCxLQUFLLElBQUlDLFdBQVcsQ0FBQ0QsS0FBSyxDQUFDMUIsVUFBVSxFQUFFO1lBQ3JERCxrQkFBa0I0QixXQUFXLENBQUNELEtBQUssQ0FBQzFCLFVBQVU7UUFDaEQ7SUFDRjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvZy8uL25vZGVfbW9kdWxlcy9tYXJrZG93bi1pdC9saWIvcnVsZXNfaW5saW5lL2JhbGFuY2VfcGFpcnMuanM/Mzk2ZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGb3IgZWFjaCBvcGVuaW5nIGVtcGhhc2lzLWxpa2UgbWFya2VyIGZpbmQgYSBtYXRjaGluZyBjbG9zaW5nIG9uZVxuLy9cbid1c2Ugc3RyaWN0JztcblxuXG5mdW5jdGlvbiBwcm9jZXNzRGVsaW1pdGVycyhkZWxpbWl0ZXJzKSB7XG4gIHZhciBjbG9zZXJJZHgsIG9wZW5lcklkeCwgY2xvc2VyLCBvcGVuZXIsIG1pbk9wZW5lcklkeCwgbmV3TWluT3BlbmVySWR4LFxuICAgICAgaXNPZGRNYXRjaCwgbGFzdEp1bXAsXG4gICAgICBvcGVuZXJzQm90dG9tID0ge30sXG4gICAgICBtYXggPSBkZWxpbWl0ZXJzLmxlbmd0aDtcblxuICBpZiAoIW1heCkgcmV0dXJuO1xuXG4gIC8vIGhlYWRlcklkeCBpcyB0aGUgZmlyc3QgZGVsaW1pdGVyIG9mIHRoZSBjdXJyZW50ICh3aGVyZSBjbG9zZXIgaXMpIGRlbGltaXRlciBydW5cbiAgdmFyIGhlYWRlcklkeCA9IDA7XG4gIHZhciBsYXN0VG9rZW5JZHggPSAtMjsgLy8gbmVlZHMgYW55IHZhbHVlIGxvd2VyIHRoYW4gLTFcbiAgdmFyIGp1bXBzID0gW107XG5cbiAgZm9yIChjbG9zZXJJZHggPSAwOyBjbG9zZXJJZHggPCBtYXg7IGNsb3NlcklkeCsrKSB7XG4gICAgY2xvc2VyID0gZGVsaW1pdGVyc1tjbG9zZXJJZHhdO1xuXG4gICAganVtcHMucHVzaCgwKTtcblxuICAgIC8vIG1hcmtlcnMgYmVsb25nIHRvIHNhbWUgZGVsaW1pdGVyIHJ1biBpZjpcbiAgICAvLyAgLSB0aGV5IGhhdmUgYWRqYWNlbnQgdG9rZW5zXG4gICAgLy8gIC0gQU5EIG1hcmtlcnMgYXJlIHRoZSBzYW1lXG4gICAgLy9cbiAgICBpZiAoZGVsaW1pdGVyc1toZWFkZXJJZHhdLm1hcmtlciAhPT0gY2xvc2VyLm1hcmtlciB8fCBsYXN0VG9rZW5JZHggIT09IGNsb3Nlci50b2tlbiAtIDEpIHtcbiAgICAgIGhlYWRlcklkeCA9IGNsb3NlcklkeDtcbiAgICB9XG5cbiAgICBsYXN0VG9rZW5JZHggPSBjbG9zZXIudG9rZW47XG5cbiAgICAvLyBMZW5ndGggaXMgb25seSB1c2VkIGZvciBlbXBoYXNpcy1zcGVjaWZpYyBcInJ1bGUgb2YgM1wiLFxuICAgIC8vIGlmIGl0J3Mgbm90IGRlZmluZWQgKGluIHN0cmlrZXRocm91Z2ggb3IgM3JkIHBhcnR5IHBsdWdpbnMpLFxuICAgIC8vIHdlIGNhbiBkZWZhdWx0IGl0IHRvIDAgdG8gZGlzYWJsZSB0aG9zZSBjaGVja3MuXG4gICAgLy9cbiAgICBjbG9zZXIubGVuZ3RoID0gY2xvc2VyLmxlbmd0aCB8fCAwO1xuXG4gICAgaWYgKCFjbG9zZXIuY2xvc2UpIGNvbnRpbnVlO1xuXG4gICAgLy8gUHJldmlvdXNseSBjYWxjdWxhdGVkIGxvd2VyIGJvdW5kcyAocHJldmlvdXMgZmFpbHMpXG4gICAgLy8gZm9yIGVhY2ggbWFya2VyLCBlYWNoIGRlbGltaXRlciBsZW5ndGggbW9kdWxvIDMsXG4gICAgLy8gYW5kIGZvciB3aGV0aGVyIHRoaXMgY2xvc2VyIGNhbiBiZSBhbiBvcGVuZXI7XG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2NvbW1vbm1hcmsvY21hcmsvY29tbWl0LzM0MjUwZTEyY2NlYmRjNjM3MmI4YjQ5YzQ0ZmFiNTdjNzI0NDM0NjBcbiAgICBpZiAoIW9wZW5lcnNCb3R0b20uaGFzT3duUHJvcGVydHkoY2xvc2VyLm1hcmtlcikpIHtcbiAgICAgIG9wZW5lcnNCb3R0b21bY2xvc2VyLm1hcmtlcl0gPSBbIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEgXTtcbiAgICB9XG5cbiAgICBtaW5PcGVuZXJJZHggPSBvcGVuZXJzQm90dG9tW2Nsb3Nlci5tYXJrZXJdWyhjbG9zZXIub3BlbiA/IDMgOiAwKSArIChjbG9zZXIubGVuZ3RoICUgMyldO1xuXG4gICAgb3BlbmVySWR4ID0gaGVhZGVySWR4IC0ganVtcHNbaGVhZGVySWR4XSAtIDE7XG5cbiAgICBuZXdNaW5PcGVuZXJJZHggPSBvcGVuZXJJZHg7XG5cbiAgICBmb3IgKDsgb3BlbmVySWR4ID4gbWluT3BlbmVySWR4OyBvcGVuZXJJZHggLT0ganVtcHNbb3BlbmVySWR4XSArIDEpIHtcbiAgICAgIG9wZW5lciA9IGRlbGltaXRlcnNbb3BlbmVySWR4XTtcblxuICAgICAgaWYgKG9wZW5lci5tYXJrZXIgIT09IGNsb3Nlci5tYXJrZXIpIGNvbnRpbnVlO1xuXG4gICAgICBpZiAob3BlbmVyLm9wZW4gJiYgb3BlbmVyLmVuZCA8IDApIHtcblxuICAgICAgICBpc09kZE1hdGNoID0gZmFsc2U7XG5cbiAgICAgICAgLy8gZnJvbSBzcGVjOlxuICAgICAgICAvL1xuICAgICAgICAvLyBJZiBvbmUgb2YgdGhlIGRlbGltaXRlcnMgY2FuIGJvdGggb3BlbiBhbmQgY2xvc2UgZW1waGFzaXMsIHRoZW4gdGhlXG4gICAgICAgIC8vIHN1bSBvZiB0aGUgbGVuZ3RocyBvZiB0aGUgZGVsaW1pdGVyIHJ1bnMgY29udGFpbmluZyB0aGUgb3BlbmluZyBhbmRcbiAgICAgICAgLy8gY2xvc2luZyBkZWxpbWl0ZXJzIG11c3Qgbm90IGJlIGEgbXVsdGlwbGUgb2YgMyB1bmxlc3MgYm90aCBsZW5ndGhzXG4gICAgICAgIC8vIGFyZSBtdWx0aXBsZXMgb2YgMy5cbiAgICAgICAgLy9cbiAgICAgICAgaWYgKG9wZW5lci5jbG9zZSB8fCBjbG9zZXIub3Blbikge1xuICAgICAgICAgIGlmICgob3BlbmVyLmxlbmd0aCArIGNsb3Nlci5sZW5ndGgpICUgMyA9PT0gMCkge1xuICAgICAgICAgICAgaWYgKG9wZW5lci5sZW5ndGggJSAzICE9PSAwIHx8IGNsb3Nlci5sZW5ndGggJSAzICE9PSAwKSB7XG4gICAgICAgICAgICAgIGlzT2RkTWF0Y2ggPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghaXNPZGRNYXRjaCkge1xuICAgICAgICAgIC8vIElmIHByZXZpb3VzIGRlbGltaXRlciBjYW5ub3QgYmUgYW4gb3BlbmVyLCB3ZSBjYW4gc2FmZWx5IHNraXBcbiAgICAgICAgICAvLyB0aGUgZW50aXJlIHNlcXVlbmNlIGluIGZ1dHVyZSBjaGVja3MuIFRoaXMgaXMgcmVxdWlyZWQgdG8gbWFrZVxuICAgICAgICAgIC8vIHN1cmUgYWxnb3JpdGhtIGhhcyBsaW5lYXIgY29tcGxleGl0eSAoc2VlICpfKl8qXypfKl8uLi4gY2FzZSkuXG4gICAgICAgICAgLy9cbiAgICAgICAgICBsYXN0SnVtcCA9IG9wZW5lcklkeCA+IDAgJiYgIWRlbGltaXRlcnNbb3BlbmVySWR4IC0gMV0ub3BlbiA/XG4gICAgICAgICAgICBqdW1wc1tvcGVuZXJJZHggLSAxXSArIDEgOlxuICAgICAgICAgICAgMDtcblxuICAgICAgICAgIGp1bXBzW2Nsb3NlcklkeF0gPSBjbG9zZXJJZHggLSBvcGVuZXJJZHggKyBsYXN0SnVtcDtcbiAgICAgICAgICBqdW1wc1tvcGVuZXJJZHhdID0gbGFzdEp1bXA7XG5cbiAgICAgICAgICBjbG9zZXIub3BlbiAgPSBmYWxzZTtcbiAgICAgICAgICBvcGVuZXIuZW5kICAgPSBjbG9zZXJJZHg7XG4gICAgICAgICAgb3BlbmVyLmNsb3NlID0gZmFsc2U7XG4gICAgICAgICAgbmV3TWluT3BlbmVySWR4ID0gLTE7XG4gICAgICAgICAgLy8gdHJlYXQgbmV4dCB0b2tlbiBhcyBzdGFydCBvZiBydW4sXG4gICAgICAgICAgLy8gaXQgb3B0aW1pemVzIHNraXBzIGluICoqPC4uLj4qKmEqKjwuLi4+KiogcGF0aG9sb2dpY2FsIGNhc2VcbiAgICAgICAgICBsYXN0VG9rZW5JZHggPSAtMjtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChuZXdNaW5PcGVuZXJJZHggIT09IC0xKSB7XG4gICAgICAvLyBJZiBtYXRjaCBmb3IgdGhpcyBkZWxpbWl0ZXIgcnVuIGZhaWxlZCwgd2Ugd2FudCB0byBzZXQgbG93ZXIgYm91bmQgZm9yXG4gICAgICAvLyBmdXR1cmUgbG9va3Vwcy4gVGhpcyBpcyByZXF1aXJlZCB0byBtYWtlIHN1cmUgYWxnb3JpdGhtIGhhcyBsaW5lYXJcbiAgICAgIC8vIGNvbXBsZXhpdHkuXG4gICAgICAvL1xuICAgICAgLy8gU2VlIGRldGFpbHMgaGVyZTpcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9jb21tb25tYXJrL2NtYXJrL2lzc3Vlcy8xNzgjaXNzdWVjb21tZW50LTI3MDQxNzQ0MlxuICAgICAgLy9cbiAgICAgIG9wZW5lcnNCb3R0b21bY2xvc2VyLm1hcmtlcl1bKGNsb3Nlci5vcGVuID8gMyA6IDApICsgKChjbG9zZXIubGVuZ3RoIHx8IDApICUgMyldID0gbmV3TWluT3BlbmVySWR4O1xuICAgIH1cbiAgfVxufVxuXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbGlua19wYWlycyhzdGF0ZSkge1xuICB2YXIgY3VycixcbiAgICAgIHRva2Vuc19tZXRhID0gc3RhdGUudG9rZW5zX21ldGEsXG4gICAgICBtYXggPSBzdGF0ZS50b2tlbnNfbWV0YS5sZW5ndGg7XG5cbiAgcHJvY2Vzc0RlbGltaXRlcnMoc3RhdGUuZGVsaW1pdGVycyk7XG5cbiAgZm9yIChjdXJyID0gMDsgY3VyciA8IG1heDsgY3VycisrKSB7XG4gICAgaWYgKHRva2Vuc19tZXRhW2N1cnJdICYmIHRva2Vuc19tZXRhW2N1cnJdLmRlbGltaXRlcnMpIHtcbiAgICAgIHByb2Nlc3NEZWxpbWl0ZXJzKHRva2Vuc19tZXRhW2N1cnJdLmRlbGltaXRlcnMpO1xuICAgIH1cbiAgfVxufTtcbiJdLCJuYW1lcyI6WyJwcm9jZXNzRGVsaW1pdGVycyIsImRlbGltaXRlcnMiLCJjbG9zZXJJZHgiLCJvcGVuZXJJZHgiLCJjbG9zZXIiLCJvcGVuZXIiLCJtaW5PcGVuZXJJZHgiLCJuZXdNaW5PcGVuZXJJZHgiLCJpc09kZE1hdGNoIiwibGFzdEp1bXAiLCJvcGVuZXJzQm90dG9tIiwibWF4IiwibGVuZ3RoIiwiaGVhZGVySWR4IiwibGFzdFRva2VuSWR4IiwianVtcHMiLCJwdXNoIiwibWFya2VyIiwidG9rZW4iLCJjbG9zZSIsImhhc093blByb3BlcnR5Iiwib3BlbiIsImVuZCIsIm1vZHVsZSIsImV4cG9ydHMiLCJsaW5rX3BhaXJzIiwic3RhdGUiLCJjdXJyIiwidG9rZW5zX21ldGEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/markdown-it/lib/rules_inline/balance_pairs.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/markdown-it/lib/rules_inline/emphasis.js":
/*!***************************************************************!*\
  !*** ./node_modules/markdown-it/lib/rules_inline/emphasis.js ***!
  \***************************************************************/
/***/ ((module) => {

eval("// Process *this* and _that_\n//\n\n// Insert each marker as a separate text token, and add it to delimiter list\n//\nmodule.exports.tokenize = function emphasis(state, silent) {\n    var i, scanned, token, start = state.pos, marker = state.src.charCodeAt(start);\n    if (silent) {\n        return false;\n    }\n    if (marker !== 0x5F /* _ */  && marker !== 0x2A /* * */ ) {\n        return false;\n    }\n    scanned = state.scanDelims(state.pos, marker === 0x2A);\n    for(i = 0; i < scanned.length; i++){\n        token = state.push(\"text\", \"\", 0);\n        token.content = String.fromCharCode(marker);\n        state.delimiters.push({\n            // Char code of the starting marker (number).\n            //\n            marker: marker,\n            // Total length of these series of delimiters.\n            //\n            length: scanned.length,\n            // A position of the token this delimiter corresponds to.\n            //\n            token: state.tokens.length - 1,\n            // If this delimiter is matched as a valid opener, `end` will be\n            // equal to its position, otherwise it's `-1`.\n            //\n            end: -1,\n            // Boolean flags that determine if this delimiter could open or close\n            // an emphasis.\n            //\n            open: scanned.can_open,\n            close: scanned.can_close\n        });\n    }\n    state.pos += scanned.length;\n    return true;\n};\nfunction postProcess(state, delimiters) {\n    var i, startDelim, endDelim, token, ch, isStrong, max = delimiters.length;\n    for(i = max - 1; i >= 0; i--){\n        startDelim = delimiters[i];\n        if (startDelim.marker !== 0x5F /* _ */  && startDelim.marker !== 0x2A /* * */ ) {\n            continue;\n        }\n        // Process only opening markers\n        if (startDelim.end === -1) {\n            continue;\n        }\n        endDelim = delimiters[startDelim.end];\n        // If the previous delimiter has the same marker and is adjacent to this one,\n        // merge those into one strong delimiter.\n        //\n        // `<em><em>whatever</em></em>` -> `<strong>whatever</strong>`\n        //\n        isStrong = i > 0 && delimiters[i - 1].end === startDelim.end + 1 && // check that first two markers match and adjacent\n        delimiters[i - 1].marker === startDelim.marker && delimiters[i - 1].token === startDelim.token - 1 && // check that last two markers are adjacent (we can safely assume they match)\n        delimiters[startDelim.end + 1].token === endDelim.token + 1;\n        ch = String.fromCharCode(startDelim.marker);\n        token = state.tokens[startDelim.token];\n        token.type = isStrong ? \"strong_open\" : \"em_open\";\n        token.tag = isStrong ? \"strong\" : \"em\";\n        token.nesting = 1;\n        token.markup = isStrong ? ch + ch : ch;\n        token.content = \"\";\n        token = state.tokens[endDelim.token];\n        token.type = isStrong ? \"strong_close\" : \"em_close\";\n        token.tag = isStrong ? \"strong\" : \"em\";\n        token.nesting = -1;\n        token.markup = isStrong ? ch + ch : ch;\n        token.content = \"\";\n        if (isStrong) {\n            state.tokens[delimiters[i - 1].token].content = \"\";\n            state.tokens[delimiters[startDelim.end + 1].token].content = \"\";\n            i--;\n        }\n    }\n}\n// Walk through delimiter list and replace text tokens with tags\n//\nmodule.exports.postProcess = function emphasis(state) {\n    var curr, tokens_meta = state.tokens_meta, max = state.tokens_meta.length;\n    postProcess(state, state.delimiters);\n    for(curr = 0; curr < max; curr++){\n        if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n            postProcess(state, tokens_meta[curr].delimiters);\n        }\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/markdown-it/lib/rules_inline/emphasis.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/markdown-it/lib/rules_inline/entity.js":
/*!*************************************************************!*\
  !*** ./node_modules/markdown-it/lib/rules_inline/entity.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Process html entity - &#123;, &#xAF;, &quot;, ...\n\nvar entities = __webpack_require__(/*! ../common/entities */ \"(rsc)/./node_modules/markdown-it/lib/common/entities.js\");\nvar has = (__webpack_require__(/*! ../common/utils */ \"(rsc)/./node_modules/markdown-it/lib/common/utils.js\").has);\nvar isValidEntityCode = (__webpack_require__(/*! ../common/utils */ \"(rsc)/./node_modules/markdown-it/lib/common/utils.js\").isValidEntityCode);\nvar fromCodePoint = (__webpack_require__(/*! ../common/utils */ \"(rsc)/./node_modules/markdown-it/lib/common/utils.js\").fromCodePoint);\nvar DIGITAL_RE = /^&#((?:x[a-f0-9]{1,6}|[0-9]{1,7}));/i;\nvar NAMED_RE = /^&([a-z][a-z0-9]{1,31});/i;\nmodule.exports = function entity(state, silent) {\n    var ch, code, match, token, pos = state.pos, max = state.posMax;\n    if (state.src.charCodeAt(pos) !== 0x26 /* & */ ) return false;\n    if (pos + 1 >= max) return false;\n    ch = state.src.charCodeAt(pos + 1);\n    if (ch === 0x23 /* # */ ) {\n        match = state.src.slice(pos).match(DIGITAL_RE);\n        if (match) {\n            if (!silent) {\n                code = match[1][0].toLowerCase() === \"x\" ? parseInt(match[1].slice(1), 16) : parseInt(match[1], 10);\n                token = state.push(\"text_special\", \"\", 0);\n                token.content = isValidEntityCode(code) ? fromCodePoint(code) : fromCodePoint(0xFFFD);\n                token.markup = match[0];\n                token.info = \"entity\";\n            }\n            state.pos += match[0].length;\n            return true;\n        }\n    } else {\n        match = state.src.slice(pos).match(NAMED_RE);\n        if (match) {\n            if (has(entities, match[1])) {\n                if (!silent) {\n                    token = state.push(\"text_special\", \"\", 0);\n                    token.content = entities[match[1]];\n                    token.markup = match[0];\n                    token.info = \"entity\";\n                }\n                state.pos += match[0].length;\n                return true;\n            }\n        }\n    }\n    return false;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3J1bGVzX2lubGluZS9lbnRpdHkuanMiLCJtYXBwaW5ncyI6IkFBQUEsb0RBQW9EO0FBRXBEO0FBRUEsSUFBSUEsV0FBb0JDLG1CQUFPQSxDQUFDO0FBQ2hDLElBQUlDLE1BQW9CRCx3R0FBOEI7QUFDdEQsSUFBSUUsb0JBQW9CRixzSEFBNEM7QUFDcEUsSUFBSUcsZ0JBQW9CSCxrSEFBd0M7QUFHaEUsSUFBSUksYUFBYTtBQUNqQixJQUFJQyxXQUFhO0FBR2pCQyxPQUFPQyxPQUFPLEdBQUcsU0FBU0MsT0FBT0MsS0FBSyxFQUFFQyxNQUFNO0lBQzVDLElBQUlDLElBQUlDLE1BQU1DLE9BQU9DLE9BQU9DLE1BQU1OLE1BQU1NLEdBQUcsRUFBRUMsTUFBTVAsTUFBTVEsTUFBTTtJQUUvRCxJQUFJUixNQUFNUyxHQUFHLENBQUNDLFVBQVUsQ0FBQ0osU0FBUyxLQUFJLEtBQUssS0FBSSxPQUFPO0lBRXRELElBQUlBLE1BQU0sS0FBS0MsS0FBSyxPQUFPO0lBRTNCTCxLQUFLRixNQUFNUyxHQUFHLENBQUNDLFVBQVUsQ0FBQ0osTUFBTTtJQUVoQyxJQUFJSixPQUFPLEtBQUssS0FBSyxLQUFJO1FBQ3ZCRSxRQUFRSixNQUFNUyxHQUFHLENBQUNFLEtBQUssQ0FBQ0wsS0FBS0YsS0FBSyxDQUFDVDtRQUNuQyxJQUFJUyxPQUFPO1lBQ1QsSUFBSSxDQUFDSCxRQUFRO2dCQUNYRSxPQUFPQyxLQUFLLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQ1EsV0FBVyxPQUFPLE1BQU1DLFNBQVNULEtBQUssQ0FBQyxFQUFFLENBQUNPLEtBQUssQ0FBQyxJQUFJLE1BQU1FLFNBQVNULEtBQUssQ0FBQyxFQUFFLEVBQUU7Z0JBRWhHQyxRQUFnQkwsTUFBTWMsSUFBSSxDQUFDLGdCQUFnQixJQUFJO2dCQUMvQ1QsTUFBTVUsT0FBTyxHQUFHdEIsa0JBQWtCVSxRQUFRVCxjQUFjUyxRQUFRVCxjQUFjO2dCQUM5RVcsTUFBTVcsTUFBTSxHQUFJWixLQUFLLENBQUMsRUFBRTtnQkFDeEJDLE1BQU1ZLElBQUksR0FBTTtZQUNsQjtZQUNBakIsTUFBTU0sR0FBRyxJQUFJRixLQUFLLENBQUMsRUFBRSxDQUFDYyxNQUFNO1lBQzVCLE9BQU87UUFDVDtJQUNGLE9BQU87UUFDTGQsUUFBUUosTUFBTVMsR0FBRyxDQUFDRSxLQUFLLENBQUNMLEtBQUtGLEtBQUssQ0FBQ1I7UUFDbkMsSUFBSVEsT0FBTztZQUNULElBQUlaLElBQUlGLFVBQVVjLEtBQUssQ0FBQyxFQUFFLEdBQUc7Z0JBQzNCLElBQUksQ0FBQ0gsUUFBUTtvQkFDWEksUUFBZ0JMLE1BQU1jLElBQUksQ0FBQyxnQkFBZ0IsSUFBSTtvQkFDL0NULE1BQU1VLE9BQU8sR0FBR3pCLFFBQVEsQ0FBQ2MsS0FBSyxDQUFDLEVBQUUsQ0FBQztvQkFDbENDLE1BQU1XLE1BQU0sR0FBSVosS0FBSyxDQUFDLEVBQUU7b0JBQ3hCQyxNQUFNWSxJQUFJLEdBQU07Z0JBQ2xCO2dCQUNBakIsTUFBTU0sR0FBRyxJQUFJRixLQUFLLENBQUMsRUFBRSxDQUFDYyxNQUFNO2dCQUM1QixPQUFPO1lBQ1Q7UUFDRjtJQUNGO0lBRUEsT0FBTztBQUNUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvZy8uL25vZGVfbW9kdWxlcy9tYXJrZG93bi1pdC9saWIvcnVsZXNfaW5saW5lL2VudGl0eS5qcz82NDIxIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFByb2Nlc3MgaHRtbCBlbnRpdHkgLSAmIzEyMzssICYjeEFGOywgJnF1b3Q7LCAuLi5cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW50aXRpZXMgICAgICAgICAgPSByZXF1aXJlKCcuLi9jb21tb24vZW50aXRpZXMnKTtcbnZhciBoYXMgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4uL2NvbW1vbi91dGlscycpLmhhcztcbnZhciBpc1ZhbGlkRW50aXR5Q29kZSA9IHJlcXVpcmUoJy4uL2NvbW1vbi91dGlscycpLmlzVmFsaWRFbnRpdHlDb2RlO1xudmFyIGZyb21Db2RlUG9pbnQgICAgID0gcmVxdWlyZSgnLi4vY29tbW9uL3V0aWxzJykuZnJvbUNvZGVQb2ludDtcblxuXG52YXIgRElHSVRBTF9SRSA9IC9eJiMoKD86eFthLWYwLTldezEsNn18WzAtOV17MSw3fSkpOy9pO1xudmFyIE5BTUVEX1JFICAgPSAvXiYoW2Etel1bYS16MC05XXsxLDMxfSk7L2k7XG5cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBlbnRpdHkoc3RhdGUsIHNpbGVudCkge1xuICB2YXIgY2gsIGNvZGUsIG1hdGNoLCB0b2tlbiwgcG9zID0gc3RhdGUucG9zLCBtYXggPSBzdGF0ZS5wb3NNYXg7XG5cbiAgaWYgKHN0YXRlLnNyYy5jaGFyQ29kZUF0KHBvcykgIT09IDB4MjYvKiAmICovKSByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKHBvcyArIDEgPj0gbWF4KSByZXR1cm4gZmFsc2U7XG5cbiAgY2ggPSBzdGF0ZS5zcmMuY2hhckNvZGVBdChwb3MgKyAxKTtcblxuICBpZiAoY2ggPT09IDB4MjMgLyogIyAqLykge1xuICAgIG1hdGNoID0gc3RhdGUuc3JjLnNsaWNlKHBvcykubWF0Y2goRElHSVRBTF9SRSk7XG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICBpZiAoIXNpbGVudCkge1xuICAgICAgICBjb2RlID0gbWF0Y2hbMV1bMF0udG9Mb3dlckNhc2UoKSA9PT0gJ3gnID8gcGFyc2VJbnQobWF0Y2hbMV0uc2xpY2UoMSksIDE2KSA6IHBhcnNlSW50KG1hdGNoWzFdLCAxMCk7XG5cbiAgICAgICAgdG9rZW4gICAgICAgICA9IHN0YXRlLnB1c2goJ3RleHRfc3BlY2lhbCcsICcnLCAwKTtcbiAgICAgICAgdG9rZW4uY29udGVudCA9IGlzVmFsaWRFbnRpdHlDb2RlKGNvZGUpID8gZnJvbUNvZGVQb2ludChjb2RlKSA6IGZyb21Db2RlUG9pbnQoMHhGRkZEKTtcbiAgICAgICAgdG9rZW4ubWFya3VwICA9IG1hdGNoWzBdO1xuICAgICAgICB0b2tlbi5pbmZvICAgID0gJ2VudGl0eSc7XG4gICAgICB9XG4gICAgICBzdGF0ZS5wb3MgKz0gbWF0Y2hbMF0ubGVuZ3RoO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIG1hdGNoID0gc3RhdGUuc3JjLnNsaWNlKHBvcykubWF0Y2goTkFNRURfUkUpO1xuICAgIGlmIChtYXRjaCkge1xuICAgICAgaWYgKGhhcyhlbnRpdGllcywgbWF0Y2hbMV0pKSB7XG4gICAgICAgIGlmICghc2lsZW50KSB7XG4gICAgICAgICAgdG9rZW4gICAgICAgICA9IHN0YXRlLnB1c2goJ3RleHRfc3BlY2lhbCcsICcnLCAwKTtcbiAgICAgICAgICB0b2tlbi5jb250ZW50ID0gZW50aXRpZXNbbWF0Y2hbMV1dO1xuICAgICAgICAgIHRva2VuLm1hcmt1cCAgPSBtYXRjaFswXTtcbiAgICAgICAgICB0b2tlbi5pbmZvICAgID0gJ2VudGl0eSc7XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGUucG9zICs9IG1hdGNoWzBdLmxlbmd0aDtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufTtcbiJdLCJuYW1lcyI6WyJlbnRpdGllcyIsInJlcXVpcmUiLCJoYXMiLCJpc1ZhbGlkRW50aXR5Q29kZSIsImZyb21Db2RlUG9pbnQiLCJESUdJVEFMX1JFIiwiTkFNRURfUkUiLCJtb2R1bGUiLCJleHBvcnRzIiwiZW50aXR5Iiwic3RhdGUiLCJzaWxlbnQiLCJjaCIsImNvZGUiLCJtYXRjaCIsInRva2VuIiwicG9zIiwibWF4IiwicG9zTWF4Iiwic3JjIiwiY2hhckNvZGVBdCIsInNsaWNlIiwidG9Mb3dlckNhc2UiLCJwYXJzZUludCIsInB1c2giLCJjb250ZW50IiwibWFya3VwIiwiaW5mbyIsImxlbmd0aCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/markdown-it/lib/rules_inline/entity.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/markdown-it/lib/rules_inline/escape.js":
/*!*************************************************************!*\
  !*** ./node_modules/markdown-it/lib/rules_inline/escape.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Process escaped chars and hardbreaks\n\nvar isSpace = (__webpack_require__(/*! ../common/utils */ \"(rsc)/./node_modules/markdown-it/lib/common/utils.js\").isSpace);\nvar ESCAPED = [];\nfor(var i = 0; i < 256; i++){\n    ESCAPED.push(0);\n}\n\"\\\\!\\\"#$%&'()*+,./:;<=>?@[]^_`{|}~-\".split(\"\").forEach(function(ch) {\n    ESCAPED[ch.charCodeAt(0)] = 1;\n});\nmodule.exports = function escape(state, silent) {\n    var ch1, ch2, origStr, escapedStr, token, pos = state.pos, max = state.posMax;\n    if (state.src.charCodeAt(pos) !== 0x5C /* \\ */ ) return false;\n    pos++;\n    // '\\' at the end of the inline block\n    if (pos >= max) return false;\n    ch1 = state.src.charCodeAt(pos);\n    if (ch1 === 0x0A) {\n        if (!silent) {\n            state.push(\"hardbreak\", \"br\", 0);\n        }\n        pos++;\n        // skip leading whitespaces from next line\n        while(pos < max){\n            ch1 = state.src.charCodeAt(pos);\n            if (!isSpace(ch1)) break;\n            pos++;\n        }\n        state.pos = pos;\n        return true;\n    }\n    escapedStr = state.src[pos];\n    if (ch1 >= 0xD800 && ch1 <= 0xDBFF && pos + 1 < max) {\n        ch2 = state.src.charCodeAt(pos + 1);\n        if (ch2 >= 0xDC00 && ch2 <= 0xDFFF) {\n            escapedStr += state.src[pos + 1];\n            pos++;\n        }\n    }\n    origStr = \"\\\\\" + escapedStr;\n    if (!silent) {\n        token = state.push(\"text_special\", \"\", 0);\n        if (ch1 < 256 && ESCAPED[ch1] !== 0) {\n            token.content = escapedStr;\n        } else {\n            token.content = origStr;\n        }\n        token.markup = origStr;\n        token.info = \"escape\";\n    }\n    state.pos = pos + 1;\n    return true;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3J1bGVzX2lubGluZS9lc2NhcGUuanMiLCJtYXBwaW5ncyI6IkFBQUEsdUNBQXVDO0FBRXZDO0FBRUEsSUFBSUEsVUFBVUMsNEdBQWtDO0FBRWhELElBQUlDLFVBQVUsRUFBRTtBQUVoQixJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSSxLQUFLQSxJQUFLO0lBQUVELFFBQVFFLElBQUksQ0FBQztBQUFJO0FBRWpELHFDQUNHQyxLQUFLLENBQUMsSUFBSUMsT0FBTyxDQUFDLFNBQVVDLEVBQUU7SUFBSUwsT0FBTyxDQUFDSyxHQUFHQyxVQUFVLENBQUMsR0FBRyxHQUFHO0FBQUc7QUFHcEVDLE9BQU9DLE9BQU8sR0FBRyxTQUFTQyxPQUFPQyxLQUFLLEVBQUVDLE1BQU07SUFDNUMsSUFBSUMsS0FBS0MsS0FBS0MsU0FBU0MsWUFBWUMsT0FBT0MsTUFBTVAsTUFBTU8sR0FBRyxFQUFFQyxNQUFNUixNQUFNUyxNQUFNO0lBRTdFLElBQUlULE1BQU1VLEdBQUcsQ0FBQ2QsVUFBVSxDQUFDVyxTQUFTLEtBQUksS0FBSyxLQUFJLE9BQU87SUFDdERBO0lBRUEscUNBQXFDO0lBQ3JDLElBQUlBLE9BQU9DLEtBQUssT0FBTztJQUV2Qk4sTUFBTUYsTUFBTVUsR0FBRyxDQUFDZCxVQUFVLENBQUNXO0lBRTNCLElBQUlMLFFBQVEsTUFBTTtRQUNoQixJQUFJLENBQUNELFFBQVE7WUFDWEQsTUFBTVIsSUFBSSxDQUFDLGFBQWEsTUFBTTtRQUNoQztRQUVBZTtRQUNBLDBDQUEwQztRQUMxQyxNQUFPQSxNQUFNQyxJQUFLO1lBQ2hCTixNQUFNRixNQUFNVSxHQUFHLENBQUNkLFVBQVUsQ0FBQ1c7WUFDM0IsSUFBSSxDQUFDbkIsUUFBUWMsTUFBTTtZQUNuQks7UUFDRjtRQUVBUCxNQUFNTyxHQUFHLEdBQUdBO1FBQ1osT0FBTztJQUNUO0lBRUFGLGFBQWFMLE1BQU1VLEdBQUcsQ0FBQ0gsSUFBSTtJQUUzQixJQUFJTCxPQUFPLFVBQVVBLE9BQU8sVUFBVUssTUFBTSxJQUFJQyxLQUFLO1FBQ25ETCxNQUFNSCxNQUFNVSxHQUFHLENBQUNkLFVBQVUsQ0FBQ1csTUFBTTtRQUVqQyxJQUFJSixPQUFPLFVBQVVBLE9BQU8sUUFBUTtZQUNsQ0UsY0FBY0wsTUFBTVUsR0FBRyxDQUFDSCxNQUFNLEVBQUU7WUFDaENBO1FBQ0Y7SUFDRjtJQUVBSCxVQUFVLE9BQU9DO0lBRWpCLElBQUksQ0FBQ0osUUFBUTtRQUNYSyxRQUFRTixNQUFNUixJQUFJLENBQUMsZ0JBQWdCLElBQUk7UUFFdkMsSUFBSVUsTUFBTSxPQUFPWixPQUFPLENBQUNZLElBQUksS0FBSyxHQUFHO1lBQ25DSSxNQUFNSyxPQUFPLEdBQUdOO1FBQ2xCLE9BQU87WUFDTEMsTUFBTUssT0FBTyxHQUFHUDtRQUNsQjtRQUVBRSxNQUFNTSxNQUFNLEdBQUdSO1FBQ2ZFLE1BQU1PLElBQUksR0FBSztJQUNqQjtJQUVBYixNQUFNTyxHQUFHLEdBQUdBLE1BQU07SUFDbEIsT0FBTztBQUNUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvZy8uL25vZGVfbW9kdWxlcy9tYXJrZG93bi1pdC9saWIvcnVsZXNfaW5saW5lL2VzY2FwZS5qcz9kZWZiIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFByb2Nlc3MgZXNjYXBlZCBjaGFycyBhbmQgaGFyZGJyZWFrc1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBpc1NwYWNlID0gcmVxdWlyZSgnLi4vY29tbW9uL3V0aWxzJykuaXNTcGFjZTtcblxudmFyIEVTQ0FQRUQgPSBbXTtcblxuZm9yICh2YXIgaSA9IDA7IGkgPCAyNTY7IGkrKykgeyBFU0NBUEVELnB1c2goMCk7IH1cblxuJ1xcXFwhXCIjJCUmXFwnKCkqKywuLzo7PD0+P0BbXV5fYHt8fX4tJ1xuICAuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGNoKSB7IEVTQ0FQRURbY2guY2hhckNvZGVBdCgwKV0gPSAxOyB9KTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGVzY2FwZShzdGF0ZSwgc2lsZW50KSB7XG4gIHZhciBjaDEsIGNoMiwgb3JpZ1N0ciwgZXNjYXBlZFN0ciwgdG9rZW4sIHBvcyA9IHN0YXRlLnBvcywgbWF4ID0gc3RhdGUucG9zTWF4O1xuXG4gIGlmIChzdGF0ZS5zcmMuY2hhckNvZGVBdChwb3MpICE9PSAweDVDLyogXFwgKi8pIHJldHVybiBmYWxzZTtcbiAgcG9zKys7XG5cbiAgLy8gJ1xcJyBhdCB0aGUgZW5kIG9mIHRoZSBpbmxpbmUgYmxvY2tcbiAgaWYgKHBvcyA+PSBtYXgpIHJldHVybiBmYWxzZTtcblxuICBjaDEgPSBzdGF0ZS5zcmMuY2hhckNvZGVBdChwb3MpO1xuXG4gIGlmIChjaDEgPT09IDB4MEEpIHtcbiAgICBpZiAoIXNpbGVudCkge1xuICAgICAgc3RhdGUucHVzaCgnaGFyZGJyZWFrJywgJ2JyJywgMCk7XG4gICAgfVxuXG4gICAgcG9zKys7XG4gICAgLy8gc2tpcCBsZWFkaW5nIHdoaXRlc3BhY2VzIGZyb20gbmV4dCBsaW5lXG4gICAgd2hpbGUgKHBvcyA8IG1heCkge1xuICAgICAgY2gxID0gc3RhdGUuc3JjLmNoYXJDb2RlQXQocG9zKTtcbiAgICAgIGlmICghaXNTcGFjZShjaDEpKSBicmVhaztcbiAgICAgIHBvcysrO1xuICAgIH1cblxuICAgIHN0YXRlLnBvcyA9IHBvcztcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGVzY2FwZWRTdHIgPSBzdGF0ZS5zcmNbcG9zXTtcblxuICBpZiAoY2gxID49IDB4RDgwMCAmJiBjaDEgPD0gMHhEQkZGICYmIHBvcyArIDEgPCBtYXgpIHtcbiAgICBjaDIgPSBzdGF0ZS5zcmMuY2hhckNvZGVBdChwb3MgKyAxKTtcblxuICAgIGlmIChjaDIgPj0gMHhEQzAwICYmIGNoMiA8PSAweERGRkYpIHtcbiAgICAgIGVzY2FwZWRTdHIgKz0gc3RhdGUuc3JjW3BvcyArIDFdO1xuICAgICAgcG9zKys7XG4gICAgfVxuICB9XG5cbiAgb3JpZ1N0ciA9ICdcXFxcJyArIGVzY2FwZWRTdHI7XG5cbiAgaWYgKCFzaWxlbnQpIHtcbiAgICB0b2tlbiA9IHN0YXRlLnB1c2goJ3RleHRfc3BlY2lhbCcsICcnLCAwKTtcblxuICAgIGlmIChjaDEgPCAyNTYgJiYgRVNDQVBFRFtjaDFdICE9PSAwKSB7XG4gICAgICB0b2tlbi5jb250ZW50ID0gZXNjYXBlZFN0cjtcbiAgICB9IGVsc2Uge1xuICAgICAgdG9rZW4uY29udGVudCA9IG9yaWdTdHI7XG4gICAgfVxuXG4gICAgdG9rZW4ubWFya3VwID0gb3JpZ1N0cjtcbiAgICB0b2tlbi5pbmZvICAgPSAnZXNjYXBlJztcbiAgfVxuXG4gIHN0YXRlLnBvcyA9IHBvcyArIDE7XG4gIHJldHVybiB0cnVlO1xufTtcbiJdLCJuYW1lcyI6WyJpc1NwYWNlIiwicmVxdWlyZSIsIkVTQ0FQRUQiLCJpIiwicHVzaCIsInNwbGl0IiwiZm9yRWFjaCIsImNoIiwiY2hhckNvZGVBdCIsIm1vZHVsZSIsImV4cG9ydHMiLCJlc2NhcGUiLCJzdGF0ZSIsInNpbGVudCIsImNoMSIsImNoMiIsIm9yaWdTdHIiLCJlc2NhcGVkU3RyIiwidG9rZW4iLCJwb3MiLCJtYXgiLCJwb3NNYXgiLCJzcmMiLCJjb250ZW50IiwibWFya3VwIiwiaW5mbyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/markdown-it/lib/rules_inline/escape.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/markdown-it/lib/rules_inline/fragments_join.js":
/*!*********************************************************************!*\
  !*** ./node_modules/markdown-it/lib/rules_inline/fragments_join.js ***!
  \*********************************************************************/
/***/ ((module) => {

eval("// Clean up tokens after emphasis and strikethrough postprocessing:\n// merge adjacent text nodes into one and re-calculate all token levels\n//\n// This is necessary because initially emphasis delimiter markers (*, _, ~)\n// are treated as their own separate text tokens. Then emphasis rule either\n// leaves them as text (needed to merge with adjacent text) or turns them\n// into opening/closing tags (which messes up levels inside).\n//\n\nmodule.exports = function fragments_join(state) {\n    var curr, last, level = 0, tokens = state.tokens, max = state.tokens.length;\n    for(curr = last = 0; curr < max; curr++){\n        // re-calculate levels after emphasis/strikethrough turns some text nodes\n        // into opening/closing tags\n        if (tokens[curr].nesting < 0) level--; // closing tag\n        tokens[curr].level = level;\n        if (tokens[curr].nesting > 0) level++; // opening tag\n        if (tokens[curr].type === \"text\" && curr + 1 < max && tokens[curr + 1].type === \"text\") {\n            // collapse two adjacent text nodes\n            tokens[curr + 1].content = tokens[curr].content + tokens[curr + 1].content;\n        } else {\n            if (curr !== last) {\n                tokens[last] = tokens[curr];\n            }\n            last++;\n        }\n    }\n    if (curr !== last) {\n        tokens.length = last;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3J1bGVzX2lubGluZS9mcmFnbWVudHNfam9pbi5qcyIsIm1hcHBpbmdzIjoiQUFBQSxtRUFBbUU7QUFDbkUsdUVBQXVFO0FBQ3ZFLEVBQUU7QUFDRiwyRUFBMkU7QUFDM0UsMkVBQTJFO0FBQzNFLHlFQUF5RTtBQUN6RSw2REFBNkQ7QUFDN0QsRUFBRTtBQUNGO0FBR0FBLE9BQU9DLE9BQU8sR0FBRyxTQUFTQyxlQUFlQyxLQUFLO0lBQzVDLElBQUlDLE1BQU1DLE1BQ05DLFFBQVEsR0FDUkMsU0FBU0osTUFBTUksTUFBTSxFQUNyQkMsTUFBTUwsTUFBTUksTUFBTSxDQUFDRSxNQUFNO0lBRTdCLElBQUtMLE9BQU9DLE9BQU8sR0FBR0QsT0FBT0ksS0FBS0osT0FBUTtRQUN4Qyx5RUFBeUU7UUFDekUsNEJBQTRCO1FBQzVCLElBQUlHLE1BQU0sQ0FBQ0gsS0FBSyxDQUFDTSxPQUFPLEdBQUcsR0FBR0osU0FBUyxjQUFjO1FBQ3JEQyxNQUFNLENBQUNILEtBQUssQ0FBQ0UsS0FBSyxHQUFHQTtRQUNyQixJQUFJQyxNQUFNLENBQUNILEtBQUssQ0FBQ00sT0FBTyxHQUFHLEdBQUdKLFNBQVMsY0FBYztRQUVyRCxJQUFJQyxNQUFNLENBQUNILEtBQUssQ0FBQ08sSUFBSSxLQUFLLFVBQ3RCUCxPQUFPLElBQUlJLE9BQ1hELE1BQU0sQ0FBQ0gsT0FBTyxFQUFFLENBQUNPLElBQUksS0FBSyxRQUFRO1lBRXBDLG1DQUFtQztZQUNuQ0osTUFBTSxDQUFDSCxPQUFPLEVBQUUsQ0FBQ1EsT0FBTyxHQUFHTCxNQUFNLENBQUNILEtBQUssQ0FBQ1EsT0FBTyxHQUFHTCxNQUFNLENBQUNILE9BQU8sRUFBRSxDQUFDUSxPQUFPO1FBQzVFLE9BQU87WUFDTCxJQUFJUixTQUFTQyxNQUFNO2dCQUFFRSxNQUFNLENBQUNGLEtBQUssR0FBR0UsTUFBTSxDQUFDSCxLQUFLO1lBQUU7WUFFbERDO1FBQ0Y7SUFDRjtJQUVBLElBQUlELFNBQVNDLE1BQU07UUFDakJFLE9BQU9FLE1BQU0sR0FBR0o7SUFDbEI7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2cvLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3J1bGVzX2lubGluZS9mcmFnbWVudHNfam9pbi5qcz83ZjcwIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENsZWFuIHVwIHRva2VucyBhZnRlciBlbXBoYXNpcyBhbmQgc3RyaWtldGhyb3VnaCBwb3N0cHJvY2Vzc2luZzpcbi8vIG1lcmdlIGFkamFjZW50IHRleHQgbm9kZXMgaW50byBvbmUgYW5kIHJlLWNhbGN1bGF0ZSBhbGwgdG9rZW4gbGV2ZWxzXG4vL1xuLy8gVGhpcyBpcyBuZWNlc3NhcnkgYmVjYXVzZSBpbml0aWFsbHkgZW1waGFzaXMgZGVsaW1pdGVyIG1hcmtlcnMgKCosIF8sIH4pXG4vLyBhcmUgdHJlYXRlZCBhcyB0aGVpciBvd24gc2VwYXJhdGUgdGV4dCB0b2tlbnMuIFRoZW4gZW1waGFzaXMgcnVsZSBlaXRoZXJcbi8vIGxlYXZlcyB0aGVtIGFzIHRleHQgKG5lZWRlZCB0byBtZXJnZSB3aXRoIGFkamFjZW50IHRleHQpIG9yIHR1cm5zIHRoZW1cbi8vIGludG8gb3BlbmluZy9jbG9zaW5nIHRhZ3MgKHdoaWNoIG1lc3NlcyB1cCBsZXZlbHMgaW5zaWRlKS5cbi8vXG4ndXNlIHN0cmljdCc7XG5cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmcmFnbWVudHNfam9pbihzdGF0ZSkge1xuICB2YXIgY3VyciwgbGFzdCxcbiAgICAgIGxldmVsID0gMCxcbiAgICAgIHRva2VucyA9IHN0YXRlLnRva2VucyxcbiAgICAgIG1heCA9IHN0YXRlLnRva2Vucy5sZW5ndGg7XG5cbiAgZm9yIChjdXJyID0gbGFzdCA9IDA7IGN1cnIgPCBtYXg7IGN1cnIrKykge1xuICAgIC8vIHJlLWNhbGN1bGF0ZSBsZXZlbHMgYWZ0ZXIgZW1waGFzaXMvc3RyaWtldGhyb3VnaCB0dXJucyBzb21lIHRleHQgbm9kZXNcbiAgICAvLyBpbnRvIG9wZW5pbmcvY2xvc2luZyB0YWdzXG4gICAgaWYgKHRva2Vuc1tjdXJyXS5uZXN0aW5nIDwgMCkgbGV2ZWwtLTsgLy8gY2xvc2luZyB0YWdcbiAgICB0b2tlbnNbY3Vycl0ubGV2ZWwgPSBsZXZlbDtcbiAgICBpZiAodG9rZW5zW2N1cnJdLm5lc3RpbmcgPiAwKSBsZXZlbCsrOyAvLyBvcGVuaW5nIHRhZ1xuXG4gICAgaWYgKHRva2Vuc1tjdXJyXS50eXBlID09PSAndGV4dCcgJiZcbiAgICAgICAgY3VyciArIDEgPCBtYXggJiZcbiAgICAgICAgdG9rZW5zW2N1cnIgKyAxXS50eXBlID09PSAndGV4dCcpIHtcblxuICAgICAgLy8gY29sbGFwc2UgdHdvIGFkamFjZW50IHRleHQgbm9kZXNcbiAgICAgIHRva2Vuc1tjdXJyICsgMV0uY29udGVudCA9IHRva2Vuc1tjdXJyXS5jb250ZW50ICsgdG9rZW5zW2N1cnIgKyAxXS5jb250ZW50O1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoY3VyciAhPT0gbGFzdCkgeyB0b2tlbnNbbGFzdF0gPSB0b2tlbnNbY3Vycl07IH1cblxuICAgICAgbGFzdCsrO1xuICAgIH1cbiAgfVxuXG4gIGlmIChjdXJyICE9PSBsYXN0KSB7XG4gICAgdG9rZW5zLmxlbmd0aCA9IGxhc3Q7XG4gIH1cbn07XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImZyYWdtZW50c19qb2luIiwic3RhdGUiLCJjdXJyIiwibGFzdCIsImxldmVsIiwidG9rZW5zIiwibWF4IiwibGVuZ3RoIiwibmVzdGluZyIsInR5cGUiLCJjb250ZW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/markdown-it/lib/rules_inline/fragments_join.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/markdown-it/lib/rules_inline/html_inline.js":
/*!******************************************************************!*\
  !*** ./node_modules/markdown-it/lib/rules_inline/html_inline.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Process html tags\n\nvar HTML_TAG_RE = (__webpack_require__(/*! ../common/html_re */ \"(rsc)/./node_modules/markdown-it/lib/common/html_re.js\").HTML_TAG_RE);\nfunction isLinkOpen(str) {\n    return /^<a[>\\s]/i.test(str);\n}\nfunction isLinkClose(str) {\n    return /^<\\/a\\s*>/i.test(str);\n}\nfunction isLetter(ch) {\n    /*eslint no-bitwise:0*/ var lc = ch | 0x20; // to lower case\n    return lc >= 0x61 /* a */  && lc <= 0x7a /* z */ ;\n}\nmodule.exports = function html_inline(state, silent) {\n    var ch, match, max, token, pos = state.pos;\n    if (!state.md.options.html) {\n        return false;\n    }\n    // Check start\n    max = state.posMax;\n    if (state.src.charCodeAt(pos) !== 0x3C /* < */  || pos + 2 >= max) {\n        return false;\n    }\n    // Quick fail on second char\n    ch = state.src.charCodeAt(pos + 1);\n    if (ch !== 0x21 /* ! */  && ch !== 0x3F /* ? */  && ch !== 0x2F /* / */  && !isLetter(ch)) {\n        return false;\n    }\n    match = state.src.slice(pos).match(HTML_TAG_RE);\n    if (!match) {\n        return false;\n    }\n    if (!silent) {\n        token = state.push(\"html_inline\", \"\", 0);\n        token.content = match[0];\n        if (isLinkOpen(token.content)) state.linkLevel++;\n        if (isLinkClose(token.content)) state.linkLevel--;\n    }\n    state.pos += match[0].length;\n    return true;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3J1bGVzX2lubGluZS9odG1sX2lubGluZS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFFcEI7QUFHQSxJQUFJQSxjQUFjQyxvSEFBd0M7QUFHMUQsU0FBU0MsV0FBV0MsR0FBRztJQUNyQixPQUFPLFlBQVlDLElBQUksQ0FBQ0Q7QUFDMUI7QUFDQSxTQUFTRSxZQUFZRixHQUFHO0lBQ3RCLE9BQU8sYUFBYUMsSUFBSSxDQUFDRDtBQUMzQjtBQUdBLFNBQVNHLFNBQVNDLEVBQUU7SUFDbEIscUJBQXFCLEdBQ3JCLElBQUlDLEtBQUtELEtBQUssTUFBTSxnQkFBZ0I7SUFDcEMsT0FBTyxNQUFPLEtBQUksS0FBSyxPQUFRQyxNQUFNLEtBQUksS0FBSztBQUNoRDtBQUdBQyxPQUFPQyxPQUFPLEdBQUcsU0FBU0MsWUFBWUMsS0FBSyxFQUFFQyxNQUFNO0lBQ2pELElBQUlOLElBQUlPLE9BQU9DLEtBQUtDLE9BQ2hCQyxNQUFNTCxNQUFNSyxHQUFHO0lBRW5CLElBQUksQ0FBQ0wsTUFBTU0sRUFBRSxDQUFDQyxPQUFPLENBQUNDLElBQUksRUFBRTtRQUFFLE9BQU87SUFBTztJQUU1QyxjQUFjO0lBQ2RMLE1BQU1ILE1BQU1TLE1BQU07SUFDbEIsSUFBSVQsTUFBTVUsR0FBRyxDQUFDQyxVQUFVLENBQUNOLFNBQVMsS0FBSSxLQUFLLE9BQ3ZDQSxNQUFNLEtBQUtGLEtBQUs7UUFDbEIsT0FBTztJQUNUO0lBRUEsNEJBQTRCO0lBQzVCUixLQUFLSyxNQUFNVSxHQUFHLENBQUNDLFVBQVUsQ0FBQ04sTUFBTTtJQUNoQyxJQUFJVixPQUFPLEtBQUksS0FBSyxPQUNoQkEsT0FBTyxLQUFJLEtBQUssT0FDaEJBLE9BQU8sS0FBSSxLQUFLLE9BQ2hCLENBQUNELFNBQVNDLEtBQUs7UUFDakIsT0FBTztJQUNUO0lBRUFPLFFBQVFGLE1BQU1VLEdBQUcsQ0FBQ0UsS0FBSyxDQUFDUCxLQUFLSCxLQUFLLENBQUNkO0lBQ25DLElBQUksQ0FBQ2MsT0FBTztRQUFFLE9BQU87SUFBTztJQUU1QixJQUFJLENBQUNELFFBQVE7UUFDWEcsUUFBZ0JKLE1BQU1hLElBQUksQ0FBQyxlQUFlLElBQUk7UUFDOUNULE1BQU1VLE9BQU8sR0FBR1osS0FBSyxDQUFDLEVBQUU7UUFFeEIsSUFBSVosV0FBV2MsTUFBTVUsT0FBTyxHQUFJZCxNQUFNZSxTQUFTO1FBQy9DLElBQUl0QixZQUFZVyxNQUFNVSxPQUFPLEdBQUdkLE1BQU1lLFNBQVM7SUFDakQ7SUFDQWYsTUFBTUssR0FBRyxJQUFJSCxLQUFLLENBQUMsRUFBRSxDQUFDYyxNQUFNO0lBQzVCLE9BQU87QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2cvLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3J1bGVzX2lubGluZS9odG1sX2lubGluZS5qcz82MmEwIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFByb2Nlc3MgaHRtbCB0YWdzXG5cbid1c2Ugc3RyaWN0JztcblxuXG52YXIgSFRNTF9UQUdfUkUgPSByZXF1aXJlKCcuLi9jb21tb24vaHRtbF9yZScpLkhUTUxfVEFHX1JFO1xuXG5cbmZ1bmN0aW9uIGlzTGlua09wZW4oc3RyKSB7XG4gIHJldHVybiAvXjxhWz5cXHNdL2kudGVzdChzdHIpO1xufVxuZnVuY3Rpb24gaXNMaW5rQ2xvc2Uoc3RyKSB7XG4gIHJldHVybiAvXjxcXC9hXFxzKj4vaS50ZXN0KHN0cik7XG59XG5cblxuZnVuY3Rpb24gaXNMZXR0ZXIoY2gpIHtcbiAgLyplc2xpbnQgbm8tYml0d2lzZTowKi9cbiAgdmFyIGxjID0gY2ggfCAweDIwOyAvLyB0byBsb3dlciBjYXNlXG4gIHJldHVybiAobGMgPj0gMHg2MS8qIGEgKi8pICYmIChsYyA8PSAweDdhLyogeiAqLyk7XG59XG5cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBodG1sX2lubGluZShzdGF0ZSwgc2lsZW50KSB7XG4gIHZhciBjaCwgbWF0Y2gsIG1heCwgdG9rZW4sXG4gICAgICBwb3MgPSBzdGF0ZS5wb3M7XG5cbiAgaWYgKCFzdGF0ZS5tZC5vcHRpb25zLmh0bWwpIHsgcmV0dXJuIGZhbHNlOyB9XG5cbiAgLy8gQ2hlY2sgc3RhcnRcbiAgbWF4ID0gc3RhdGUucG9zTWF4O1xuICBpZiAoc3RhdGUuc3JjLmNoYXJDb2RlQXQocG9zKSAhPT0gMHgzQy8qIDwgKi8gfHxcbiAgICAgIHBvcyArIDIgPj0gbWF4KSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gUXVpY2sgZmFpbCBvbiBzZWNvbmQgY2hhclxuICBjaCA9IHN0YXRlLnNyYy5jaGFyQ29kZUF0KHBvcyArIDEpO1xuICBpZiAoY2ggIT09IDB4MjEvKiAhICovICYmXG4gICAgICBjaCAhPT0gMHgzRi8qID8gKi8gJiZcbiAgICAgIGNoICE9PSAweDJGLyogLyAqLyAmJlxuICAgICAgIWlzTGV0dGVyKGNoKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIG1hdGNoID0gc3RhdGUuc3JjLnNsaWNlKHBvcykubWF0Y2goSFRNTF9UQUdfUkUpO1xuICBpZiAoIW1hdGNoKSB7IHJldHVybiBmYWxzZTsgfVxuXG4gIGlmICghc2lsZW50KSB7XG4gICAgdG9rZW4gICAgICAgICA9IHN0YXRlLnB1c2goJ2h0bWxfaW5saW5lJywgJycsIDApO1xuICAgIHRva2VuLmNvbnRlbnQgPSBtYXRjaFswXTtcblxuICAgIGlmIChpc0xpbmtPcGVuKHRva2VuLmNvbnRlbnQpKSAgc3RhdGUubGlua0xldmVsKys7XG4gICAgaWYgKGlzTGlua0Nsb3NlKHRva2VuLmNvbnRlbnQpKSBzdGF0ZS5saW5rTGV2ZWwtLTtcbiAgfVxuICBzdGF0ZS5wb3MgKz0gbWF0Y2hbMF0ubGVuZ3RoO1xuICByZXR1cm4gdHJ1ZTtcbn07XG4iXSwibmFtZXMiOlsiSFRNTF9UQUdfUkUiLCJyZXF1aXJlIiwiaXNMaW5rT3BlbiIsInN0ciIsInRlc3QiLCJpc0xpbmtDbG9zZSIsImlzTGV0dGVyIiwiY2giLCJsYyIsIm1vZHVsZSIsImV4cG9ydHMiLCJodG1sX2lubGluZSIsInN0YXRlIiwic2lsZW50IiwibWF0Y2giLCJtYXgiLCJ0b2tlbiIsInBvcyIsIm1kIiwib3B0aW9ucyIsImh0bWwiLCJwb3NNYXgiLCJzcmMiLCJjaGFyQ29kZUF0Iiwic2xpY2UiLCJwdXNoIiwiY29udGVudCIsImxpbmtMZXZlbCIsImxlbmd0aCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/markdown-it/lib/rules_inline/html_inline.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/markdown-it/lib/rules_inline/image.js":
/*!************************************************************!*\
  !*** ./node_modules/markdown-it/lib/rules_inline/image.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Process ![image](<src> \"title\")\n\nvar normalizeReference = (__webpack_require__(/*! ../common/utils */ \"(rsc)/./node_modules/markdown-it/lib/common/utils.js\").normalizeReference);\nvar isSpace = (__webpack_require__(/*! ../common/utils */ \"(rsc)/./node_modules/markdown-it/lib/common/utils.js\").isSpace);\nmodule.exports = function image(state, silent) {\n    var attrs, code, content, label, labelEnd, labelStart, pos, ref, res, title, token, tokens, start, href = \"\", oldPos = state.pos, max = state.posMax;\n    if (state.src.charCodeAt(state.pos) !== 0x21 /* ! */ ) {\n        return false;\n    }\n    if (state.src.charCodeAt(state.pos + 1) !== 0x5B /* [ */ ) {\n        return false;\n    }\n    labelStart = state.pos + 2;\n    labelEnd = state.md.helpers.parseLinkLabel(state, state.pos + 1, false);\n    // parser failed to find ']', so it's not a valid link\n    if (labelEnd < 0) {\n        return false;\n    }\n    pos = labelEnd + 1;\n    if (pos < max && state.src.charCodeAt(pos) === 0x28 /* ( */ ) {\n        //\n        // Inline link\n        //\n        // [link](  <href>  \"title\"  )\n        //        ^^ skipping these spaces\n        pos++;\n        for(; pos < max; pos++){\n            code = state.src.charCodeAt(pos);\n            if (!isSpace(code) && code !== 0x0A) {\n                break;\n            }\n        }\n        if (pos >= max) {\n            return false;\n        }\n        // [link](  <href>  \"title\"  )\n        //          ^^^^^^ parsing link destination\n        start = pos;\n        res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);\n        if (res.ok) {\n            href = state.md.normalizeLink(res.str);\n            if (state.md.validateLink(href)) {\n                pos = res.pos;\n            } else {\n                href = \"\";\n            }\n        }\n        // [link](  <href>  \"title\"  )\n        //                ^^ skipping these spaces\n        start = pos;\n        for(; pos < max; pos++){\n            code = state.src.charCodeAt(pos);\n            if (!isSpace(code) && code !== 0x0A) {\n                break;\n            }\n        }\n        // [link](  <href>  \"title\"  )\n        //                  ^^^^^^^ parsing link title\n        res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);\n        if (pos < max && start !== pos && res.ok) {\n            title = res.str;\n            pos = res.pos;\n            // [link](  <href>  \"title\"  )\n            //                         ^^ skipping these spaces\n            for(; pos < max; pos++){\n                code = state.src.charCodeAt(pos);\n                if (!isSpace(code) && code !== 0x0A) {\n                    break;\n                }\n            }\n        } else {\n            title = \"\";\n        }\n        if (pos >= max || state.src.charCodeAt(pos) !== 0x29 /* ) */ ) {\n            state.pos = oldPos;\n            return false;\n        }\n        pos++;\n    } else {\n        //\n        // Link reference\n        //\n        if (typeof state.env.references === \"undefined\") {\n            return false;\n        }\n        if (pos < max && state.src.charCodeAt(pos) === 0x5B /* [ */ ) {\n            start = pos + 1;\n            pos = state.md.helpers.parseLinkLabel(state, pos);\n            if (pos >= 0) {\n                label = state.src.slice(start, pos++);\n            } else {\n                pos = labelEnd + 1;\n            }\n        } else {\n            pos = labelEnd + 1;\n        }\n        // covers label === '' and label === undefined\n        // (collapsed reference link and shortcut reference link respectively)\n        if (!label) {\n            label = state.src.slice(labelStart, labelEnd);\n        }\n        ref = state.env.references[normalizeReference(label)];\n        if (!ref) {\n            state.pos = oldPos;\n            return false;\n        }\n        href = ref.href;\n        title = ref.title;\n    }\n    //\n    // We found the end of the link, and know for a fact it's a valid link;\n    // so all that's left to do is to call tokenizer.\n    //\n    if (!silent) {\n        content = state.src.slice(labelStart, labelEnd);\n        state.md.inline.parse(content, state.md, state.env, tokens = []);\n        token = state.push(\"image\", \"img\", 0);\n        token.attrs = attrs = [\n            [\n                \"src\",\n                href\n            ],\n            [\n                \"alt\",\n                \"\"\n            ]\n        ];\n        token.children = tokens;\n        token.content = content;\n        if (title) {\n            attrs.push([\n                \"title\",\n                title\n            ]);\n        }\n    }\n    state.pos = pos;\n    state.posMax = max;\n    return true;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3J1bGVzX2lubGluZS9pbWFnZS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxrQ0FBa0M7QUFFbEM7QUFFQSxJQUFJQSxxQkFBdUJDLHVIQUE2QztBQUN4RSxJQUFJQyxVQUF1QkQsNEdBQWtDO0FBRzdERSxPQUFPQyxPQUFPLEdBQUcsU0FBU0MsTUFBTUMsS0FBSyxFQUFFQyxNQUFNO0lBQzNDLElBQUlDLE9BQ0FDLE1BQ0FDLFNBQ0FDLE9BQ0FDLFVBQ0FDLFlBQ0FDLEtBQ0FDLEtBQ0FDLEtBQ0FDLE9BQ0FDLE9BQ0FDLFFBQ0FDLE9BQ0FDLE9BQU8sSUFDUEMsU0FBU2hCLE1BQU1RLEdBQUcsRUFDbEJTLE1BQU1qQixNQUFNa0IsTUFBTTtJQUV0QixJQUFJbEIsTUFBTW1CLEdBQUcsQ0FBQ0MsVUFBVSxDQUFDcEIsTUFBTVEsR0FBRyxNQUFNLEtBQUksS0FBSyxLQUFJO1FBQUUsT0FBTztJQUFPO0lBQ3JFLElBQUlSLE1BQU1tQixHQUFHLENBQUNDLFVBQVUsQ0FBQ3BCLE1BQU1RLEdBQUcsR0FBRyxPQUFPLEtBQUksS0FBSyxLQUFJO1FBQUUsT0FBTztJQUFPO0lBRXpFRCxhQUFhUCxNQUFNUSxHQUFHLEdBQUc7SUFDekJGLFdBQVdOLE1BQU1xQixFQUFFLENBQUNDLE9BQU8sQ0FBQ0MsY0FBYyxDQUFDdkIsT0FBT0EsTUFBTVEsR0FBRyxHQUFHLEdBQUc7SUFFakUsc0RBQXNEO0lBQ3RELElBQUlGLFdBQVcsR0FBRztRQUFFLE9BQU87SUFBTztJQUVsQ0UsTUFBTUYsV0FBVztJQUNqQixJQUFJRSxNQUFNUyxPQUFPakIsTUFBTW1CLEdBQUcsQ0FBQ0MsVUFBVSxDQUFDWixTQUFTLEtBQUksS0FBSyxLQUFJO1FBQzFELEVBQUU7UUFDRixjQUFjO1FBQ2QsRUFBRTtRQUVGLDhCQUE4QjtRQUM5QixrQ0FBa0M7UUFDbENBO1FBQ0EsTUFBT0EsTUFBTVMsS0FBS1QsTUFBTztZQUN2QkwsT0FBT0gsTUFBTW1CLEdBQUcsQ0FBQ0MsVUFBVSxDQUFDWjtZQUM1QixJQUFJLENBQUNaLFFBQVFPLFNBQVNBLFNBQVMsTUFBTTtnQkFBRTtZQUFPO1FBQ2hEO1FBQ0EsSUFBSUssT0FBT1MsS0FBSztZQUFFLE9BQU87UUFBTztRQUVoQyw4QkFBOEI7UUFDOUIsMkNBQTJDO1FBQzNDSCxRQUFRTjtRQUNSRSxNQUFNVixNQUFNcUIsRUFBRSxDQUFDQyxPQUFPLENBQUNFLG9CQUFvQixDQUFDeEIsTUFBTW1CLEdBQUcsRUFBRVgsS0FBS1IsTUFBTWtCLE1BQU07UUFDeEUsSUFBSVIsSUFBSWUsRUFBRSxFQUFFO1lBQ1ZWLE9BQU9mLE1BQU1xQixFQUFFLENBQUNLLGFBQWEsQ0FBQ2hCLElBQUlpQixHQUFHO1lBQ3JDLElBQUkzQixNQUFNcUIsRUFBRSxDQUFDTyxZQUFZLENBQUNiLE9BQU87Z0JBQy9CUCxNQUFNRSxJQUFJRixHQUFHO1lBQ2YsT0FBTztnQkFDTE8sT0FBTztZQUNUO1FBQ0Y7UUFFQSw4QkFBOEI7UUFDOUIsMENBQTBDO1FBQzFDRCxRQUFRTjtRQUNSLE1BQU9BLE1BQU1TLEtBQUtULE1BQU87WUFDdkJMLE9BQU9ILE1BQU1tQixHQUFHLENBQUNDLFVBQVUsQ0FBQ1o7WUFDNUIsSUFBSSxDQUFDWixRQUFRTyxTQUFTQSxTQUFTLE1BQU07Z0JBQUU7WUFBTztRQUNoRDtRQUVBLDhCQUE4QjtRQUM5Qiw4Q0FBOEM7UUFDOUNPLE1BQU1WLE1BQU1xQixFQUFFLENBQUNDLE9BQU8sQ0FBQ08sY0FBYyxDQUFDN0IsTUFBTW1CLEdBQUcsRUFBRVgsS0FBS1IsTUFBTWtCLE1BQU07UUFDbEUsSUFBSVYsTUFBTVMsT0FBT0gsVUFBVU4sT0FBT0UsSUFBSWUsRUFBRSxFQUFFO1lBQ3hDZCxRQUFRRCxJQUFJaUIsR0FBRztZQUNmbkIsTUFBTUUsSUFBSUYsR0FBRztZQUViLDhCQUE4QjtZQUM5QixtREFBbUQ7WUFDbkQsTUFBT0EsTUFBTVMsS0FBS1QsTUFBTztnQkFDdkJMLE9BQU9ILE1BQU1tQixHQUFHLENBQUNDLFVBQVUsQ0FBQ1o7Z0JBQzVCLElBQUksQ0FBQ1osUUFBUU8sU0FBU0EsU0FBUyxNQUFNO29CQUFFO2dCQUFPO1lBQ2hEO1FBQ0YsT0FBTztZQUNMUSxRQUFRO1FBQ1Y7UUFFQSxJQUFJSCxPQUFPUyxPQUFPakIsTUFBTW1CLEdBQUcsQ0FBQ0MsVUFBVSxDQUFDWixTQUFTLEtBQUksS0FBSyxLQUFJO1lBQzNEUixNQUFNUSxHQUFHLEdBQUdRO1lBQ1osT0FBTztRQUNUO1FBQ0FSO0lBQ0YsT0FBTztRQUNMLEVBQUU7UUFDRixpQkFBaUI7UUFDakIsRUFBRTtRQUNGLElBQUksT0FBT1IsTUFBTThCLEdBQUcsQ0FBQ0MsVUFBVSxLQUFLLGFBQWE7WUFBRSxPQUFPO1FBQU87UUFFakUsSUFBSXZCLE1BQU1TLE9BQU9qQixNQUFNbUIsR0FBRyxDQUFDQyxVQUFVLENBQUNaLFNBQVMsS0FBSSxLQUFLLEtBQUk7WUFDMURNLFFBQVFOLE1BQU07WUFDZEEsTUFBTVIsTUFBTXFCLEVBQUUsQ0FBQ0MsT0FBTyxDQUFDQyxjQUFjLENBQUN2QixPQUFPUTtZQUM3QyxJQUFJQSxPQUFPLEdBQUc7Z0JBQ1pILFFBQVFMLE1BQU1tQixHQUFHLENBQUNhLEtBQUssQ0FBQ2xCLE9BQU9OO1lBQ2pDLE9BQU87Z0JBQ0xBLE1BQU1GLFdBQVc7WUFDbkI7UUFDRixPQUFPO1lBQ0xFLE1BQU1GLFdBQVc7UUFDbkI7UUFFQSw4Q0FBOEM7UUFDOUMsc0VBQXNFO1FBQ3RFLElBQUksQ0FBQ0QsT0FBTztZQUFFQSxRQUFRTCxNQUFNbUIsR0FBRyxDQUFDYSxLQUFLLENBQUN6QixZQUFZRDtRQUFXO1FBRTdERyxNQUFNVCxNQUFNOEIsR0FBRyxDQUFDQyxVQUFVLENBQUNyQyxtQkFBbUJXLE9BQU87UUFDckQsSUFBSSxDQUFDSSxLQUFLO1lBQ1JULE1BQU1RLEdBQUcsR0FBR1E7WUFDWixPQUFPO1FBQ1Q7UUFDQUQsT0FBT04sSUFBSU0sSUFBSTtRQUNmSixRQUFRRixJQUFJRSxLQUFLO0lBQ25CO0lBRUEsRUFBRTtJQUNGLHVFQUF1RTtJQUN2RSxpREFBaUQ7SUFDakQsRUFBRTtJQUNGLElBQUksQ0FBQ1YsUUFBUTtRQUNYRyxVQUFVSixNQUFNbUIsR0FBRyxDQUFDYSxLQUFLLENBQUN6QixZQUFZRDtRQUV0Q04sTUFBTXFCLEVBQUUsQ0FBQ1ksTUFBTSxDQUFDQyxLQUFLLENBQ25COUIsU0FDQUosTUFBTXFCLEVBQUUsRUFDUnJCLE1BQU04QixHQUFHLEVBQ1RqQixTQUFTLEVBQUU7UUFHYkQsUUFBaUJaLE1BQU1tQyxJQUFJLENBQUMsU0FBUyxPQUFPO1FBQzVDdkIsTUFBTVYsS0FBSyxHQUFNQSxRQUFRO1lBQUU7Z0JBQUU7Z0JBQU9hO2FBQU07WUFBRTtnQkFBRTtnQkFBTzthQUFJO1NBQUU7UUFDM0RILE1BQU13QixRQUFRLEdBQUd2QjtRQUNqQkQsTUFBTVIsT0FBTyxHQUFJQTtRQUVqQixJQUFJTyxPQUFPO1lBQ1RULE1BQU1pQyxJQUFJLENBQUM7Z0JBQUU7Z0JBQVN4QjthQUFPO1FBQy9CO0lBQ0Y7SUFFQVgsTUFBTVEsR0FBRyxHQUFHQTtJQUNaUixNQUFNa0IsTUFBTSxHQUFHRDtJQUNmLE9BQU87QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2cvLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3J1bGVzX2lubGluZS9pbWFnZS5qcz9lYjFmIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFByb2Nlc3MgIVtpbWFnZV0oPHNyYz4gXCJ0aXRsZVwiKVxuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBub3JtYWxpemVSZWZlcmVuY2UgICA9IHJlcXVpcmUoJy4uL2NvbW1vbi91dGlscycpLm5vcm1hbGl6ZVJlZmVyZW5jZTtcbnZhciBpc1NwYWNlICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4uL2NvbW1vbi91dGlscycpLmlzU3BhY2U7XG5cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbWFnZShzdGF0ZSwgc2lsZW50KSB7XG4gIHZhciBhdHRycyxcbiAgICAgIGNvZGUsXG4gICAgICBjb250ZW50LFxuICAgICAgbGFiZWwsXG4gICAgICBsYWJlbEVuZCxcbiAgICAgIGxhYmVsU3RhcnQsXG4gICAgICBwb3MsXG4gICAgICByZWYsXG4gICAgICByZXMsXG4gICAgICB0aXRsZSxcbiAgICAgIHRva2VuLFxuICAgICAgdG9rZW5zLFxuICAgICAgc3RhcnQsXG4gICAgICBocmVmID0gJycsXG4gICAgICBvbGRQb3MgPSBzdGF0ZS5wb3MsXG4gICAgICBtYXggPSBzdGF0ZS5wb3NNYXg7XG5cbiAgaWYgKHN0YXRlLnNyYy5jaGFyQ29kZUF0KHN0YXRlLnBvcykgIT09IDB4MjEvKiAhICovKSB7IHJldHVybiBmYWxzZTsgfVxuICBpZiAoc3RhdGUuc3JjLmNoYXJDb2RlQXQoc3RhdGUucG9zICsgMSkgIT09IDB4NUIvKiBbICovKSB7IHJldHVybiBmYWxzZTsgfVxuXG4gIGxhYmVsU3RhcnQgPSBzdGF0ZS5wb3MgKyAyO1xuICBsYWJlbEVuZCA9IHN0YXRlLm1kLmhlbHBlcnMucGFyc2VMaW5rTGFiZWwoc3RhdGUsIHN0YXRlLnBvcyArIDEsIGZhbHNlKTtcblxuICAvLyBwYXJzZXIgZmFpbGVkIHRvIGZpbmQgJ10nLCBzbyBpdCdzIG5vdCBhIHZhbGlkIGxpbmtcbiAgaWYgKGxhYmVsRW5kIDwgMCkgeyByZXR1cm4gZmFsc2U7IH1cblxuICBwb3MgPSBsYWJlbEVuZCArIDE7XG4gIGlmIChwb3MgPCBtYXggJiYgc3RhdGUuc3JjLmNoYXJDb2RlQXQocG9zKSA9PT0gMHgyOC8qICggKi8pIHtcbiAgICAvL1xuICAgIC8vIElubGluZSBsaW5rXG4gICAgLy9cblxuICAgIC8vIFtsaW5rXSggIDxocmVmPiAgXCJ0aXRsZVwiICApXG4gICAgLy8gICAgICAgIF5eIHNraXBwaW5nIHRoZXNlIHNwYWNlc1xuICAgIHBvcysrO1xuICAgIGZvciAoOyBwb3MgPCBtYXg7IHBvcysrKSB7XG4gICAgICBjb2RlID0gc3RhdGUuc3JjLmNoYXJDb2RlQXQocG9zKTtcbiAgICAgIGlmICghaXNTcGFjZShjb2RlKSAmJiBjb2RlICE9PSAweDBBKSB7IGJyZWFrOyB9XG4gICAgfVxuICAgIGlmIChwb3MgPj0gbWF4KSB7IHJldHVybiBmYWxzZTsgfVxuXG4gICAgLy8gW2xpbmtdKCAgPGhyZWY+ICBcInRpdGxlXCIgIClcbiAgICAvLyAgICAgICAgICBeXl5eXl4gcGFyc2luZyBsaW5rIGRlc3RpbmF0aW9uXG4gICAgc3RhcnQgPSBwb3M7XG4gICAgcmVzID0gc3RhdGUubWQuaGVscGVycy5wYXJzZUxpbmtEZXN0aW5hdGlvbihzdGF0ZS5zcmMsIHBvcywgc3RhdGUucG9zTWF4KTtcbiAgICBpZiAocmVzLm9rKSB7XG4gICAgICBocmVmID0gc3RhdGUubWQubm9ybWFsaXplTGluayhyZXMuc3RyKTtcbiAgICAgIGlmIChzdGF0ZS5tZC52YWxpZGF0ZUxpbmsoaHJlZikpIHtcbiAgICAgICAgcG9zID0gcmVzLnBvcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGhyZWYgPSAnJztcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBbbGlua10oICA8aHJlZj4gIFwidGl0bGVcIiAgKVxuICAgIC8vICAgICAgICAgICAgICAgIF5eIHNraXBwaW5nIHRoZXNlIHNwYWNlc1xuICAgIHN0YXJ0ID0gcG9zO1xuICAgIGZvciAoOyBwb3MgPCBtYXg7IHBvcysrKSB7XG4gICAgICBjb2RlID0gc3RhdGUuc3JjLmNoYXJDb2RlQXQocG9zKTtcbiAgICAgIGlmICghaXNTcGFjZShjb2RlKSAmJiBjb2RlICE9PSAweDBBKSB7IGJyZWFrOyB9XG4gICAgfVxuXG4gICAgLy8gW2xpbmtdKCAgPGhyZWY+ICBcInRpdGxlXCIgIClcbiAgICAvLyAgICAgICAgICAgICAgICAgIF5eXl5eXl4gcGFyc2luZyBsaW5rIHRpdGxlXG4gICAgcmVzID0gc3RhdGUubWQuaGVscGVycy5wYXJzZUxpbmtUaXRsZShzdGF0ZS5zcmMsIHBvcywgc3RhdGUucG9zTWF4KTtcbiAgICBpZiAocG9zIDwgbWF4ICYmIHN0YXJ0ICE9PSBwb3MgJiYgcmVzLm9rKSB7XG4gICAgICB0aXRsZSA9IHJlcy5zdHI7XG4gICAgICBwb3MgPSByZXMucG9zO1xuXG4gICAgICAvLyBbbGlua10oICA8aHJlZj4gIFwidGl0bGVcIiAgKVxuICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgXl4gc2tpcHBpbmcgdGhlc2Ugc3BhY2VzXG4gICAgICBmb3IgKDsgcG9zIDwgbWF4OyBwb3MrKykge1xuICAgICAgICBjb2RlID0gc3RhdGUuc3JjLmNoYXJDb2RlQXQocG9zKTtcbiAgICAgICAgaWYgKCFpc1NwYWNlKGNvZGUpICYmIGNvZGUgIT09IDB4MEEpIHsgYnJlYWs7IH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGl0bGUgPSAnJztcbiAgICB9XG5cbiAgICBpZiAocG9zID49IG1heCB8fCBzdGF0ZS5zcmMuY2hhckNvZGVBdChwb3MpICE9PSAweDI5LyogKSAqLykge1xuICAgICAgc3RhdGUucG9zID0gb2xkUG9zO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBwb3MrKztcbiAgfSBlbHNlIHtcbiAgICAvL1xuICAgIC8vIExpbmsgcmVmZXJlbmNlXG4gICAgLy9cbiAgICBpZiAodHlwZW9mIHN0YXRlLmVudi5yZWZlcmVuY2VzID09PSAndW5kZWZpbmVkJykgeyByZXR1cm4gZmFsc2U7IH1cblxuICAgIGlmIChwb3MgPCBtYXggJiYgc3RhdGUuc3JjLmNoYXJDb2RlQXQocG9zKSA9PT0gMHg1Qi8qIFsgKi8pIHtcbiAgICAgIHN0YXJ0ID0gcG9zICsgMTtcbiAgICAgIHBvcyA9IHN0YXRlLm1kLmhlbHBlcnMucGFyc2VMaW5rTGFiZWwoc3RhdGUsIHBvcyk7XG4gICAgICBpZiAocG9zID49IDApIHtcbiAgICAgICAgbGFiZWwgPSBzdGF0ZS5zcmMuc2xpY2Uoc3RhcnQsIHBvcysrKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBvcyA9IGxhYmVsRW5kICsgMTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcG9zID0gbGFiZWxFbmQgKyAxO1xuICAgIH1cblxuICAgIC8vIGNvdmVycyBsYWJlbCA9PT0gJycgYW5kIGxhYmVsID09PSB1bmRlZmluZWRcbiAgICAvLyAoY29sbGFwc2VkIHJlZmVyZW5jZSBsaW5rIGFuZCBzaG9ydGN1dCByZWZlcmVuY2UgbGluayByZXNwZWN0aXZlbHkpXG4gICAgaWYgKCFsYWJlbCkgeyBsYWJlbCA9IHN0YXRlLnNyYy5zbGljZShsYWJlbFN0YXJ0LCBsYWJlbEVuZCk7IH1cblxuICAgIHJlZiA9IHN0YXRlLmVudi5yZWZlcmVuY2VzW25vcm1hbGl6ZVJlZmVyZW5jZShsYWJlbCldO1xuICAgIGlmICghcmVmKSB7XG4gICAgICBzdGF0ZS5wb3MgPSBvbGRQb3M7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGhyZWYgPSByZWYuaHJlZjtcbiAgICB0aXRsZSA9IHJlZi50aXRsZTtcbiAgfVxuXG4gIC8vXG4gIC8vIFdlIGZvdW5kIHRoZSBlbmQgb2YgdGhlIGxpbmssIGFuZCBrbm93IGZvciBhIGZhY3QgaXQncyBhIHZhbGlkIGxpbms7XG4gIC8vIHNvIGFsbCB0aGF0J3MgbGVmdCB0byBkbyBpcyB0byBjYWxsIHRva2VuaXplci5cbiAgLy9cbiAgaWYgKCFzaWxlbnQpIHtcbiAgICBjb250ZW50ID0gc3RhdGUuc3JjLnNsaWNlKGxhYmVsU3RhcnQsIGxhYmVsRW5kKTtcblxuICAgIHN0YXRlLm1kLmlubGluZS5wYXJzZShcbiAgICAgIGNvbnRlbnQsXG4gICAgICBzdGF0ZS5tZCxcbiAgICAgIHN0YXRlLmVudixcbiAgICAgIHRva2VucyA9IFtdXG4gICAgKTtcblxuICAgIHRva2VuICAgICAgICAgID0gc3RhdGUucHVzaCgnaW1hZ2UnLCAnaW1nJywgMCk7XG4gICAgdG9rZW4uYXR0cnMgICAgPSBhdHRycyA9IFsgWyAnc3JjJywgaHJlZiBdLCBbICdhbHQnLCAnJyBdIF07XG4gICAgdG9rZW4uY2hpbGRyZW4gPSB0b2tlbnM7XG4gICAgdG9rZW4uY29udGVudCAgPSBjb250ZW50O1xuXG4gICAgaWYgKHRpdGxlKSB7XG4gICAgICBhdHRycy5wdXNoKFsgJ3RpdGxlJywgdGl0bGUgXSk7XG4gICAgfVxuICB9XG5cbiAgc3RhdGUucG9zID0gcG9zO1xuICBzdGF0ZS5wb3NNYXggPSBtYXg7XG4gIHJldHVybiB0cnVlO1xufTtcbiJdLCJuYW1lcyI6WyJub3JtYWxpemVSZWZlcmVuY2UiLCJyZXF1aXJlIiwiaXNTcGFjZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJpbWFnZSIsInN0YXRlIiwic2lsZW50IiwiYXR0cnMiLCJjb2RlIiwiY29udGVudCIsImxhYmVsIiwibGFiZWxFbmQiLCJsYWJlbFN0YXJ0IiwicG9zIiwicmVmIiwicmVzIiwidGl0bGUiLCJ0b2tlbiIsInRva2VucyIsInN0YXJ0IiwiaHJlZiIsIm9sZFBvcyIsIm1heCIsInBvc01heCIsInNyYyIsImNoYXJDb2RlQXQiLCJtZCIsImhlbHBlcnMiLCJwYXJzZUxpbmtMYWJlbCIsInBhcnNlTGlua0Rlc3RpbmF0aW9uIiwib2siLCJub3JtYWxpemVMaW5rIiwic3RyIiwidmFsaWRhdGVMaW5rIiwicGFyc2VMaW5rVGl0bGUiLCJlbnYiLCJyZWZlcmVuY2VzIiwic2xpY2UiLCJpbmxpbmUiLCJwYXJzZSIsInB1c2giLCJjaGlsZHJlbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/markdown-it/lib/rules_inline/image.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/markdown-it/lib/rules_inline/link.js":
/*!***********************************************************!*\
  !*** ./node_modules/markdown-it/lib/rules_inline/link.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Process [link](<to> \"stuff\")\n\nvar normalizeReference = (__webpack_require__(/*! ../common/utils */ \"(rsc)/./node_modules/markdown-it/lib/common/utils.js\").normalizeReference);\nvar isSpace = (__webpack_require__(/*! ../common/utils */ \"(rsc)/./node_modules/markdown-it/lib/common/utils.js\").isSpace);\nmodule.exports = function link(state, silent) {\n    var attrs, code, label, labelEnd, labelStart, pos, res, ref, token, href = \"\", title = \"\", oldPos = state.pos, max = state.posMax, start = state.pos, parseReference = true;\n    if (state.src.charCodeAt(state.pos) !== 0x5B /* [ */ ) {\n        return false;\n    }\n    labelStart = state.pos + 1;\n    labelEnd = state.md.helpers.parseLinkLabel(state, state.pos, true);\n    // parser failed to find ']', so it's not a valid link\n    if (labelEnd < 0) {\n        return false;\n    }\n    pos = labelEnd + 1;\n    if (pos < max && state.src.charCodeAt(pos) === 0x28 /* ( */ ) {\n        //\n        // Inline link\n        //\n        // might have found a valid shortcut link, disable reference parsing\n        parseReference = false;\n        // [link](  <href>  \"title\"  )\n        //        ^^ skipping these spaces\n        pos++;\n        for(; pos < max; pos++){\n            code = state.src.charCodeAt(pos);\n            if (!isSpace(code) && code !== 0x0A) {\n                break;\n            }\n        }\n        if (pos >= max) {\n            return false;\n        }\n        // [link](  <href>  \"title\"  )\n        //          ^^^^^^ parsing link destination\n        start = pos;\n        res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);\n        if (res.ok) {\n            href = state.md.normalizeLink(res.str);\n            if (state.md.validateLink(href)) {\n                pos = res.pos;\n            } else {\n                href = \"\";\n            }\n            // [link](  <href>  \"title\"  )\n            //                ^^ skipping these spaces\n            start = pos;\n            for(; pos < max; pos++){\n                code = state.src.charCodeAt(pos);\n                if (!isSpace(code) && code !== 0x0A) {\n                    break;\n                }\n            }\n            // [link](  <href>  \"title\"  )\n            //                  ^^^^^^^ parsing link title\n            res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);\n            if (pos < max && start !== pos && res.ok) {\n                title = res.str;\n                pos = res.pos;\n                // [link](  <href>  \"title\"  )\n                //                         ^^ skipping these spaces\n                for(; pos < max; pos++){\n                    code = state.src.charCodeAt(pos);\n                    if (!isSpace(code) && code !== 0x0A) {\n                        break;\n                    }\n                }\n            }\n        }\n        if (pos >= max || state.src.charCodeAt(pos) !== 0x29 /* ) */ ) {\n            // parsing a valid shortcut link failed, fallback to reference\n            parseReference = true;\n        }\n        pos++;\n    }\n    if (parseReference) {\n        //\n        // Link reference\n        //\n        if (typeof state.env.references === \"undefined\") {\n            return false;\n        }\n        if (pos < max && state.src.charCodeAt(pos) === 0x5B /* [ */ ) {\n            start = pos + 1;\n            pos = state.md.helpers.parseLinkLabel(state, pos);\n            if (pos >= 0) {\n                label = state.src.slice(start, pos++);\n            } else {\n                pos = labelEnd + 1;\n            }\n        } else {\n            pos = labelEnd + 1;\n        }\n        // covers label === '' and label === undefined\n        // (collapsed reference link and shortcut reference link respectively)\n        if (!label) {\n            label = state.src.slice(labelStart, labelEnd);\n        }\n        ref = state.env.references[normalizeReference(label)];\n        if (!ref) {\n            state.pos = oldPos;\n            return false;\n        }\n        href = ref.href;\n        title = ref.title;\n    }\n    //\n    // We found the end of the link, and know for a fact it's a valid link;\n    // so all that's left to do is to call tokenizer.\n    //\n    if (!silent) {\n        state.pos = labelStart;\n        state.posMax = labelEnd;\n        token = state.push(\"link_open\", \"a\", 1);\n        token.attrs = attrs = [\n            [\n                \"href\",\n                href\n            ]\n        ];\n        if (title) {\n            attrs.push([\n                \"title\",\n                title\n            ]);\n        }\n        state.linkLevel++;\n        state.md.inline.tokenize(state);\n        state.linkLevel--;\n        token = state.push(\"link_close\", \"a\", -1);\n    }\n    state.pos = pos;\n    state.posMax = max;\n    return true;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/markdown-it/lib/rules_inline/link.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/markdown-it/lib/rules_inline/linkify.js":
/*!**************************************************************!*\
  !*** ./node_modules/markdown-it/lib/rules_inline/linkify.js ***!
  \**************************************************************/
/***/ ((module) => {

eval("// Process links like https://example.org/\n\n// RFC3986: scheme = ALPHA *( ALPHA / DIGIT / \"+\" / \"-\" / \".\" )\nvar SCHEME_RE = /(?:^|[^a-z0-9.+-])([a-z][a-z0-9.+-]*)$/i;\nmodule.exports = function linkify(state, silent) {\n    var pos, max, match, proto, link, url, fullUrl, token;\n    if (!state.md.options.linkify) return false;\n    if (state.linkLevel > 0) return false;\n    pos = state.pos;\n    max = state.posMax;\n    if (pos + 3 > max) return false;\n    if (state.src.charCodeAt(pos) !== 0x3A /* : */ ) return false;\n    if (state.src.charCodeAt(pos + 1) !== 0x2F /* / */ ) return false;\n    if (state.src.charCodeAt(pos + 2) !== 0x2F /* / */ ) return false;\n    match = state.pending.match(SCHEME_RE);\n    if (!match) return false;\n    proto = match[1];\n    link = state.md.linkify.matchAtStart(state.src.slice(pos - proto.length));\n    if (!link) return false;\n    url = link.url;\n    // invalid link, but still detected by linkify somehow;\n    // need to check to prevent infinite loop below\n    if (url.length <= proto.length) return false;\n    // disallow '*' at the end of the link (conflicts with emphasis)\n    url = url.replace(/\\*+$/, \"\");\n    fullUrl = state.md.normalizeLink(url);\n    if (!state.md.validateLink(fullUrl)) return false;\n    if (!silent) {\n        state.pending = state.pending.slice(0, -proto.length);\n        token = state.push(\"link_open\", \"a\", 1);\n        token.attrs = [\n            [\n                \"href\",\n                fullUrl\n            ]\n        ];\n        token.markup = \"linkify\";\n        token.info = \"auto\";\n        token = state.push(\"text\", \"\", 0);\n        token.content = state.md.normalizeLinkText(url);\n        token = state.push(\"link_close\", \"a\", -1);\n        token.markup = \"linkify\";\n        token.info = \"auto\";\n    }\n    state.pos += url.length - proto.length;\n    return true;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3J1bGVzX2lubGluZS9saW5raWZ5LmpzIiwibWFwcGluZ3MiOiJBQUFBLDBDQUEwQztBQUUxQztBQUdBLCtEQUErRDtBQUMvRCxJQUFJQSxZQUFZO0FBR2hCQyxPQUFPQyxPQUFPLEdBQUcsU0FBU0MsUUFBUUMsS0FBSyxFQUFFQyxNQUFNO0lBQzdDLElBQUlDLEtBQUtDLEtBQUtDLE9BQU9DLE9BQU9DLE1BQU1DLEtBQUtDLFNBQVNDO0lBRWhELElBQUksQ0FBQ1QsTUFBTVUsRUFBRSxDQUFDQyxPQUFPLENBQUNaLE9BQU8sRUFBRSxPQUFPO0lBQ3RDLElBQUlDLE1BQU1ZLFNBQVMsR0FBRyxHQUFHLE9BQU87SUFFaENWLE1BQU1GLE1BQU1FLEdBQUc7SUFDZkMsTUFBTUgsTUFBTWEsTUFBTTtJQUVsQixJQUFJWCxNQUFNLElBQUlDLEtBQUssT0FBTztJQUMxQixJQUFJSCxNQUFNYyxHQUFHLENBQUNDLFVBQVUsQ0FBQ2IsU0FBUyxLQUFJLEtBQUssS0FBSSxPQUFPO0lBQ3RELElBQUlGLE1BQU1jLEdBQUcsQ0FBQ0MsVUFBVSxDQUFDYixNQUFNLE9BQU8sS0FBSSxLQUFLLEtBQUksT0FBTztJQUMxRCxJQUFJRixNQUFNYyxHQUFHLENBQUNDLFVBQVUsQ0FBQ2IsTUFBTSxPQUFPLEtBQUksS0FBSyxLQUFJLE9BQU87SUFFMURFLFFBQVFKLE1BQU1nQixPQUFPLENBQUNaLEtBQUssQ0FBQ1I7SUFDNUIsSUFBSSxDQUFDUSxPQUFPLE9BQU87SUFFbkJDLFFBQVFELEtBQUssQ0FBQyxFQUFFO0lBRWhCRSxPQUFPTixNQUFNVSxFQUFFLENBQUNYLE9BQU8sQ0FBQ2tCLFlBQVksQ0FBQ2pCLE1BQU1jLEdBQUcsQ0FBQ0ksS0FBSyxDQUFDaEIsTUFBTUcsTUFBTWMsTUFBTTtJQUN2RSxJQUFJLENBQUNiLE1BQU0sT0FBTztJQUVsQkMsTUFBTUQsS0FBS0MsR0FBRztJQUVkLHVEQUF1RDtJQUN2RCwrQ0FBK0M7SUFDL0MsSUFBSUEsSUFBSVksTUFBTSxJQUFJZCxNQUFNYyxNQUFNLEVBQUUsT0FBTztJQUV2QyxnRUFBZ0U7SUFDaEVaLE1BQU1BLElBQUlhLE9BQU8sQ0FBQyxRQUFRO0lBRTFCWixVQUFVUixNQUFNVSxFQUFFLENBQUNXLGFBQWEsQ0FBQ2Q7SUFDakMsSUFBSSxDQUFDUCxNQUFNVSxFQUFFLENBQUNZLFlBQVksQ0FBQ2QsVUFBVSxPQUFPO0lBRTVDLElBQUksQ0FBQ1AsUUFBUTtRQUNYRCxNQUFNZ0IsT0FBTyxHQUFHaEIsTUFBTWdCLE9BQU8sQ0FBQ0UsS0FBSyxDQUFDLEdBQUcsQ0FBQ2IsTUFBTWMsTUFBTTtRQUVwRFYsUUFBZ0JULE1BQU11QixJQUFJLENBQUMsYUFBYSxLQUFLO1FBQzdDZCxNQUFNZSxLQUFLLEdBQUs7WUFBRTtnQkFBRTtnQkFBUWhCO2FBQVM7U0FBRTtRQUN2Q0MsTUFBTWdCLE1BQU0sR0FBSTtRQUNoQmhCLE1BQU1pQixJQUFJLEdBQU07UUFFaEJqQixRQUFnQlQsTUFBTXVCLElBQUksQ0FBQyxRQUFRLElBQUk7UUFDdkNkLE1BQU1rQixPQUFPLEdBQUczQixNQUFNVSxFQUFFLENBQUNrQixpQkFBaUIsQ0FBQ3JCO1FBRTNDRSxRQUFnQlQsTUFBTXVCLElBQUksQ0FBQyxjQUFjLEtBQUssQ0FBQztRQUMvQ2QsTUFBTWdCLE1BQU0sR0FBSTtRQUNoQmhCLE1BQU1pQixJQUFJLEdBQU07SUFDbEI7SUFFQTFCLE1BQU1FLEdBQUcsSUFBSUssSUFBSVksTUFBTSxHQUFHZCxNQUFNYyxNQUFNO0lBQ3RDLE9BQU87QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2cvLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3J1bGVzX2lubGluZS9saW5raWZ5LmpzPzc1MTMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gUHJvY2VzcyBsaW5rcyBsaWtlIGh0dHBzOi8vZXhhbXBsZS5vcmcvXG5cbid1c2Ugc3RyaWN0JztcblxuXG4vLyBSRkMzOTg2OiBzY2hlbWUgPSBBTFBIQSAqKCBBTFBIQSAvIERJR0lUIC8gXCIrXCIgLyBcIi1cIiAvIFwiLlwiIClcbnZhciBTQ0hFTUVfUkUgPSAvKD86XnxbXmEtejAtOS4rLV0pKFthLXpdW2EtejAtOS4rLV0qKSQvaTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGxpbmtpZnkoc3RhdGUsIHNpbGVudCkge1xuICB2YXIgcG9zLCBtYXgsIG1hdGNoLCBwcm90bywgbGluaywgdXJsLCBmdWxsVXJsLCB0b2tlbjtcblxuICBpZiAoIXN0YXRlLm1kLm9wdGlvbnMubGlua2lmeSkgcmV0dXJuIGZhbHNlO1xuICBpZiAoc3RhdGUubGlua0xldmVsID4gMCkgcmV0dXJuIGZhbHNlO1xuXG4gIHBvcyA9IHN0YXRlLnBvcztcbiAgbWF4ID0gc3RhdGUucG9zTWF4O1xuXG4gIGlmIChwb3MgKyAzID4gbWF4KSByZXR1cm4gZmFsc2U7XG4gIGlmIChzdGF0ZS5zcmMuY2hhckNvZGVBdChwb3MpICE9PSAweDNBLyogOiAqLykgcmV0dXJuIGZhbHNlO1xuICBpZiAoc3RhdGUuc3JjLmNoYXJDb2RlQXQocG9zICsgMSkgIT09IDB4MkYvKiAvICovKSByZXR1cm4gZmFsc2U7XG4gIGlmIChzdGF0ZS5zcmMuY2hhckNvZGVBdChwb3MgKyAyKSAhPT0gMHgyRi8qIC8gKi8pIHJldHVybiBmYWxzZTtcblxuICBtYXRjaCA9IHN0YXRlLnBlbmRpbmcubWF0Y2goU0NIRU1FX1JFKTtcbiAgaWYgKCFtYXRjaCkgcmV0dXJuIGZhbHNlO1xuXG4gIHByb3RvID0gbWF0Y2hbMV07XG5cbiAgbGluayA9IHN0YXRlLm1kLmxpbmtpZnkubWF0Y2hBdFN0YXJ0KHN0YXRlLnNyYy5zbGljZShwb3MgLSBwcm90by5sZW5ndGgpKTtcbiAgaWYgKCFsaW5rKSByZXR1cm4gZmFsc2U7XG5cbiAgdXJsID0gbGluay51cmw7XG5cbiAgLy8gaW52YWxpZCBsaW5rLCBidXQgc3RpbGwgZGV0ZWN0ZWQgYnkgbGlua2lmeSBzb21laG93O1xuICAvLyBuZWVkIHRvIGNoZWNrIHRvIHByZXZlbnQgaW5maW5pdGUgbG9vcCBiZWxvd1xuICBpZiAodXJsLmxlbmd0aCA8PSBwcm90by5sZW5ndGgpIHJldHVybiBmYWxzZTtcblxuICAvLyBkaXNhbGxvdyAnKicgYXQgdGhlIGVuZCBvZiB0aGUgbGluayAoY29uZmxpY3RzIHdpdGggZW1waGFzaXMpXG4gIHVybCA9IHVybC5yZXBsYWNlKC9cXCorJC8sICcnKTtcblxuICBmdWxsVXJsID0gc3RhdGUubWQubm9ybWFsaXplTGluayh1cmwpO1xuICBpZiAoIXN0YXRlLm1kLnZhbGlkYXRlTGluayhmdWxsVXJsKSkgcmV0dXJuIGZhbHNlO1xuXG4gIGlmICghc2lsZW50KSB7XG4gICAgc3RhdGUucGVuZGluZyA9IHN0YXRlLnBlbmRpbmcuc2xpY2UoMCwgLXByb3RvLmxlbmd0aCk7XG5cbiAgICB0b2tlbiAgICAgICAgID0gc3RhdGUucHVzaCgnbGlua19vcGVuJywgJ2EnLCAxKTtcbiAgICB0b2tlbi5hdHRycyAgID0gWyBbICdocmVmJywgZnVsbFVybCBdIF07XG4gICAgdG9rZW4ubWFya3VwICA9ICdsaW5raWZ5JztcbiAgICB0b2tlbi5pbmZvICAgID0gJ2F1dG8nO1xuXG4gICAgdG9rZW4gICAgICAgICA9IHN0YXRlLnB1c2goJ3RleHQnLCAnJywgMCk7XG4gICAgdG9rZW4uY29udGVudCA9IHN0YXRlLm1kLm5vcm1hbGl6ZUxpbmtUZXh0KHVybCk7XG5cbiAgICB0b2tlbiAgICAgICAgID0gc3RhdGUucHVzaCgnbGlua19jbG9zZScsICdhJywgLTEpO1xuICAgIHRva2VuLm1hcmt1cCAgPSAnbGlua2lmeSc7XG4gICAgdG9rZW4uaW5mbyAgICA9ICdhdXRvJztcbiAgfVxuXG4gIHN0YXRlLnBvcyArPSB1cmwubGVuZ3RoIC0gcHJvdG8ubGVuZ3RoO1xuICByZXR1cm4gdHJ1ZTtcbn07XG4iXSwibmFtZXMiOlsiU0NIRU1FX1JFIiwibW9kdWxlIiwiZXhwb3J0cyIsImxpbmtpZnkiLCJzdGF0ZSIsInNpbGVudCIsInBvcyIsIm1heCIsIm1hdGNoIiwicHJvdG8iLCJsaW5rIiwidXJsIiwiZnVsbFVybCIsInRva2VuIiwibWQiLCJvcHRpb25zIiwibGlua0xldmVsIiwicG9zTWF4Iiwic3JjIiwiY2hhckNvZGVBdCIsInBlbmRpbmciLCJtYXRjaEF0U3RhcnQiLCJzbGljZSIsImxlbmd0aCIsInJlcGxhY2UiLCJub3JtYWxpemVMaW5rIiwidmFsaWRhdGVMaW5rIiwicHVzaCIsImF0dHJzIiwibWFya3VwIiwiaW5mbyIsImNvbnRlbnQiLCJub3JtYWxpemVMaW5rVGV4dCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/markdown-it/lib/rules_inline/linkify.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/markdown-it/lib/rules_inline/newline.js":
/*!**************************************************************!*\
  !*** ./node_modules/markdown-it/lib/rules_inline/newline.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Proceess '\\n'\n\nvar isSpace = (__webpack_require__(/*! ../common/utils */ \"(rsc)/./node_modules/markdown-it/lib/common/utils.js\").isSpace);\nmodule.exports = function newline(state, silent) {\n    var pmax, max, ws, pos = state.pos;\n    if (state.src.charCodeAt(pos) !== 0x0A /* \\n */ ) {\n        return false;\n    }\n    pmax = state.pending.length - 1;\n    max = state.posMax;\n    // '  \\n' -> hardbreak\n    // Lookup in pending chars is bad practice! Don't copy to other rules!\n    // Pending string is stored in concat mode, indexed lookups will cause\n    // convertion to flat mode.\n    if (!silent) {\n        if (pmax >= 0 && state.pending.charCodeAt(pmax) === 0x20) {\n            if (pmax >= 1 && state.pending.charCodeAt(pmax - 1) === 0x20) {\n                // Find whitespaces tail of pending chars.\n                ws = pmax - 1;\n                while(ws >= 1 && state.pending.charCodeAt(ws - 1) === 0x20)ws--;\n                state.pending = state.pending.slice(0, ws);\n                state.push(\"hardbreak\", \"br\", 0);\n            } else {\n                state.pending = state.pending.slice(0, -1);\n                state.push(\"softbreak\", \"br\", 0);\n            }\n        } else {\n            state.push(\"softbreak\", \"br\", 0);\n        }\n    }\n    pos++;\n    // skip heading spaces for next line\n    while(pos < max && isSpace(state.src.charCodeAt(pos))){\n        pos++;\n    }\n    state.pos = pos;\n    return true;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3J1bGVzX2lubGluZS9uZXdsaW5lLmpzIiwibWFwcGluZ3MiOiJBQUFBLGdCQUFnQjtBQUVoQjtBQUVBLElBQUlBLFVBQVVDLDRHQUFrQztBQUdoREMsT0FBT0MsT0FBTyxHQUFHLFNBQVNDLFFBQVFDLEtBQUssRUFBRUMsTUFBTTtJQUM3QyxJQUFJQyxNQUFNQyxLQUFLQyxJQUFJQyxNQUFNTCxNQUFNSyxHQUFHO0lBRWxDLElBQUlMLE1BQU1NLEdBQUcsQ0FBQ0MsVUFBVSxDQUFDRixTQUFTLEtBQUksTUFBTSxLQUFJO1FBQUUsT0FBTztJQUFPO0lBRWhFSCxPQUFPRixNQUFNUSxPQUFPLENBQUNDLE1BQU0sR0FBRztJQUM5Qk4sTUFBTUgsTUFBTVUsTUFBTTtJQUVsQixzQkFBc0I7SUFDdEIsc0VBQXNFO0lBQ3RFLHNFQUFzRTtJQUN0RSwyQkFBMkI7SUFDM0IsSUFBSSxDQUFDVCxRQUFRO1FBQ1gsSUFBSUMsUUFBUSxLQUFLRixNQUFNUSxPQUFPLENBQUNELFVBQVUsQ0FBQ0wsVUFBVSxNQUFNO1lBQ3hELElBQUlBLFFBQVEsS0FBS0YsTUFBTVEsT0FBTyxDQUFDRCxVQUFVLENBQUNMLE9BQU8sT0FBTyxNQUFNO2dCQUM1RCwwQ0FBMEM7Z0JBQzFDRSxLQUFLRixPQUFPO2dCQUNaLE1BQU9FLE1BQU0sS0FBS0osTUFBTVEsT0FBTyxDQUFDRCxVQUFVLENBQUNILEtBQUssT0FBTyxLQUFNQTtnQkFFN0RKLE1BQU1RLE9BQU8sR0FBR1IsTUFBTVEsT0FBTyxDQUFDRyxLQUFLLENBQUMsR0FBR1A7Z0JBQ3ZDSixNQUFNWSxJQUFJLENBQUMsYUFBYSxNQUFNO1lBQ2hDLE9BQU87Z0JBQ0xaLE1BQU1RLE9BQU8sR0FBR1IsTUFBTVEsT0FBTyxDQUFDRyxLQUFLLENBQUMsR0FBRyxDQUFDO2dCQUN4Q1gsTUFBTVksSUFBSSxDQUFDLGFBQWEsTUFBTTtZQUNoQztRQUVGLE9BQU87WUFDTFosTUFBTVksSUFBSSxDQUFDLGFBQWEsTUFBTTtRQUNoQztJQUNGO0lBRUFQO0lBRUEsb0NBQW9DO0lBQ3BDLE1BQU9BLE1BQU1GLE9BQU9SLFFBQVFLLE1BQU1NLEdBQUcsQ0FBQ0MsVUFBVSxDQUFDRixNQUFPO1FBQUVBO0lBQU87SUFFakVMLE1BQU1LLEdBQUcsR0FBR0E7SUFDWixPQUFPO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9nLy4vbm9kZV9tb2R1bGVzL21hcmtkb3duLWl0L2xpYi9ydWxlc19pbmxpbmUvbmV3bGluZS5qcz9jYjY2Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIFByb2NlZXNzICdcXG4nXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGlzU3BhY2UgPSByZXF1aXJlKCcuLi9jb21tb24vdXRpbHMnKS5pc1NwYWNlO1xuXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbmV3bGluZShzdGF0ZSwgc2lsZW50KSB7XG4gIHZhciBwbWF4LCBtYXgsIHdzLCBwb3MgPSBzdGF0ZS5wb3M7XG5cbiAgaWYgKHN0YXRlLnNyYy5jaGFyQ29kZUF0KHBvcykgIT09IDB4MEEvKiBcXG4gKi8pIHsgcmV0dXJuIGZhbHNlOyB9XG5cbiAgcG1heCA9IHN0YXRlLnBlbmRpbmcubGVuZ3RoIC0gMTtcbiAgbWF4ID0gc3RhdGUucG9zTWF4O1xuXG4gIC8vICcgIFxcbicgLT4gaGFyZGJyZWFrXG4gIC8vIExvb2t1cCBpbiBwZW5kaW5nIGNoYXJzIGlzIGJhZCBwcmFjdGljZSEgRG9uJ3QgY29weSB0byBvdGhlciBydWxlcyFcbiAgLy8gUGVuZGluZyBzdHJpbmcgaXMgc3RvcmVkIGluIGNvbmNhdCBtb2RlLCBpbmRleGVkIGxvb2t1cHMgd2lsbCBjYXVzZVxuICAvLyBjb252ZXJ0aW9uIHRvIGZsYXQgbW9kZS5cbiAgaWYgKCFzaWxlbnQpIHtcbiAgICBpZiAocG1heCA+PSAwICYmIHN0YXRlLnBlbmRpbmcuY2hhckNvZGVBdChwbWF4KSA9PT0gMHgyMCkge1xuICAgICAgaWYgKHBtYXggPj0gMSAmJiBzdGF0ZS5wZW5kaW5nLmNoYXJDb2RlQXQocG1heCAtIDEpID09PSAweDIwKSB7XG4gICAgICAgIC8vIEZpbmQgd2hpdGVzcGFjZXMgdGFpbCBvZiBwZW5kaW5nIGNoYXJzLlxuICAgICAgICB3cyA9IHBtYXggLSAxO1xuICAgICAgICB3aGlsZSAod3MgPj0gMSAmJiBzdGF0ZS5wZW5kaW5nLmNoYXJDb2RlQXQod3MgLSAxKSA9PT0gMHgyMCkgd3MtLTtcblxuICAgICAgICBzdGF0ZS5wZW5kaW5nID0gc3RhdGUucGVuZGluZy5zbGljZSgwLCB3cyk7XG4gICAgICAgIHN0YXRlLnB1c2goJ2hhcmRicmVhaycsICdicicsIDApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RhdGUucGVuZGluZyA9IHN0YXRlLnBlbmRpbmcuc2xpY2UoMCwgLTEpO1xuICAgICAgICBzdGF0ZS5wdXNoKCdzb2Z0YnJlYWsnLCAnYnInLCAwKTtcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0ZS5wdXNoKCdzb2Z0YnJlYWsnLCAnYnInLCAwKTtcbiAgICB9XG4gIH1cblxuICBwb3MrKztcblxuICAvLyBza2lwIGhlYWRpbmcgc3BhY2VzIGZvciBuZXh0IGxpbmVcbiAgd2hpbGUgKHBvcyA8IG1heCAmJiBpc1NwYWNlKHN0YXRlLnNyYy5jaGFyQ29kZUF0KHBvcykpKSB7IHBvcysrOyB9XG5cbiAgc3RhdGUucG9zID0gcG9zO1xuICByZXR1cm4gdHJ1ZTtcbn07XG4iXSwibmFtZXMiOlsiaXNTcGFjZSIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwibmV3bGluZSIsInN0YXRlIiwic2lsZW50IiwicG1heCIsIm1heCIsIndzIiwicG9zIiwic3JjIiwiY2hhckNvZGVBdCIsInBlbmRpbmciLCJsZW5ndGgiLCJwb3NNYXgiLCJzbGljZSIsInB1c2giXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/markdown-it/lib/rules_inline/newline.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/markdown-it/lib/rules_inline/state_inline.js":
/*!*******************************************************************!*\
  !*** ./node_modules/markdown-it/lib/rules_inline/state_inline.js ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Inline parser state\n\nvar Token = __webpack_require__(/*! ../token */ \"(rsc)/./node_modules/markdown-it/lib/token.js\");\nvar isWhiteSpace = (__webpack_require__(/*! ../common/utils */ \"(rsc)/./node_modules/markdown-it/lib/common/utils.js\").isWhiteSpace);\nvar isPunctChar = (__webpack_require__(/*! ../common/utils */ \"(rsc)/./node_modules/markdown-it/lib/common/utils.js\").isPunctChar);\nvar isMdAsciiPunct = (__webpack_require__(/*! ../common/utils */ \"(rsc)/./node_modules/markdown-it/lib/common/utils.js\").isMdAsciiPunct);\nfunction StateInline(src, md, env, outTokens) {\n    this.src = src;\n    this.env = env;\n    this.md = md;\n    this.tokens = outTokens;\n    this.tokens_meta = Array(outTokens.length);\n    this.pos = 0;\n    this.posMax = this.src.length;\n    this.level = 0;\n    this.pending = \"\";\n    this.pendingLevel = 0;\n    // Stores { start: end } pairs. Useful for backtrack\n    // optimization of pairs parse (emphasis, strikes).\n    this.cache = {};\n    // List of emphasis-like delimiters for current tag\n    this.delimiters = [];\n    // Stack of delimiter lists for upper level tags\n    this._prev_delimiters = [];\n    // backtick length => last seen position\n    this.backticks = {};\n    this.backticksScanned = false;\n    // Counter used to disable inline linkify-it execution\n    // inside <a> and markdown links\n    this.linkLevel = 0;\n}\n// Flush pending text\n//\nStateInline.prototype.pushPending = function() {\n    var token = new Token(\"text\", \"\", 0);\n    token.content = this.pending;\n    token.level = this.pendingLevel;\n    this.tokens.push(token);\n    this.pending = \"\";\n    return token;\n};\n// Push new token to \"stream\".\n// If pending text exists - flush it as text token\n//\nStateInline.prototype.push = function(type, tag, nesting) {\n    if (this.pending) {\n        this.pushPending();\n    }\n    var token = new Token(type, tag, nesting);\n    var token_meta = null;\n    if (nesting < 0) {\n        // closing tag\n        this.level--;\n        this.delimiters = this._prev_delimiters.pop();\n    }\n    token.level = this.level;\n    if (nesting > 0) {\n        // opening tag\n        this.level++;\n        this._prev_delimiters.push(this.delimiters);\n        this.delimiters = [];\n        token_meta = {\n            delimiters: this.delimiters\n        };\n    }\n    this.pendingLevel = this.level;\n    this.tokens.push(token);\n    this.tokens_meta.push(token_meta);\n    return token;\n};\n// Scan a sequence of emphasis-like markers, and determine whether\n// it can start an emphasis sequence or end an emphasis sequence.\n//\n//  - start - position to scan from (it should point at a valid marker);\n//  - canSplitWord - determine if these markers can be found inside a word\n//\nStateInline.prototype.scanDelims = function(start, canSplitWord) {\n    var pos = start, lastChar, nextChar, count, can_open, can_close, isLastWhiteSpace, isLastPunctChar, isNextWhiteSpace, isNextPunctChar, left_flanking = true, right_flanking = true, max = this.posMax, marker = this.src.charCodeAt(start);\n    // treat beginning of the line as a whitespace\n    lastChar = start > 0 ? this.src.charCodeAt(start - 1) : 0x20;\n    while(pos < max && this.src.charCodeAt(pos) === marker){\n        pos++;\n    }\n    count = pos - start;\n    // treat end of the line as a whitespace\n    nextChar = pos < max ? this.src.charCodeAt(pos) : 0x20;\n    isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));\n    isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));\n    isLastWhiteSpace = isWhiteSpace(lastChar);\n    isNextWhiteSpace = isWhiteSpace(nextChar);\n    if (isNextWhiteSpace) {\n        left_flanking = false;\n    } else if (isNextPunctChar) {\n        if (!(isLastWhiteSpace || isLastPunctChar)) {\n            left_flanking = false;\n        }\n    }\n    if (isLastWhiteSpace) {\n        right_flanking = false;\n    } else if (isLastPunctChar) {\n        if (!(isNextWhiteSpace || isNextPunctChar)) {\n            right_flanking = false;\n        }\n    }\n    if (!canSplitWord) {\n        can_open = left_flanking && (!right_flanking || isLastPunctChar);\n        can_close = right_flanking && (!left_flanking || isNextPunctChar);\n    } else {\n        can_open = left_flanking;\n        can_close = right_flanking;\n    }\n    return {\n        can_open: can_open,\n        can_close: can_close,\n        length: count\n    };\n};\n// re-export Token class to use in block rules\nStateInline.prototype.Token = Token;\nmodule.exports = StateInline;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/markdown-it/lib/rules_inline/state_inline.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/markdown-it/lib/rules_inline/strikethrough.js":
/*!********************************************************************!*\
  !*** ./node_modules/markdown-it/lib/rules_inline/strikethrough.js ***!
  \********************************************************************/
/***/ ((module) => {

eval("// ~~strike through~~\n//\n\n// Insert each marker as a separate text token, and add it to delimiter list\n//\nmodule.exports.tokenize = function strikethrough(state, silent) {\n    var i, scanned, token, len, ch, start = state.pos, marker = state.src.charCodeAt(start);\n    if (silent) {\n        return false;\n    }\n    if (marker !== 0x7E /* ~ */ ) {\n        return false;\n    }\n    scanned = state.scanDelims(state.pos, true);\n    len = scanned.length;\n    ch = String.fromCharCode(marker);\n    if (len < 2) {\n        return false;\n    }\n    if (len % 2) {\n        token = state.push(\"text\", \"\", 0);\n        token.content = ch;\n        len--;\n    }\n    for(i = 0; i < len; i += 2){\n        token = state.push(\"text\", \"\", 0);\n        token.content = ch + ch;\n        state.delimiters.push({\n            marker: marker,\n            length: 0,\n            token: state.tokens.length - 1,\n            end: -1,\n            open: scanned.can_open,\n            close: scanned.can_close\n        });\n    }\n    state.pos += scanned.length;\n    return true;\n};\nfunction postProcess(state, delimiters) {\n    var i, j, startDelim, endDelim, token, loneMarkers = [], max = delimiters.length;\n    for(i = 0; i < max; i++){\n        startDelim = delimiters[i];\n        if (startDelim.marker !== 0x7E /* ~ */ ) {\n            continue;\n        }\n        if (startDelim.end === -1) {\n            continue;\n        }\n        endDelim = delimiters[startDelim.end];\n        token = state.tokens[startDelim.token];\n        token.type = \"s_open\";\n        token.tag = \"s\";\n        token.nesting = 1;\n        token.markup = \"~~\";\n        token.content = \"\";\n        token = state.tokens[endDelim.token];\n        token.type = \"s_close\";\n        token.tag = \"s\";\n        token.nesting = -1;\n        token.markup = \"~~\";\n        token.content = \"\";\n        if (state.tokens[endDelim.token - 1].type === \"text\" && state.tokens[endDelim.token - 1].content === \"~\") {\n            loneMarkers.push(endDelim.token - 1);\n        }\n    }\n    // If a marker sequence has an odd number of characters, it's splitted\n    // like this: `~~~~~` -> `~` + `~~` + `~~`, leaving one marker at the\n    // start of the sequence.\n    //\n    // So, we have to move all those markers after subsequent s_close tags.\n    //\n    while(loneMarkers.length){\n        i = loneMarkers.pop();\n        j = i + 1;\n        while(j < state.tokens.length && state.tokens[j].type === \"s_close\"){\n            j++;\n        }\n        j--;\n        if (i !== j) {\n            token = state.tokens[j];\n            state.tokens[j] = state.tokens[i];\n            state.tokens[i] = token;\n        }\n    }\n}\n// Walk through delimiter list and replace text tokens with tags\n//\nmodule.exports.postProcess = function strikethrough(state) {\n    var curr, tokens_meta = state.tokens_meta, max = state.tokens_meta.length;\n    postProcess(state, state.delimiters);\n    for(curr = 0; curr < max; curr++){\n        if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n            postProcess(state, tokens_meta[curr].delimiters);\n        }\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3J1bGVzX2lubGluZS9zdHJpa2V0aHJvdWdoLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFCQUFxQjtBQUNyQixFQUFFO0FBQ0Y7QUFHQSw0RUFBNEU7QUFDNUUsRUFBRTtBQUNGQSx1QkFBdUIsR0FBRyxTQUFTRyxjQUFjQyxLQUFLLEVBQUVDLE1BQU07SUFDNUQsSUFBSUMsR0FBR0MsU0FBU0MsT0FBT0MsS0FBS0MsSUFDeEJDLFFBQVFQLE1BQU1RLEdBQUcsRUFDakJDLFNBQVNULE1BQU1VLEdBQUcsQ0FBQ0MsVUFBVSxDQUFDSjtJQUVsQyxJQUFJTixRQUFRO1FBQUUsT0FBTztJQUFPO0lBRTVCLElBQUlRLFdBQVcsS0FBSSxLQUFLLEtBQUk7UUFBRSxPQUFPO0lBQU87SUFFNUNOLFVBQVVILE1BQU1ZLFVBQVUsQ0FBQ1osTUFBTVEsR0FBRyxFQUFFO0lBQ3RDSCxNQUFNRixRQUFRVSxNQUFNO0lBQ3BCUCxLQUFLUSxPQUFPQyxZQUFZLENBQUNOO0lBRXpCLElBQUlKLE1BQU0sR0FBRztRQUFFLE9BQU87SUFBTztJQUU3QixJQUFJQSxNQUFNLEdBQUc7UUFDWEQsUUFBZ0JKLE1BQU1nQixJQUFJLENBQUMsUUFBUSxJQUFJO1FBQ3ZDWixNQUFNYSxPQUFPLEdBQUdYO1FBQ2hCRDtJQUNGO0lBRUEsSUFBS0gsSUFBSSxHQUFHQSxJQUFJRyxLQUFLSCxLQUFLLEVBQUc7UUFDM0JFLFFBQWdCSixNQUFNZ0IsSUFBSSxDQUFDLFFBQVEsSUFBSTtRQUN2Q1osTUFBTWEsT0FBTyxHQUFHWCxLQUFLQTtRQUVyQk4sTUFBTWtCLFVBQVUsQ0FBQ0YsSUFBSSxDQUFDO1lBQ3BCUCxRQUFRQTtZQUNSSSxRQUFRO1lBQ1JULE9BQVFKLE1BQU1tQixNQUFNLENBQUNOLE1BQU0sR0FBRztZQUM5Qk8sS0FBUSxDQUFDO1lBQ1RDLE1BQVFsQixRQUFRbUIsUUFBUTtZQUN4QkMsT0FBUXBCLFFBQVFxQixTQUFTO1FBQzNCO0lBQ0Y7SUFFQXhCLE1BQU1RLEdBQUcsSUFBSUwsUUFBUVUsTUFBTTtJQUUzQixPQUFPO0FBQ1Q7QUFHQSxTQUFTWSxZQUFZekIsS0FBSyxFQUFFa0IsVUFBVTtJQUNwQyxJQUFJaEIsR0FBR3dCLEdBQ0hDLFlBQ0FDLFVBQ0F4QixPQUNBeUIsY0FBYyxFQUFFLEVBQ2hCQyxNQUFNWixXQUFXTCxNQUFNO0lBRTNCLElBQUtYLElBQUksR0FBR0EsSUFBSTRCLEtBQUs1QixJQUFLO1FBQ3hCeUIsYUFBYVQsVUFBVSxDQUFDaEIsRUFBRTtRQUUxQixJQUFJeUIsV0FBV2xCLE1BQU0sS0FBSyxLQUFJLEtBQUssS0FBSTtZQUNyQztRQUNGO1FBRUEsSUFBSWtCLFdBQVdQLEdBQUcsS0FBSyxDQUFDLEdBQUc7WUFDekI7UUFDRjtRQUVBUSxXQUFXVixVQUFVLENBQUNTLFdBQVdQLEdBQUcsQ0FBQztRQUVyQ2hCLFFBQWdCSixNQUFNbUIsTUFBTSxDQUFDUSxXQUFXdkIsS0FBSyxDQUFDO1FBQzlDQSxNQUFNMkIsSUFBSSxHQUFNO1FBQ2hCM0IsTUFBTTRCLEdBQUcsR0FBTztRQUNoQjVCLE1BQU02QixPQUFPLEdBQUc7UUFDaEI3QixNQUFNOEIsTUFBTSxHQUFJO1FBQ2hCOUIsTUFBTWEsT0FBTyxHQUFHO1FBRWhCYixRQUFnQkosTUFBTW1CLE1BQU0sQ0FBQ1MsU0FBU3hCLEtBQUssQ0FBQztRQUM1Q0EsTUFBTTJCLElBQUksR0FBTTtRQUNoQjNCLE1BQU00QixHQUFHLEdBQU87UUFDaEI1QixNQUFNNkIsT0FBTyxHQUFHLENBQUM7UUFDakI3QixNQUFNOEIsTUFBTSxHQUFJO1FBQ2hCOUIsTUFBTWEsT0FBTyxHQUFHO1FBRWhCLElBQUlqQixNQUFNbUIsTUFBTSxDQUFDUyxTQUFTeEIsS0FBSyxHQUFHLEVBQUUsQ0FBQzJCLElBQUksS0FBSyxVQUMxQy9CLE1BQU1tQixNQUFNLENBQUNTLFNBQVN4QixLQUFLLEdBQUcsRUFBRSxDQUFDYSxPQUFPLEtBQUssS0FBSztZQUVwRFksWUFBWWIsSUFBSSxDQUFDWSxTQUFTeEIsS0FBSyxHQUFHO1FBQ3BDO0lBQ0Y7SUFFQSxzRUFBc0U7SUFDdEUscUVBQXFFO0lBQ3JFLHlCQUF5QjtJQUN6QixFQUFFO0lBQ0YsdUVBQXVFO0lBQ3ZFLEVBQUU7SUFDRixNQUFPeUIsWUFBWWhCLE1BQU0sQ0FBRTtRQUN6QlgsSUFBSTJCLFlBQVlNLEdBQUc7UUFDbkJULElBQUl4QixJQUFJO1FBRVIsTUFBT3dCLElBQUkxQixNQUFNbUIsTUFBTSxDQUFDTixNQUFNLElBQUliLE1BQU1tQixNQUFNLENBQUNPLEVBQUUsQ0FBQ0ssSUFBSSxLQUFLLFVBQVc7WUFDcEVMO1FBQ0Y7UUFFQUE7UUFFQSxJQUFJeEIsTUFBTXdCLEdBQUc7WUFDWHRCLFFBQVFKLE1BQU1tQixNQUFNLENBQUNPLEVBQUU7WUFDdkIxQixNQUFNbUIsTUFBTSxDQUFDTyxFQUFFLEdBQUcxQixNQUFNbUIsTUFBTSxDQUFDakIsRUFBRTtZQUNqQ0YsTUFBTW1CLE1BQU0sQ0FBQ2pCLEVBQUUsR0FBR0U7UUFDcEI7SUFDRjtBQUNGO0FBR0EsZ0VBQWdFO0FBQ2hFLEVBQUU7QUFDRlIsMEJBQTBCLEdBQUcsU0FBU0csY0FBY0MsS0FBSztJQUN2RCxJQUFJb0MsTUFDQUMsY0FBY3JDLE1BQU1xQyxXQUFXLEVBQy9CUCxNQUFNOUIsTUFBTXFDLFdBQVcsQ0FBQ3hCLE1BQU07SUFFbENZLFlBQVl6QixPQUFPQSxNQUFNa0IsVUFBVTtJQUVuQyxJQUFLa0IsT0FBTyxHQUFHQSxPQUFPTixLQUFLTSxPQUFRO1FBQ2pDLElBQUlDLFdBQVcsQ0FBQ0QsS0FBSyxJQUFJQyxXQUFXLENBQUNELEtBQUssQ0FBQ2xCLFVBQVUsRUFBRTtZQUNyRE8sWUFBWXpCLE9BQU9xQyxXQUFXLENBQUNELEtBQUssQ0FBQ2xCLFVBQVU7UUFDakQ7SUFDRjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvZy8uL25vZGVfbW9kdWxlcy9tYXJrZG93bi1pdC9saWIvcnVsZXNfaW5saW5lL3N0cmlrZXRocm91Z2guanM/MTM2MiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyB+fnN0cmlrZSB0aHJvdWdofn5cbi8vXG4ndXNlIHN0cmljdCc7XG5cblxuLy8gSW5zZXJ0IGVhY2ggbWFya2VyIGFzIGEgc2VwYXJhdGUgdGV4dCB0b2tlbiwgYW5kIGFkZCBpdCB0byBkZWxpbWl0ZXIgbGlzdFxuLy9cbm1vZHVsZS5leHBvcnRzLnRva2VuaXplID0gZnVuY3Rpb24gc3RyaWtldGhyb3VnaChzdGF0ZSwgc2lsZW50KSB7XG4gIHZhciBpLCBzY2FubmVkLCB0b2tlbiwgbGVuLCBjaCxcbiAgICAgIHN0YXJ0ID0gc3RhdGUucG9zLFxuICAgICAgbWFya2VyID0gc3RhdGUuc3JjLmNoYXJDb2RlQXQoc3RhcnQpO1xuXG4gIGlmIChzaWxlbnQpIHsgcmV0dXJuIGZhbHNlOyB9XG5cbiAgaWYgKG1hcmtlciAhPT0gMHg3RS8qIH4gKi8pIHsgcmV0dXJuIGZhbHNlOyB9XG5cbiAgc2Nhbm5lZCA9IHN0YXRlLnNjYW5EZWxpbXMoc3RhdGUucG9zLCB0cnVlKTtcbiAgbGVuID0gc2Nhbm5lZC5sZW5ndGg7XG4gIGNoID0gU3RyaW5nLmZyb21DaGFyQ29kZShtYXJrZXIpO1xuXG4gIGlmIChsZW4gPCAyKSB7IHJldHVybiBmYWxzZTsgfVxuXG4gIGlmIChsZW4gJSAyKSB7XG4gICAgdG9rZW4gICAgICAgICA9IHN0YXRlLnB1c2goJ3RleHQnLCAnJywgMCk7XG4gICAgdG9rZW4uY29udGVudCA9IGNoO1xuICAgIGxlbi0tO1xuICB9XG5cbiAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAyKSB7XG4gICAgdG9rZW4gICAgICAgICA9IHN0YXRlLnB1c2goJ3RleHQnLCAnJywgMCk7XG4gICAgdG9rZW4uY29udGVudCA9IGNoICsgY2g7XG5cbiAgICBzdGF0ZS5kZWxpbWl0ZXJzLnB1c2goe1xuICAgICAgbWFya2VyOiBtYXJrZXIsXG4gICAgICBsZW5ndGg6IDAsICAgICAvLyBkaXNhYmxlIFwicnVsZSBvZiAzXCIgbGVuZ3RoIGNoZWNrcyBtZWFudCBmb3IgZW1waGFzaXNcbiAgICAgIHRva2VuOiAgc3RhdGUudG9rZW5zLmxlbmd0aCAtIDEsXG4gICAgICBlbmQ6ICAgIC0xLFxuICAgICAgb3BlbjogICBzY2FubmVkLmNhbl9vcGVuLFxuICAgICAgY2xvc2U6ICBzY2FubmVkLmNhbl9jbG9zZVxuICAgIH0pO1xuICB9XG5cbiAgc3RhdGUucG9zICs9IHNjYW5uZWQubGVuZ3RoO1xuXG4gIHJldHVybiB0cnVlO1xufTtcblxuXG5mdW5jdGlvbiBwb3N0UHJvY2VzcyhzdGF0ZSwgZGVsaW1pdGVycykge1xuICB2YXIgaSwgaixcbiAgICAgIHN0YXJ0RGVsaW0sXG4gICAgICBlbmREZWxpbSxcbiAgICAgIHRva2VuLFxuICAgICAgbG9uZU1hcmtlcnMgPSBbXSxcbiAgICAgIG1heCA9IGRlbGltaXRlcnMubGVuZ3RoO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBtYXg7IGkrKykge1xuICAgIHN0YXJ0RGVsaW0gPSBkZWxpbWl0ZXJzW2ldO1xuXG4gICAgaWYgKHN0YXJ0RGVsaW0ubWFya2VyICE9PSAweDdFLyogfiAqLykge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKHN0YXJ0RGVsaW0uZW5kID09PSAtMSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgZW5kRGVsaW0gPSBkZWxpbWl0ZXJzW3N0YXJ0RGVsaW0uZW5kXTtcblxuICAgIHRva2VuICAgICAgICAgPSBzdGF0ZS50b2tlbnNbc3RhcnREZWxpbS50b2tlbl07XG4gICAgdG9rZW4udHlwZSAgICA9ICdzX29wZW4nO1xuICAgIHRva2VuLnRhZyAgICAgPSAncyc7XG4gICAgdG9rZW4ubmVzdGluZyA9IDE7XG4gICAgdG9rZW4ubWFya3VwICA9ICd+fic7XG4gICAgdG9rZW4uY29udGVudCA9ICcnO1xuXG4gICAgdG9rZW4gICAgICAgICA9IHN0YXRlLnRva2Vuc1tlbmREZWxpbS50b2tlbl07XG4gICAgdG9rZW4udHlwZSAgICA9ICdzX2Nsb3NlJztcbiAgICB0b2tlbi50YWcgICAgID0gJ3MnO1xuICAgIHRva2VuLm5lc3RpbmcgPSAtMTtcbiAgICB0b2tlbi5tYXJrdXAgID0gJ35+JztcbiAgICB0b2tlbi5jb250ZW50ID0gJyc7XG5cbiAgICBpZiAoc3RhdGUudG9rZW5zW2VuZERlbGltLnRva2VuIC0gMV0udHlwZSA9PT0gJ3RleHQnICYmXG4gICAgICAgIHN0YXRlLnRva2Vuc1tlbmREZWxpbS50b2tlbiAtIDFdLmNvbnRlbnQgPT09ICd+Jykge1xuXG4gICAgICBsb25lTWFya2Vycy5wdXNoKGVuZERlbGltLnRva2VuIC0gMSk7XG4gICAgfVxuICB9XG5cbiAgLy8gSWYgYSBtYXJrZXIgc2VxdWVuY2UgaGFzIGFuIG9kZCBudW1iZXIgb2YgY2hhcmFjdGVycywgaXQncyBzcGxpdHRlZFxuICAvLyBsaWtlIHRoaXM6IGB+fn5+fmAgLT4gYH5gICsgYH5+YCArIGB+fmAsIGxlYXZpbmcgb25lIG1hcmtlciBhdCB0aGVcbiAgLy8gc3RhcnQgb2YgdGhlIHNlcXVlbmNlLlxuICAvL1xuICAvLyBTbywgd2UgaGF2ZSB0byBtb3ZlIGFsbCB0aG9zZSBtYXJrZXJzIGFmdGVyIHN1YnNlcXVlbnQgc19jbG9zZSB0YWdzLlxuICAvL1xuICB3aGlsZSAobG9uZU1hcmtlcnMubGVuZ3RoKSB7XG4gICAgaSA9IGxvbmVNYXJrZXJzLnBvcCgpO1xuICAgIGogPSBpICsgMTtcblxuICAgIHdoaWxlIChqIDwgc3RhdGUudG9rZW5zLmxlbmd0aCAmJiBzdGF0ZS50b2tlbnNbal0udHlwZSA9PT0gJ3NfY2xvc2UnKSB7XG4gICAgICBqKys7XG4gICAgfVxuXG4gICAgai0tO1xuXG4gICAgaWYgKGkgIT09IGopIHtcbiAgICAgIHRva2VuID0gc3RhdGUudG9rZW5zW2pdO1xuICAgICAgc3RhdGUudG9rZW5zW2pdID0gc3RhdGUudG9rZW5zW2ldO1xuICAgICAgc3RhdGUudG9rZW5zW2ldID0gdG9rZW47XG4gICAgfVxuICB9XG59XG5cblxuLy8gV2FsayB0aHJvdWdoIGRlbGltaXRlciBsaXN0IGFuZCByZXBsYWNlIHRleHQgdG9rZW5zIHdpdGggdGFnc1xuLy9cbm1vZHVsZS5leHBvcnRzLnBvc3RQcm9jZXNzID0gZnVuY3Rpb24gc3RyaWtldGhyb3VnaChzdGF0ZSkge1xuICB2YXIgY3VycixcbiAgICAgIHRva2Vuc19tZXRhID0gc3RhdGUudG9rZW5zX21ldGEsXG4gICAgICBtYXggPSBzdGF0ZS50b2tlbnNfbWV0YS5sZW5ndGg7XG5cbiAgcG9zdFByb2Nlc3Moc3RhdGUsIHN0YXRlLmRlbGltaXRlcnMpO1xuXG4gIGZvciAoY3VyciA9IDA7IGN1cnIgPCBtYXg7IGN1cnIrKykge1xuICAgIGlmICh0b2tlbnNfbWV0YVtjdXJyXSAmJiB0b2tlbnNfbWV0YVtjdXJyXS5kZWxpbWl0ZXJzKSB7XG4gICAgICBwb3N0UHJvY2VzcyhzdGF0ZSwgdG9rZW5zX21ldGFbY3Vycl0uZGVsaW1pdGVycyk7XG4gICAgfVxuICB9XG59O1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJ0b2tlbml6ZSIsInN0cmlrZXRocm91Z2giLCJzdGF0ZSIsInNpbGVudCIsImkiLCJzY2FubmVkIiwidG9rZW4iLCJsZW4iLCJjaCIsInN0YXJ0IiwicG9zIiwibWFya2VyIiwic3JjIiwiY2hhckNvZGVBdCIsInNjYW5EZWxpbXMiLCJsZW5ndGgiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJwdXNoIiwiY29udGVudCIsImRlbGltaXRlcnMiLCJ0b2tlbnMiLCJlbmQiLCJvcGVuIiwiY2FuX29wZW4iLCJjbG9zZSIsImNhbl9jbG9zZSIsInBvc3RQcm9jZXNzIiwiaiIsInN0YXJ0RGVsaW0iLCJlbmREZWxpbSIsImxvbmVNYXJrZXJzIiwibWF4IiwidHlwZSIsInRhZyIsIm5lc3RpbmciLCJtYXJrdXAiLCJwb3AiLCJjdXJyIiwidG9rZW5zX21ldGEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/markdown-it/lib/rules_inline/strikethrough.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/markdown-it/lib/rules_inline/text.js":
/*!***********************************************************!*\
  !*** ./node_modules/markdown-it/lib/rules_inline/text.js ***!
  \***********************************************************/
/***/ ((module) => {

eval("// Skip text characters for text token, place those to pending buffer\n// and increment current pos\n\n// Rule to skip pure text\n// '{}$%@~+=:' reserved for extentions\n// !, \", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \\, ], ^, _, `, {, |, }, or ~\n// !!!! Don't confuse with \"Markdown ASCII Punctuation\" chars\n// http://spec.commonmark.org/0.15/#ascii-punctuation-character\nfunction isTerminatorChar(ch) {\n    switch(ch){\n        case 0x0A /* \\n */ :\n        case 0x21 /* ! */ :\n        case 0x23 /* # */ :\n        case 0x24 /* $ */ :\n        case 0x25 /* % */ :\n        case 0x26 /* & */ :\n        case 0x2A /* * */ :\n        case 0x2B /* + */ :\n        case 0x2D /* - */ :\n        case 0x3A /* : */ :\n        case 0x3C /* < */ :\n        case 0x3D /* = */ :\n        case 0x3E /* > */ :\n        case 0x40 /* @ */ :\n        case 0x5B /* [ */ :\n        case 0x5C /* \\ */ :\n        case 0x5D /* ] */ :\n        case 0x5E /* ^ */ :\n        case 0x5F /* _ */ :\n        case 0x60 /* ` */ :\n        case 0x7B /* { */ :\n        case 0x7D /* } */ :\n        case 0x7E /* ~ */ :\n            return true;\n        default:\n            return false;\n    }\n}\nmodule.exports = function text(state, silent) {\n    var pos = state.pos;\n    while(pos < state.posMax && !isTerminatorChar(state.src.charCodeAt(pos))){\n        pos++;\n    }\n    if (pos === state.pos) {\n        return false;\n    }\n    if (!silent) {\n        state.pending += state.src.slice(state.pos, pos);\n    }\n    state.pos = pos;\n    return true;\n}; // Alternative implementation, for memory.\n //\n // It costs 10% of performance, but allows extend terminators list, if place it\n // to `ParcerInline` property. Probably, will switch to it sometime, such\n // flexibility required.\n /*\nvar TERMINATOR_RE = /[\\n!#$%&*+\\-:<=>@[\\\\\\]^_`{}~]/;\n\nmodule.exports = function text(state, silent) {\n  var pos = state.pos,\n      idx = state.src.slice(pos).search(TERMINATOR_RE);\n\n  // first char is terminator -> empty text\n  if (idx === 0) { return false; }\n\n  // no terminator -> text till end of string\n  if (idx < 0) {\n    if (!silent) { state.pending += state.src.slice(pos); }\n    state.pos = state.src.length;\n    return true;\n  }\n\n  if (!silent) { state.pending += state.src.slice(pos, pos + idx); }\n\n  state.pos += idx;\n\n  return true;\n};*/ \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3J1bGVzX2lubGluZS90ZXh0LmpzIiwibWFwcGluZ3MiOiJBQUFBLHFFQUFxRTtBQUNyRSw0QkFBNEI7QUFFNUI7QUFHQSx5QkFBeUI7QUFDekIsc0NBQXNDO0FBRXRDLG9HQUFvRztBQUVwRyw2REFBNkQ7QUFDN0QsK0RBQStEO0FBQy9ELFNBQVNBLGlCQUFpQkMsRUFBRTtJQUMxQixPQUFRQTtRQUNOLEtBQUssS0FBSSxNQUFNO1FBQ2YsS0FBSyxLQUFJLEtBQUs7UUFDZCxLQUFLLEtBQUksS0FBSztRQUNkLEtBQUssS0FBSSxLQUFLO1FBQ2QsS0FBSyxLQUFJLEtBQUs7UUFDZCxLQUFLLEtBQUksS0FBSztRQUNkLEtBQUssS0FBSSxLQUFLO1FBQ2QsS0FBSyxLQUFJLEtBQUs7UUFDZCxLQUFLLEtBQUksS0FBSztRQUNkLEtBQUssS0FBSSxLQUFLO1FBQ2QsS0FBSyxLQUFJLEtBQUs7UUFDZCxLQUFLLEtBQUksS0FBSztRQUNkLEtBQUssS0FBSSxLQUFLO1FBQ2QsS0FBSyxLQUFJLEtBQUs7UUFDZCxLQUFLLEtBQUksS0FBSztRQUNkLEtBQUssS0FBSSxLQUFLO1FBQ2QsS0FBSyxLQUFJLEtBQUs7UUFDZCxLQUFLLEtBQUksS0FBSztRQUNkLEtBQUssS0FBSSxLQUFLO1FBQ2QsS0FBSyxLQUFJLEtBQUs7UUFDZCxLQUFLLEtBQUksS0FBSztRQUNkLEtBQUssS0FBSSxLQUFLO1FBQ2QsS0FBSyxLQUFJLEtBQUs7WUFDWixPQUFPO1FBQ1Q7WUFDRSxPQUFPO0lBQ1g7QUFDRjtBQUVBQyxPQUFPQyxPQUFPLEdBQUcsU0FBU0MsS0FBS0MsS0FBSyxFQUFFQyxNQUFNO0lBQzFDLElBQUlDLE1BQU1GLE1BQU1FLEdBQUc7SUFFbkIsTUFBT0EsTUFBTUYsTUFBTUcsTUFBTSxJQUFJLENBQUNSLGlCQUFpQkssTUFBTUksR0FBRyxDQUFDQyxVQUFVLENBQUNILE1BQU87UUFDekVBO0lBQ0Y7SUFFQSxJQUFJQSxRQUFRRixNQUFNRSxHQUFHLEVBQUU7UUFBRSxPQUFPO0lBQU87SUFFdkMsSUFBSSxDQUFDRCxRQUFRO1FBQUVELE1BQU1NLE9BQU8sSUFBSU4sTUFBTUksR0FBRyxDQUFDRyxLQUFLLENBQUNQLE1BQU1FLEdBQUcsRUFBRUE7SUFBTTtJQUVqRUYsTUFBTUUsR0FBRyxHQUFHQTtJQUVaLE9BQU87QUFDVCxHQUVBLDBDQUEwQztDQUMxQyxFQUFFO0NBQ0YsK0VBQStFO0NBQy9FLHlFQUF5RTtDQUN6RSx3QkFBd0I7Q0FFeEI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7RUFzQkUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9nLy4vbm9kZV9tb2R1bGVzL21hcmtkb3duLWl0L2xpYi9ydWxlc19pbmxpbmUvdGV4dC5qcz82ODVkIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFNraXAgdGV4dCBjaGFyYWN0ZXJzIGZvciB0ZXh0IHRva2VuLCBwbGFjZSB0aG9zZSB0byBwZW5kaW5nIGJ1ZmZlclxuLy8gYW5kIGluY3JlbWVudCBjdXJyZW50IHBvc1xuXG4ndXNlIHN0cmljdCc7XG5cblxuLy8gUnVsZSB0byBza2lwIHB1cmUgdGV4dFxuLy8gJ3t9JCVAfis9OicgcmVzZXJ2ZWQgZm9yIGV4dGVudGlvbnNcblxuLy8gISwgXCIsICMsICQsICUsICYsICcsICgsICksICosICssICwsIC0sIC4sIC8sIDosIDssIDwsID0sID4sID8sIEAsIFssIFxcLCBdLCBeLCBfLCBgLCB7LCB8LCB9LCBvciB+XG5cbi8vICEhISEgRG9uJ3QgY29uZnVzZSB3aXRoIFwiTWFya2Rvd24gQVNDSUkgUHVuY3R1YXRpb25cIiBjaGFyc1xuLy8gaHR0cDovL3NwZWMuY29tbW9ubWFyay5vcmcvMC4xNS8jYXNjaWktcHVuY3R1YXRpb24tY2hhcmFjdGVyXG5mdW5jdGlvbiBpc1Rlcm1pbmF0b3JDaGFyKGNoKSB7XG4gIHN3aXRjaCAoY2gpIHtcbiAgICBjYXNlIDB4MEEvKiBcXG4gKi86XG4gICAgY2FzZSAweDIxLyogISAqLzpcbiAgICBjYXNlIDB4MjMvKiAjICovOlxuICAgIGNhc2UgMHgyNC8qICQgKi86XG4gICAgY2FzZSAweDI1LyogJSAqLzpcbiAgICBjYXNlIDB4MjYvKiAmICovOlxuICAgIGNhc2UgMHgyQS8qICogKi86XG4gICAgY2FzZSAweDJCLyogKyAqLzpcbiAgICBjYXNlIDB4MkQvKiAtICovOlxuICAgIGNhc2UgMHgzQS8qIDogKi86XG4gICAgY2FzZSAweDNDLyogPCAqLzpcbiAgICBjYXNlIDB4M0QvKiA9ICovOlxuICAgIGNhc2UgMHgzRS8qID4gKi86XG4gICAgY2FzZSAweDQwLyogQCAqLzpcbiAgICBjYXNlIDB4NUIvKiBbICovOlxuICAgIGNhc2UgMHg1Qy8qIFxcICovOlxuICAgIGNhc2UgMHg1RC8qIF0gKi86XG4gICAgY2FzZSAweDVFLyogXiAqLzpcbiAgICBjYXNlIDB4NUYvKiBfICovOlxuICAgIGNhc2UgMHg2MC8qIGAgKi86XG4gICAgY2FzZSAweDdCLyogeyAqLzpcbiAgICBjYXNlIDB4N0QvKiB9ICovOlxuICAgIGNhc2UgMHg3RS8qIH4gKi86XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gdGV4dChzdGF0ZSwgc2lsZW50KSB7XG4gIHZhciBwb3MgPSBzdGF0ZS5wb3M7XG5cbiAgd2hpbGUgKHBvcyA8IHN0YXRlLnBvc01heCAmJiAhaXNUZXJtaW5hdG9yQ2hhcihzdGF0ZS5zcmMuY2hhckNvZGVBdChwb3MpKSkge1xuICAgIHBvcysrO1xuICB9XG5cbiAgaWYgKHBvcyA9PT0gc3RhdGUucG9zKSB7IHJldHVybiBmYWxzZTsgfVxuXG4gIGlmICghc2lsZW50KSB7IHN0YXRlLnBlbmRpbmcgKz0gc3RhdGUuc3JjLnNsaWNlKHN0YXRlLnBvcywgcG9zKTsgfVxuXG4gIHN0YXRlLnBvcyA9IHBvcztcblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbi8vIEFsdGVybmF0aXZlIGltcGxlbWVudGF0aW9uLCBmb3IgbWVtb3J5LlxuLy9cbi8vIEl0IGNvc3RzIDEwJSBvZiBwZXJmb3JtYW5jZSwgYnV0IGFsbG93cyBleHRlbmQgdGVybWluYXRvcnMgbGlzdCwgaWYgcGxhY2UgaXRcbi8vIHRvIGBQYXJjZXJJbmxpbmVgIHByb3BlcnR5LiBQcm9iYWJseSwgd2lsbCBzd2l0Y2ggdG8gaXQgc29tZXRpbWUsIHN1Y2hcbi8vIGZsZXhpYmlsaXR5IHJlcXVpcmVkLlxuXG4vKlxudmFyIFRFUk1JTkFUT1JfUkUgPSAvW1xcbiEjJCUmKitcXC06PD0+QFtcXFxcXFxdXl9ge31+XS87XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gdGV4dChzdGF0ZSwgc2lsZW50KSB7XG4gIHZhciBwb3MgPSBzdGF0ZS5wb3MsXG4gICAgICBpZHggPSBzdGF0ZS5zcmMuc2xpY2UocG9zKS5zZWFyY2goVEVSTUlOQVRPUl9SRSk7XG5cbiAgLy8gZmlyc3QgY2hhciBpcyB0ZXJtaW5hdG9yIC0+IGVtcHR5IHRleHRcbiAgaWYgKGlkeCA9PT0gMCkgeyByZXR1cm4gZmFsc2U7IH1cblxuICAvLyBubyB0ZXJtaW5hdG9yIC0+IHRleHQgdGlsbCBlbmQgb2Ygc3RyaW5nXG4gIGlmIChpZHggPCAwKSB7XG4gICAgaWYgKCFzaWxlbnQpIHsgc3RhdGUucGVuZGluZyArPSBzdGF0ZS5zcmMuc2xpY2UocG9zKTsgfVxuICAgIHN0YXRlLnBvcyA9IHN0YXRlLnNyYy5sZW5ndGg7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAoIXNpbGVudCkgeyBzdGF0ZS5wZW5kaW5nICs9IHN0YXRlLnNyYy5zbGljZShwb3MsIHBvcyArIGlkeCk7IH1cblxuICBzdGF0ZS5wb3MgKz0gaWR4O1xuXG4gIHJldHVybiB0cnVlO1xufTsqL1xuIl0sIm5hbWVzIjpbImlzVGVybWluYXRvckNoYXIiLCJjaCIsIm1vZHVsZSIsImV4cG9ydHMiLCJ0ZXh0Iiwic3RhdGUiLCJzaWxlbnQiLCJwb3MiLCJwb3NNYXgiLCJzcmMiLCJjaGFyQ29kZUF0IiwicGVuZGluZyIsInNsaWNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/markdown-it/lib/rules_inline/text.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/markdown-it/lib/token.js":
/*!***********************************************!*\
  !*** ./node_modules/markdown-it/lib/token.js ***!
  \***********************************************/
/***/ ((module) => {

eval("// Token class\n\n/**\n * class Token\n **/ /**\n * new Token(type, tag, nesting)\n *\n * Create new token and fill passed properties.\n **/ function Token(type, tag, nesting) {\n    /**\n   * Token#type -> String\n   *\n   * Type of the token (string, e.g. \"paragraph_open\")\n   **/ this.type = type;\n    /**\n   * Token#tag -> String\n   *\n   * html tag name, e.g. \"p\"\n   **/ this.tag = tag;\n    /**\n   * Token#attrs -> Array\n   *\n   * Html attributes. Format: `[ [ name1, value1 ], [ name2, value2 ] ]`\n   **/ this.attrs = null;\n    /**\n   * Token#map -> Array\n   *\n   * Source map info. Format: `[ line_begin, line_end ]`\n   **/ this.map = null;\n    /**\n   * Token#nesting -> Number\n   *\n   * Level change (number in {-1, 0, 1} set), where:\n   *\n   * -  `1` means the tag is opening\n   * -  `0` means the tag is self-closing\n   * - `-1` means the tag is closing\n   **/ this.nesting = nesting;\n    /**\n   * Token#level -> Number\n   *\n   * nesting level, the same as `state.level`\n   **/ this.level = 0;\n    /**\n   * Token#children -> Array\n   *\n   * An array of child nodes (inline and img tokens)\n   **/ this.children = null;\n    /**\n   * Token#content -> String\n   *\n   * In a case of self-closing tag (code, html, fence, etc.),\n   * it has contents of this tag.\n   **/ this.content = \"\";\n    /**\n   * Token#markup -> String\n   *\n   * '*' or '_' for emphasis, fence string for fence, etc.\n   **/ this.markup = \"\";\n    /**\n   * Token#info -> String\n   *\n   * Additional information:\n   *\n   * - Info string for \"fence\" tokens\n   * - The value \"auto\" for autolink \"link_open\" and \"link_close\" tokens\n   * - The string value of the item marker for ordered-list \"list_item_open\" tokens\n   **/ this.info = \"\";\n    /**\n   * Token#meta -> Object\n   *\n   * A place for plugins to store an arbitrary data\n   **/ this.meta = null;\n    /**\n   * Token#block -> Boolean\n   *\n   * True for block-level tokens, false for inline tokens.\n   * Used in renderer to calculate line breaks\n   **/ this.block = false;\n    /**\n   * Token#hidden -> Boolean\n   *\n   * If it's true, ignore this element when rendering. Used for tight lists\n   * to hide paragraphs.\n   **/ this.hidden = false;\n}\n/**\n * Token.attrIndex(name) -> Number\n *\n * Search attribute index by name.\n **/ Token.prototype.attrIndex = function attrIndex(name) {\n    var attrs, i, len;\n    if (!this.attrs) {\n        return -1;\n    }\n    attrs = this.attrs;\n    for(i = 0, len = attrs.length; i < len; i++){\n        if (attrs[i][0] === name) {\n            return i;\n        }\n    }\n    return -1;\n};\n/**\n * Token.attrPush(attrData)\n *\n * Add `[ name, value ]` attribute to list. Init attrs if necessary\n **/ Token.prototype.attrPush = function attrPush(attrData) {\n    if (this.attrs) {\n        this.attrs.push(attrData);\n    } else {\n        this.attrs = [\n            attrData\n        ];\n    }\n};\n/**\n * Token.attrSet(name, value)\n *\n * Set `name` attribute to `value`. Override old value if exists.\n **/ Token.prototype.attrSet = function attrSet(name, value) {\n    var idx = this.attrIndex(name), attrData = [\n        name,\n        value\n    ];\n    if (idx < 0) {\n        this.attrPush(attrData);\n    } else {\n        this.attrs[idx] = attrData;\n    }\n};\n/**\n * Token.attrGet(name)\n *\n * Get the value of attribute `name`, or null if it does not exist.\n **/ Token.prototype.attrGet = function attrGet(name) {\n    var idx = this.attrIndex(name), value = null;\n    if (idx >= 0) {\n        value = this.attrs[idx][1];\n    }\n    return value;\n};\n/**\n * Token.attrJoin(name, value)\n *\n * Join value to existing attribute via space. Or create new attribute if not\n * exists. Useful to operate with token classes.\n **/ Token.prototype.attrJoin = function attrJoin(name, value) {\n    var idx = this.attrIndex(name);\n    if (idx < 0) {\n        this.attrPush([\n            name,\n            value\n        ]);\n    } else {\n        this.attrs[idx][1] = this.attrs[idx][1] + \" \" + value;\n    }\n};\nmodule.exports = Token;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/markdown-it/lib/token.js\n");

/***/ })

};
;