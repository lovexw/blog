"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/linkify-it";
exports.ids = ["vendor-chunks/linkify-it"];
exports.modules = {

/***/ "(rsc)/./node_modules/linkify-it/index.js":
/*!******************************************!*\
  !*** ./node_modules/linkify-it/index.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n////////////////////////////////////////////////////////////////////////////////\n// Helpers\n// Merge objects\n//\nfunction assign(obj /*from1, from2, from3, ...*/ ) {\n    var sources = Array.prototype.slice.call(arguments, 1);\n    sources.forEach(function(source) {\n        if (!source) {\n            return;\n        }\n        Object.keys(source).forEach(function(key) {\n            obj[key] = source[key];\n        });\n    });\n    return obj;\n}\nfunction _class(obj) {\n    return Object.prototype.toString.call(obj);\n}\nfunction isString(obj) {\n    return _class(obj) === \"[object String]\";\n}\nfunction isObject(obj) {\n    return _class(obj) === \"[object Object]\";\n}\nfunction isRegExp(obj) {\n    return _class(obj) === \"[object RegExp]\";\n}\nfunction isFunction(obj) {\n    return _class(obj) === \"[object Function]\";\n}\nfunction escapeRE(str) {\n    return str.replace(/[.?*+^$[\\]\\\\(){}|-]/g, \"\\\\$&\");\n}\n////////////////////////////////////////////////////////////////////////////////\nvar defaultOptions = {\n    fuzzyLink: true,\n    fuzzyEmail: true,\n    fuzzyIP: false\n};\nfunction isOptionsObj(obj) {\n    return Object.keys(obj || {}).reduce(function(acc, k) {\n        return acc || defaultOptions.hasOwnProperty(k);\n    }, false);\n}\nvar defaultSchemas = {\n    \"http:\": {\n        validate: function(text, pos, self) {\n            var tail = text.slice(pos);\n            if (!self.re.http) {\n                // compile lazily, because \"host\"-containing variables can change on tlds update.\n                self.re.http = new RegExp(\"^\\\\/\\\\/\" + self.re.src_auth + self.re.src_host_port_strict + self.re.src_path, \"i\");\n            }\n            if (self.re.http.test(tail)) {\n                return tail.match(self.re.http)[0].length;\n            }\n            return 0;\n        }\n    },\n    \"https:\": \"http:\",\n    \"ftp:\": \"http:\",\n    \"//\": {\n        validate: function(text, pos, self) {\n            var tail = text.slice(pos);\n            if (!self.re.no_http) {\n                // compile lazily, because \"host\"-containing variables can change on tlds update.\n                self.re.no_http = new RegExp(\"^\" + self.re.src_auth + // Don't allow single-level domains, because of false positives like '//test'\n                // with code comments\n                \"(?:localhost|(?:(?:\" + self.re.src_domain + \")\\\\.)+\" + self.re.src_domain_root + \")\" + self.re.src_port + self.re.src_host_terminator + self.re.src_path, \"i\");\n            }\n            if (self.re.no_http.test(tail)) {\n                // should not be `://` & `///`, that protects from errors in protocol name\n                if (pos >= 3 && text[pos - 3] === \":\") {\n                    return 0;\n                }\n                if (pos >= 3 && text[pos - 3] === \"/\") {\n                    return 0;\n                }\n                return tail.match(self.re.no_http)[0].length;\n            }\n            return 0;\n        }\n    },\n    \"mailto:\": {\n        validate: function(text, pos, self) {\n            var tail = text.slice(pos);\n            if (!self.re.mailto) {\n                self.re.mailto = new RegExp(\"^\" + self.re.src_email_name + \"@\" + self.re.src_host_strict, \"i\");\n            }\n            if (self.re.mailto.test(tail)) {\n                return tail.match(self.re.mailto)[0].length;\n            }\n            return 0;\n        }\n    }\n};\n/*eslint-disable max-len*/ // RE pattern for 2-character tlds (autogenerated by ./support/tlds_2char_gen.js)\nvar tlds_2ch_src_re = \"a[cdefgilmnoqrstuwxz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvwxyz]|d[ejkmoz]|e[cegrstu]|f[ijkmor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdeghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eosuw]|s[abcdeghijklmnortuvxyz]|t[cdfghjklmnortvwz]|u[agksyz]|v[aceginu]|w[fs]|y[et]|z[amw]\";\n// DON'T try to make PRs with changes. Extend TLDs with LinkifyIt.tlds() instead\nvar tlds_default = \"biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф\".split(\"|\");\n/*eslint-enable max-len*/ ////////////////////////////////////////////////////////////////////////////////\nfunction resetScanCache(self) {\n    self.__index__ = -1;\n    self.__text_cache__ = \"\";\n}\nfunction createValidator(re) {\n    return function(text, pos) {\n        var tail = text.slice(pos);\n        if (re.test(tail)) {\n            return tail.match(re)[0].length;\n        }\n        return 0;\n    };\n}\nfunction createNormalizer() {\n    return function(match, self) {\n        self.normalize(match);\n    };\n}\n// Schemas compiler. Build regexps.\n//\nfunction compile(self) {\n    // Load & clone RE patterns.\n    var re = self.re = __webpack_require__(/*! ./lib/re */ \"(rsc)/./node_modules/linkify-it/lib/re.js\")(self.__opts__);\n    // Define dynamic patterns\n    var tlds = self.__tlds__.slice();\n    self.onCompile();\n    if (!self.__tlds_replaced__) {\n        tlds.push(tlds_2ch_src_re);\n    }\n    tlds.push(re.src_xn);\n    re.src_tlds = tlds.join(\"|\");\n    function untpl(tpl) {\n        return tpl.replace(\"%TLDS%\", re.src_tlds);\n    }\n    re.email_fuzzy = RegExp(untpl(re.tpl_email_fuzzy), \"i\");\n    re.link_fuzzy = RegExp(untpl(re.tpl_link_fuzzy), \"i\");\n    re.link_no_ip_fuzzy = RegExp(untpl(re.tpl_link_no_ip_fuzzy), \"i\");\n    re.host_fuzzy_test = RegExp(untpl(re.tpl_host_fuzzy_test), \"i\");\n    //\n    // Compile each schema\n    //\n    var aliases = [];\n    self.__compiled__ = {}; // Reset compiled data\n    function schemaError(name, val) {\n        throw new Error('(LinkifyIt) Invalid schema \"' + name + '\": ' + val);\n    }\n    Object.keys(self.__schemas__).forEach(function(name) {\n        var val = self.__schemas__[name];\n        // skip disabled methods\n        if (val === null) {\n            return;\n        }\n        var compiled = {\n            validate: null,\n            link: null\n        };\n        self.__compiled__[name] = compiled;\n        if (isObject(val)) {\n            if (isRegExp(val.validate)) {\n                compiled.validate = createValidator(val.validate);\n            } else if (isFunction(val.validate)) {\n                compiled.validate = val.validate;\n            } else {\n                schemaError(name, val);\n            }\n            if (isFunction(val.normalize)) {\n                compiled.normalize = val.normalize;\n            } else if (!val.normalize) {\n                compiled.normalize = createNormalizer();\n            } else {\n                schemaError(name, val);\n            }\n            return;\n        }\n        if (isString(val)) {\n            aliases.push(name);\n            return;\n        }\n        schemaError(name, val);\n    });\n    //\n    // Compile postponed aliases\n    //\n    aliases.forEach(function(alias) {\n        if (!self.__compiled__[self.__schemas__[alias]]) {\n            // Silently fail on missed schemas to avoid errons on disable.\n            // schemaError(alias, self.__schemas__[alias]);\n            return;\n        }\n        self.__compiled__[alias].validate = self.__compiled__[self.__schemas__[alias]].validate;\n        self.__compiled__[alias].normalize = self.__compiled__[self.__schemas__[alias]].normalize;\n    });\n    //\n    // Fake record for guessed links\n    //\n    self.__compiled__[\"\"] = {\n        validate: null,\n        normalize: createNormalizer()\n    };\n    //\n    // Build schema condition\n    //\n    var slist = Object.keys(self.__compiled__).filter(function(name) {\n        // Filter disabled & fake schemas\n        return name.length > 0 && self.__compiled__[name];\n    }).map(escapeRE).join(\"|\");\n    // (?!_) cause 1.5x slowdown\n    self.re.schema_test = RegExp(\"(^|(?!_)(?:[><｜]|\" + re.src_ZPCc + \"))(\" + slist + \")\", \"i\");\n    self.re.schema_search = RegExp(\"(^|(?!_)(?:[><｜]|\" + re.src_ZPCc + \"))(\" + slist + \")\", \"ig\");\n    self.re.schema_at_start = RegExp(\"^\" + self.re.schema_search.source, \"i\");\n    self.re.pretest = RegExp(\"(\" + self.re.schema_test.source + \")|(\" + self.re.host_fuzzy_test.source + \")|@\", \"i\");\n    //\n    // Cleanup\n    //\n    resetScanCache(self);\n}\n/**\n * class Match\n *\n * Match result. Single element of array, returned by [[LinkifyIt#match]]\n **/ function Match(self, shift) {\n    var start = self.__index__, end = self.__last_index__, text = self.__text_cache__.slice(start, end);\n    /**\n   * Match#schema -> String\n   *\n   * Prefix (protocol) for matched string.\n   **/ this.schema = self.__schema__.toLowerCase();\n    /**\n   * Match#index -> Number\n   *\n   * First position of matched string.\n   **/ this.index = start + shift;\n    /**\n   * Match#lastIndex -> Number\n   *\n   * Next position after matched string.\n   **/ this.lastIndex = end + shift;\n    /**\n   * Match#raw -> String\n   *\n   * Matched string.\n   **/ this.raw = text;\n    /**\n   * Match#text -> String\n   *\n   * Notmalized text of matched string.\n   **/ this.text = text;\n    /**\n   * Match#url -> String\n   *\n   * Normalized url of matched string.\n   **/ this.url = text;\n}\nfunction createMatch(self, shift) {\n    var match = new Match(self, shift);\n    self.__compiled__[match.schema].normalize(match, self);\n    return match;\n}\n/**\n * class LinkifyIt\n **/ /**\n * new LinkifyIt(schemas, options)\n * - schemas (Object): Optional. Additional schemas to validate (prefix/validator)\n * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }\n *\n * Creates new linkifier instance with optional additional schemas.\n * Can be called without `new` keyword for convenience.\n *\n * By default understands:\n *\n * - `http(s)://...` , `ftp://...`, `mailto:...` & `//...` links\n * - \"fuzzy\" links and emails (example.com, foo@bar.com).\n *\n * `schemas` is an object, where each key/value describes protocol/rule:\n *\n * - __key__ - link prefix (usually, protocol name with `:` at the end, `skype:`\n *   for example). `linkify-it` makes shure that prefix is not preceeded with\n *   alphanumeric char and symbols. Only whitespaces and punctuation allowed.\n * - __value__ - rule to check tail after link prefix\n *   - _String_ - just alias to existing rule\n *   - _Object_\n *     - _validate_ - validator function (should return matched length on success),\n *       or `RegExp`.\n *     - _normalize_ - optional function to normalize text & url of matched result\n *       (for example, for @twitter mentions).\n *\n * `options`:\n *\n * - __fuzzyLink__ - recognige URL-s without `http(s):` prefix. Default `true`.\n * - __fuzzyIP__ - allow IPs in fuzzy links above. Can conflict with some texts\n *   like version numbers. Default `false`.\n * - __fuzzyEmail__ - recognize emails without `mailto:` prefix.\n *\n **/ function LinkifyIt(schemas, options) {\n    if (!(this instanceof LinkifyIt)) {\n        return new LinkifyIt(schemas, options);\n    }\n    if (!options) {\n        if (isOptionsObj(schemas)) {\n            options = schemas;\n            schemas = {};\n        }\n    }\n    this.__opts__ = assign({}, defaultOptions, options);\n    // Cache last tested result. Used to skip repeating steps on next `match` call.\n    this.__index__ = -1;\n    this.__last_index__ = -1; // Next scan position\n    this.__schema__ = \"\";\n    this.__text_cache__ = \"\";\n    this.__schemas__ = assign({}, defaultSchemas, schemas);\n    this.__compiled__ = {};\n    this.__tlds__ = tlds_default;\n    this.__tlds_replaced__ = false;\n    this.re = {};\n    compile(this);\n}\n/** chainable\n * LinkifyIt#add(schema, definition)\n * - schema (String): rule name (fixed pattern prefix)\n * - definition (String|RegExp|Object): schema definition\n *\n * Add new rule definition. See constructor description for details.\n **/ LinkifyIt.prototype.add = function add(schema, definition) {\n    this.__schemas__[schema] = definition;\n    compile(this);\n    return this;\n};\n/** chainable\n * LinkifyIt#set(options)\n * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }\n *\n * Set recognition options for links without schema.\n **/ LinkifyIt.prototype.set = function set(options) {\n    this.__opts__ = assign(this.__opts__, options);\n    return this;\n};\n/**\n * LinkifyIt#test(text) -> Boolean\n *\n * Searches linkifiable pattern and returns `true` on success or `false` on fail.\n **/ LinkifyIt.prototype.test = function test(text) {\n    // Reset scan cache\n    this.__text_cache__ = text;\n    this.__index__ = -1;\n    if (!text.length) {\n        return false;\n    }\n    var m, ml, me, len, shift, next, re, tld_pos, at_pos;\n    // try to scan for link with schema - that's the most simple rule\n    if (this.re.schema_test.test(text)) {\n        re = this.re.schema_search;\n        re.lastIndex = 0;\n        while((m = re.exec(text)) !== null){\n            len = this.testSchemaAt(text, m[2], re.lastIndex);\n            if (len) {\n                this.__schema__ = m[2];\n                this.__index__ = m.index + m[1].length;\n                this.__last_index__ = m.index + m[0].length + len;\n                break;\n            }\n        }\n    }\n    if (this.__opts__.fuzzyLink && this.__compiled__[\"http:\"]) {\n        // guess schemaless links\n        tld_pos = text.search(this.re.host_fuzzy_test);\n        if (tld_pos >= 0) {\n            // if tld is located after found link - no need to check fuzzy pattern\n            if (this.__index__ < 0 || tld_pos < this.__index__) {\n                if ((ml = text.match(this.__opts__.fuzzyIP ? this.re.link_fuzzy : this.re.link_no_ip_fuzzy)) !== null) {\n                    shift = ml.index + ml[1].length;\n                    if (this.__index__ < 0 || shift < this.__index__) {\n                        this.__schema__ = \"\";\n                        this.__index__ = shift;\n                        this.__last_index__ = ml.index + ml[0].length;\n                    }\n                }\n            }\n        }\n    }\n    if (this.__opts__.fuzzyEmail && this.__compiled__[\"mailto:\"]) {\n        // guess schemaless emails\n        at_pos = text.indexOf(\"@\");\n        if (at_pos >= 0) {\n            // We can't skip this check, because this cases are possible:\n            // 192.168.1.1@gmail.com, my.in@example.com\n            if ((me = text.match(this.re.email_fuzzy)) !== null) {\n                shift = me.index + me[1].length;\n                next = me.index + me[0].length;\n                if (this.__index__ < 0 || shift < this.__index__ || shift === this.__index__ && next > this.__last_index__) {\n                    this.__schema__ = \"mailto:\";\n                    this.__index__ = shift;\n                    this.__last_index__ = next;\n                }\n            }\n        }\n    }\n    return this.__index__ >= 0;\n};\n/**\n * LinkifyIt#pretest(text) -> Boolean\n *\n * Very quick check, that can give false positives. Returns true if link MAY BE\n * can exists. Can be used for speed optimization, when you need to check that\n * link NOT exists.\n **/ LinkifyIt.prototype.pretest = function pretest(text) {\n    return this.re.pretest.test(text);\n};\n/**\n * LinkifyIt#testSchemaAt(text, name, position) -> Number\n * - text (String): text to scan\n * - name (String): rule (schema) name\n * - position (Number): text offset to check from\n *\n * Similar to [[LinkifyIt#test]] but checks only specific protocol tail exactly\n * at given position. Returns length of found pattern (0 on fail).\n **/ LinkifyIt.prototype.testSchemaAt = function testSchemaAt(text, schema, pos) {\n    // If not supported schema check requested - terminate\n    if (!this.__compiled__[schema.toLowerCase()]) {\n        return 0;\n    }\n    return this.__compiled__[schema.toLowerCase()].validate(text, pos, this);\n};\n/**\n * LinkifyIt#match(text) -> Array|null\n *\n * Returns array of found link descriptions or `null` on fail. We strongly\n * recommend to use [[LinkifyIt#test]] first, for best speed.\n *\n * ##### Result match description\n *\n * - __schema__ - link schema, can be empty for fuzzy links, or `//` for\n *   protocol-neutral  links.\n * - __index__ - offset of matched text\n * - __lastIndex__ - index of next char after mathch end\n * - __raw__ - matched text\n * - __text__ - normalized text\n * - __url__ - link, generated from matched text\n **/ LinkifyIt.prototype.match = function match(text) {\n    var shift = 0, result = [];\n    // Try to take previous element from cache, if .test() called before\n    if (this.__index__ >= 0 && this.__text_cache__ === text) {\n        result.push(createMatch(this, shift));\n        shift = this.__last_index__;\n    }\n    // Cut head if cache was used\n    var tail = shift ? text.slice(shift) : text;\n    // Scan string until end reached\n    while(this.test(tail)){\n        result.push(createMatch(this, shift));\n        tail = tail.slice(this.__last_index__);\n        shift += this.__last_index__;\n    }\n    if (result.length) {\n        return result;\n    }\n    return null;\n};\n/**\n * LinkifyIt#matchAtStart(text) -> Match|null\n *\n * Returns fully-formed (not fuzzy) link if it starts at the beginning\n * of the string, and null otherwise.\n **/ LinkifyIt.prototype.matchAtStart = function matchAtStart(text) {\n    // Reset scan cache\n    this.__text_cache__ = text;\n    this.__index__ = -1;\n    if (!text.length) return null;\n    var m = this.re.schema_at_start.exec(text);\n    if (!m) return null;\n    var len = this.testSchemaAt(text, m[2], m[0].length);\n    if (!len) return null;\n    this.__schema__ = m[2];\n    this.__index__ = m.index + m[1].length;\n    this.__last_index__ = m.index + m[0].length + len;\n    return createMatch(this, 0);\n};\n/** chainable\n * LinkifyIt#tlds(list [, keepOld]) -> this\n * - list (Array): list of tlds\n * - keepOld (Boolean): merge with current list if `true` (`false` by default)\n *\n * Load (or merge) new tlds list. Those are user for fuzzy links (without prefix)\n * to avoid false positives. By default this algorythm used:\n *\n * - hostname with any 2-letter root zones are ok.\n * - biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф\n *   are ok.\n * - encoded (`xn--...`) root zones are ok.\n *\n * If list is replaced, then exact match for 2-chars root zones will be checked.\n **/ LinkifyIt.prototype.tlds = function tlds(list, keepOld) {\n    list = Array.isArray(list) ? list : [\n        list\n    ];\n    if (!keepOld) {\n        this.__tlds__ = list.slice();\n        this.__tlds_replaced__ = true;\n        compile(this);\n        return this;\n    }\n    this.__tlds__ = this.__tlds__.concat(list).sort().filter(function(el, idx, arr) {\n        return el !== arr[idx - 1];\n    }).reverse();\n    compile(this);\n    return this;\n};\n/**\n * LinkifyIt#normalize(match)\n *\n * Default normalizer (if schema does not define it's own).\n **/ LinkifyIt.prototype.normalize = function normalize(match) {\n    // Do minimal possible changes by default. Need to collect feedback prior\n    // to move forward https://github.com/markdown-it/linkify-it/issues/1\n    if (!match.schema) {\n        match.url = \"http://\" + match.url;\n    }\n    if (match.schema === \"mailto:\" && !/^mailto:/i.test(match.url)) {\n        match.url = \"mailto:\" + match.url;\n    }\n};\n/**\n * LinkifyIt#onCompile()\n *\n * Override to modify basic RegExp-s.\n **/ LinkifyIt.prototype.onCompile = function onCompile() {};\nmodule.exports = LinkifyIt;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/linkify-it/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/linkify-it/lib/re.js":
/*!*******************************************!*\
  !*** ./node_modules/linkify-it/lib/re.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = function(opts) {\n    var re = {};\n    opts = opts || {};\n    // Use direct extract instead of `regenerate` to reduse browserified size\n    re.src_Any = (__webpack_require__(/*! uc.micro/properties/Any/regex */ \"(rsc)/./node_modules/uc.micro/properties/Any/regex.js\").source);\n    re.src_Cc = (__webpack_require__(/*! uc.micro/categories/Cc/regex */ \"(rsc)/./node_modules/uc.micro/categories/Cc/regex.js\").source);\n    re.src_Z = (__webpack_require__(/*! uc.micro/categories/Z/regex */ \"(rsc)/./node_modules/uc.micro/categories/Z/regex.js\").source);\n    re.src_P = (__webpack_require__(/*! uc.micro/categories/P/regex */ \"(rsc)/./node_modules/uc.micro/categories/P/regex.js\").source);\n    // \\p{\\Z\\P\\Cc\\CF} (white spaces + control + format + punctuation)\n    re.src_ZPCc = [\n        re.src_Z,\n        re.src_P,\n        re.src_Cc\n    ].join(\"|\");\n    // \\p{\\Z\\Cc} (white spaces + control)\n    re.src_ZCc = [\n        re.src_Z,\n        re.src_Cc\n    ].join(\"|\");\n    // Experimental. List of chars, completely prohibited in links\n    // because can separate it from other part of text\n    var text_separators = \"[><｜]\";\n    // All possible word characters (everything without punctuation, spaces & controls)\n    // Defined via punctuation & spaces to save space\n    // Should be something like \\p{\\L\\N\\S\\M} (\\w but without `_`)\n    re.src_pseudo_letter = \"(?:(?!\" + text_separators + \"|\" + re.src_ZPCc + \")\" + re.src_Any + \")\";\n    // The same as abothe but without [0-9]\n    // var src_pseudo_letter_non_d = '(?:(?![0-9]|' + src_ZPCc + ')' + src_Any + ')';\n    ////////////////////////////////////////////////////////////////////////////////\n    re.src_ip4 = \"(?:(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\";\n    // Prohibit any of \"@/[]()\" in user/pass to avoid wrong domain fetch.\n    re.src_auth = \"(?:(?:(?!\" + re.src_ZCc + \"|[@/\\\\[\\\\]()]).)+@)?\";\n    re.src_port = \"(?::(?:6(?:[0-4]\\\\d{3}|5(?:[0-4]\\\\d{2}|5(?:[0-2]\\\\d|3[0-5])))|[1-5]?\\\\d{1,4}))?\";\n    re.src_host_terminator = \"(?=$|\" + text_separators + \"|\" + re.src_ZPCc + \")\" + \"(?!\" + (opts[\"---\"] ? \"-(?!--)|\" : \"-|\") + \"_|:\\\\d|\\\\.-|\\\\.(?!$|\" + re.src_ZPCc + \"))\";\n    re.src_path = \"(?:\" + \"[/?#]\" + \"(?:\" + \"(?!\" + re.src_ZCc + \"|\" + text_separators + \"|[()[\\\\]{}.,\\\"'?!\\\\-;]).|\" + \"\\\\[(?:(?!\" + re.src_ZCc + \"|\\\\]).)*\\\\]|\" + \"\\\\((?:(?!\" + re.src_ZCc + \"|[)]).)*\\\\)|\" + \"\\\\{(?:(?!\" + re.src_ZCc + \"|[}]).)*\\\\}|\" + '\\\\\"(?:(?!' + re.src_ZCc + '|[\"]).)+\\\\\"|' + \"\\\\'(?:(?!\" + re.src_ZCc + \"|[']).)+\\\\'|\" + \"\\\\'(?=\" + re.src_pseudo_letter + \"|[-])|\" + // allow `I'm_king` if no pair found\n    \"\\\\.{2,}[a-zA-Z0-9%/&]|\" + // google has many dots in \"google search\" links (#66, #81).\n    // github has ... in commit range links,\n    // Restrict to\n    // - english\n    // - percent-encoded\n    // - parts of file path\n    // - params separator\n    // until more examples found.\n    \"\\\\.(?!\" + re.src_ZCc + \"|[.]|$)|\" + (opts[\"---\"] ? \"\\\\-(?!--(?:[^-]|$))(?:-*)|\" // `---` => long dash, terminate\n     : \"\\\\-+|\") + \",(?!\" + re.src_ZCc + \"|$)|\" + // allow `,,,` in paths\n    \";(?!\" + re.src_ZCc + \"|$)|\" + // allow `;` if not followed by space-like char\n    \"\\\\!+(?!\" + re.src_ZCc + \"|[!]|$)|\" + // allow `!!!` in paths, but not at the end\n    \"\\\\?(?!\" + re.src_ZCc + \"|[?]|$)\" + \")+\" + \"|\\\\/\" + \")?\";\n    // Allow anything in markdown spec, forbid quote (\") at the first position\n    // because emails enclosed in quotes are far more common\n    re.src_email_name = '[\\\\-;:&=\\\\+\\\\$,\\\\.a-zA-Z0-9_][\\\\-;:&=\\\\+\\\\$,\\\\\"\\\\.a-zA-Z0-9_]*';\n    re.src_xn = \"xn--[a-z0-9\\\\-]{1,59}\";\n    // More to read about domain names\n    // http://serverfault.com/questions/638260/\n    re.src_domain_root = // Allow letters & digits (http://test1)\n    \"(?:\" + re.src_xn + \"|\" + re.src_pseudo_letter + \"{1,63}\" + \")\";\n    re.src_domain = \"(?:\" + re.src_xn + \"|\" + \"(?:\" + re.src_pseudo_letter + \")\" + \"|\" + \"(?:\" + re.src_pseudo_letter + \"(?:-|\" + re.src_pseudo_letter + \"){0,61}\" + re.src_pseudo_letter + \")\" + \")\";\n    re.src_host = \"(?:\" + // Don't need IP check, because digits are already allowed in normal domain names\n    //   src_ip4 +\n    // '|' +\n    \"(?:(?:(?:\" + re.src_domain + \")\\\\.)*\" + re.src_domain /*_root*/  + \")\" + \")\";\n    re.tpl_host_fuzzy = \"(?:\" + re.src_ip4 + \"|\" + \"(?:(?:(?:\" + re.src_domain + \")\\\\.)+(?:%TLDS%))\" + \")\";\n    re.tpl_host_no_ip_fuzzy = \"(?:(?:(?:\" + re.src_domain + \")\\\\.)+(?:%TLDS%))\";\n    re.src_host_strict = re.src_host + re.src_host_terminator;\n    re.tpl_host_fuzzy_strict = re.tpl_host_fuzzy + re.src_host_terminator;\n    re.src_host_port_strict = re.src_host + re.src_port + re.src_host_terminator;\n    re.tpl_host_port_fuzzy_strict = re.tpl_host_fuzzy + re.src_port + re.src_host_terminator;\n    re.tpl_host_port_no_ip_fuzzy_strict = re.tpl_host_no_ip_fuzzy + re.src_port + re.src_host_terminator;\n    ////////////////////////////////////////////////////////////////////////////////\n    // Main rules\n    // Rude test fuzzy links by host, for quick deny\n    re.tpl_host_fuzzy_test = \"localhost|www\\\\.|\\\\.\\\\d{1,3}\\\\.|(?:\\\\.(?:%TLDS%)(?:\" + re.src_ZPCc + \"|>|$))\";\n    re.tpl_email_fuzzy = \"(^|\" + text_separators + '|\"|\\\\(|' + re.src_ZCc + \")\" + \"(\" + re.src_email_name + \"@\" + re.tpl_host_fuzzy_strict + \")\";\n    re.tpl_link_fuzzy = // Fuzzy link can't be prepended with .:/\\- and non punctuation.\n    // but can start with > (markdown blockquote)\n    \"(^|(?![.:/\\\\-_@])(?:[$+<=>^`|｜]|\" + re.src_ZPCc + \"))\" + \"((?![$+<=>^`|｜])\" + re.tpl_host_port_fuzzy_strict + re.src_path + \")\";\n    re.tpl_link_no_ip_fuzzy = // Fuzzy link can't be prepended with .:/\\- and non punctuation.\n    // but can start with > (markdown blockquote)\n    \"(^|(?![.:/\\\\-_@])(?:[$+<=>^`|｜]|\" + re.src_ZPCc + \"))\" + \"((?![$+<=>^`|｜])\" + re.tpl_host_port_no_ip_fuzzy_strict + re.src_path + \")\";\n    return re;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/linkify-it/lib/re.js\n");

/***/ })

};
;