"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/mdurl";
exports.ids = ["vendor-chunks/mdurl"];
exports.modules = {

/***/ "(rsc)/./node_modules/mdurl/decode.js":
/*!**************************************!*\
  !*** ./node_modules/mdurl/decode.js ***!
  \**************************************/
/***/ ((module) => {

eval("\n/* eslint-disable no-bitwise */ var decodeCache = {};\nfunction getDecodeCache(exclude) {\n    var i, ch, cache = decodeCache[exclude];\n    if (cache) {\n        return cache;\n    }\n    cache = decodeCache[exclude] = [];\n    for(i = 0; i < 128; i++){\n        ch = String.fromCharCode(i);\n        cache.push(ch);\n    }\n    for(i = 0; i < exclude.length; i++){\n        ch = exclude.charCodeAt(i);\n        cache[ch] = \"%\" + (\"0\" + ch.toString(16).toUpperCase()).slice(-2);\n    }\n    return cache;\n}\n// Decode percent-encoded string.\n//\nfunction decode(string, exclude) {\n    var cache;\n    if (typeof exclude !== \"string\") {\n        exclude = decode.defaultChars;\n    }\n    cache = getDecodeCache(exclude);\n    return string.replace(/(%[a-f0-9]{2})+/gi, function(seq) {\n        var i, l, b1, b2, b3, b4, chr, result = \"\";\n        for(i = 0, l = seq.length; i < l; i += 3){\n            b1 = parseInt(seq.slice(i + 1, i + 3), 16);\n            if (b1 < 0x80) {\n                result += cache[b1];\n                continue;\n            }\n            if ((b1 & 0xE0) === 0xC0 && i + 3 < l) {\n                // 110xxxxx 10xxxxxx\n                b2 = parseInt(seq.slice(i + 4, i + 6), 16);\n                if ((b2 & 0xC0) === 0x80) {\n                    chr = b1 << 6 & 0x7C0 | b2 & 0x3F;\n                    if (chr < 0x80) {\n                        result += \"��\";\n                    } else {\n                        result += String.fromCharCode(chr);\n                    }\n                    i += 3;\n                    continue;\n                }\n            }\n            if ((b1 & 0xF0) === 0xE0 && i + 6 < l) {\n                // 1110xxxx 10xxxxxx 10xxxxxx\n                b2 = parseInt(seq.slice(i + 4, i + 6), 16);\n                b3 = parseInt(seq.slice(i + 7, i + 9), 16);\n                if ((b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80) {\n                    chr = b1 << 12 & 0xF000 | b2 << 6 & 0xFC0 | b3 & 0x3F;\n                    if (chr < 0x800 || chr >= 0xD800 && chr <= 0xDFFF) {\n                        result += \"���\";\n                    } else {\n                        result += String.fromCharCode(chr);\n                    }\n                    i += 6;\n                    continue;\n                }\n            }\n            if ((b1 & 0xF8) === 0xF0 && i + 9 < l) {\n                // 111110xx 10xxxxxx 10xxxxxx 10xxxxxx\n                b2 = parseInt(seq.slice(i + 4, i + 6), 16);\n                b3 = parseInt(seq.slice(i + 7, i + 9), 16);\n                b4 = parseInt(seq.slice(i + 10, i + 12), 16);\n                if ((b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80 && (b4 & 0xC0) === 0x80) {\n                    chr = b1 << 18 & 0x1C0000 | b2 << 12 & 0x3F000 | b3 << 6 & 0xFC0 | b4 & 0x3F;\n                    if (chr < 0x10000 || chr > 0x10FFFF) {\n                        result += \"����\";\n                    } else {\n                        chr -= 0x10000;\n                        result += String.fromCharCode(0xD800 + (chr >> 10), 0xDC00 + (chr & 0x3FF));\n                    }\n                    i += 9;\n                    continue;\n                }\n            }\n            result += \"�\";\n        }\n        return result;\n    });\n}\ndecode.defaultChars = \";/?:@&=+$,#\";\ndecode.componentChars = \"\";\nmodule.exports = decode;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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O2dCQUN2QyxzQ0FBc0M7Z0JBQ3RDRSxLQUFLSyxTQUFTUixJQUFJTCxLQUFLLENBQUNWLElBQUksR0FBR0EsSUFBSSxJQUFJO2dCQUN2Q21CLEtBQUtJLFNBQVNSLElBQUlMLEtBQUssQ0FBQ1YsSUFBSSxHQUFHQSxJQUFJLElBQUk7Z0JBQ3ZDb0IsS0FBS0csU0FBU1IsSUFBSUwsS0FBSyxDQUFDVixJQUFJLElBQUlBLElBQUksS0FBSztnQkFFekMsSUFBSSxDQUFDa0IsS0FBSyxJQUFHLE1BQU8sUUFBUSxDQUFDQyxLQUFLLElBQUcsTUFBTyxRQUFRLENBQUNDLEtBQUssSUFBRyxNQUFPLE1BQU07b0JBQ3hFQyxNQUFNLE1BQVEsS0FBTSxXQUFhLE1BQU8sS0FBTSxVQUFZLE1BQU8sSUFBSyxRQUFVRCxLQUFLO29CQUVyRixJQUFJQyxNQUFNLFdBQVdBLE1BQU0sVUFBVTt3QkFDbkNDLFVBQVU7b0JBQ1osT0FBTzt3QkFDTEQsT0FBTzt3QkFDUEMsVUFBVW5CLE9BQU9DLFlBQVksQ0FBQyxTQUFVaUIsQ0FBQUEsT0FBTyxFQUFDLEdBQUksU0FBVUEsQ0FBQUEsTUFBTSxLQUFJO29CQUMxRTtvQkFFQXJCLEtBQUs7b0JBQ0w7Z0JBQ0Y7WUFDRjtZQUVBc0IsVUFBVTtRQUNaO1FBRUEsT0FBT0E7SUFDVDtBQUNGO0FBR0FYLE9BQU9FLFlBQVksR0FBSztBQUN4QkYsT0FBT2EsY0FBYyxHQUFHO0FBR3hCQyxPQUFPQyxPQUFPLEdBQUdmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvZy8uL25vZGVfbW9kdWxlcy9tZHVybC9kZWNvZGUuanM/MDAzNyJdLCJzb3VyY2VzQ29udGVudCI6WyJcbid1c2Ugc3RyaWN0JztcblxuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1iaXR3aXNlICovXG5cbnZhciBkZWNvZGVDYWNoZSA9IHt9O1xuXG5mdW5jdGlvbiBnZXREZWNvZGVDYWNoZShleGNsdWRlKSB7XG4gIHZhciBpLCBjaCwgY2FjaGUgPSBkZWNvZGVDYWNoZVtleGNsdWRlXTtcbiAgaWYgKGNhY2hlKSB7IHJldHVybiBjYWNoZTsgfVxuXG4gIGNhY2hlID0gZGVjb2RlQ2FjaGVbZXhjbHVkZV0gPSBbXTtcblxuICBmb3IgKGkgPSAwOyBpIDwgMTI4OyBpKyspIHtcbiAgICBjaCA9IFN0cmluZy5mcm9tQ2hhckNvZGUoaSk7XG4gICAgY2FjaGUucHVzaChjaCk7XG4gIH1cblxuICBmb3IgKGkgPSAwOyBpIDwgZXhjbHVkZS5sZW5ndGg7IGkrKykge1xuICAgIGNoID0gZXhjbHVkZS5jaGFyQ29kZUF0KGkpO1xuICAgIGNhY2hlW2NoXSA9ICclJyArICgnMCcgKyBjaC50b1N0cmluZygxNikudG9VcHBlckNhc2UoKSkuc2xpY2UoLTIpO1xuICB9XG5cbiAgcmV0dXJuIGNhY2hlO1xufVxuXG5cbi8vIERlY29kZSBwZXJjZW50LWVuY29kZWQgc3RyaW5nLlxuLy9cbmZ1bmN0aW9uIGRlY29kZShzdHJpbmcsIGV4Y2x1ZGUpIHtcbiAgdmFyIGNhY2hlO1xuXG4gIGlmICh0eXBlb2YgZXhjbHVkZSAhPT0gJ3N0cmluZycpIHtcbiAgICBleGNsdWRlID0gZGVjb2RlLmRlZmF1bHRDaGFycztcbiAgfVxuXG4gIGNhY2hlID0gZ2V0RGVjb2RlQ2FjaGUoZXhjbHVkZSk7XG5cbiAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC8oJVthLWYwLTldezJ9KSsvZ2ksIGZ1bmN0aW9uKHNlcSkge1xuICAgIHZhciBpLCBsLCBiMSwgYjIsIGIzLCBiNCwgY2hyLFxuICAgICAgICByZXN1bHQgPSAnJztcblxuICAgIGZvciAoaSA9IDAsIGwgPSBzZXEubGVuZ3RoOyBpIDwgbDsgaSArPSAzKSB7XG4gICAgICBiMSA9IHBhcnNlSW50KHNlcS5zbGljZShpICsgMSwgaSArIDMpLCAxNik7XG5cbiAgICAgIGlmIChiMSA8IDB4ODApIHtcbiAgICAgICAgcmVzdWx0ICs9IGNhY2hlW2IxXTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmICgoYjEgJiAweEUwKSA9PT0gMHhDMCAmJiAoaSArIDMgPCBsKSkge1xuICAgICAgICAvLyAxMTB4eHh4eCAxMHh4eHh4eFxuICAgICAgICBiMiA9IHBhcnNlSW50KHNlcS5zbGljZShpICsgNCwgaSArIDYpLCAxNik7XG5cbiAgICAgICAgaWYgKChiMiAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgY2hyID0gKChiMSA8PCA2KSAmIDB4N0MwKSB8IChiMiAmIDB4M0YpO1xuXG4gICAgICAgICAgaWYgKGNociA8IDB4ODApIHtcbiAgICAgICAgICAgIHJlc3VsdCArPSAnXFx1ZmZmZFxcdWZmZmQnO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXN1bHQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjaHIpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGkgKz0gMztcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoKGIxICYgMHhGMCkgPT09IDB4RTAgJiYgKGkgKyA2IDwgbCkpIHtcbiAgICAgICAgLy8gMTExMHh4eHggMTB4eHh4eHggMTB4eHh4eHhcbiAgICAgICAgYjIgPSBwYXJzZUludChzZXEuc2xpY2UoaSArIDQsIGkgKyA2KSwgMTYpO1xuICAgICAgICBiMyA9IHBhcnNlSW50KHNlcS5zbGljZShpICsgNywgaSArIDkpLCAxNik7XG5cbiAgICAgICAgaWYgKChiMiAmIDB4QzApID09PSAweDgwICYmIChiMyAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgY2hyID0gKChiMSA8PCAxMikgJiAweEYwMDApIHwgKChiMiA8PCA2KSAmIDB4RkMwKSB8IChiMyAmIDB4M0YpO1xuXG4gICAgICAgICAgaWYgKGNociA8IDB4ODAwIHx8IChjaHIgPj0gMHhEODAwICYmIGNociA8PSAweERGRkYpKSB7XG4gICAgICAgICAgICByZXN1bHQgKz0gJ1xcdWZmZmRcXHVmZmZkXFx1ZmZmZCc7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNocik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaSArPSA2O1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICgoYjEgJiAweEY4KSA9PT0gMHhGMCAmJiAoaSArIDkgPCBsKSkge1xuICAgICAgICAvLyAxMTExMTB4eCAxMHh4eHh4eCAxMHh4eHh4eCAxMHh4eHh4eFxuICAgICAgICBiMiA9IHBhcnNlSW50KHNlcS5zbGljZShpICsgNCwgaSArIDYpLCAxNik7XG4gICAgICAgIGIzID0gcGFyc2VJbnQoc2VxLnNsaWNlKGkgKyA3LCBpICsgOSksIDE2KTtcbiAgICAgICAgYjQgPSBwYXJzZUludChzZXEuc2xpY2UoaSArIDEwLCBpICsgMTIpLCAxNik7XG5cbiAgICAgICAgaWYgKChiMiAmIDB4QzApID09PSAweDgwICYmIChiMyAmIDB4QzApID09PSAweDgwICYmIChiNCAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgY2hyID0gKChiMSA8PCAxOCkgJiAweDFDMDAwMCkgfCAoKGIyIDw8IDEyKSAmIDB4M0YwMDApIHwgKChiMyA8PCA2KSAmIDB4RkMwKSB8IChiNCAmIDB4M0YpO1xuXG4gICAgICAgICAgaWYgKGNociA8IDB4MTAwMDAgfHwgY2hyID4gMHgxMEZGRkYpIHtcbiAgICAgICAgICAgIHJlc3VsdCArPSAnXFx1ZmZmZFxcdWZmZmRcXHVmZmZkXFx1ZmZmZCc7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNociAtPSAweDEwMDAwO1xuICAgICAgICAgICAgcmVzdWx0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoMHhEODAwICsgKGNociA+PiAxMCksIDB4REMwMCArIChjaHIgJiAweDNGRikpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGkgKz0gOTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXN1bHQgKz0gJ1xcdWZmZmQnO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH0pO1xufVxuXG5cbmRlY29kZS5kZWZhdWx0Q2hhcnMgICA9ICc7Lz86QCY9KyQsIyc7XG5kZWNvZGUuY29tcG9uZW50Q2hhcnMgPSAnJztcblxuXG5tb2R1bGUuZXhwb3J0cyA9IGRlY29kZTtcbiJdLCJuYW1lcyI6WyJkZWNvZGVDYWNoZSIsImdldERlY29kZUNhY2hlIiwiZXhjbHVkZSIsImkiLCJjaCIsImNhY2hlIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwicHVzaCIsImxlbmd0aCIsImNoYXJDb2RlQXQiLCJ0b1N0cmluZyIsInRvVXBwZXJDYXNlIiwic2xpY2UiLCJkZWNvZGUiLCJzdHJpbmciLCJkZWZhdWx0Q2hhcnMiLCJyZXBsYWNlIiwic2VxIiwibCIsImIxIiwiYjIiLCJiMyIsImI0IiwiY2hyIiwicmVzdWx0IiwicGFyc2VJbnQiLCJjb21wb25lbnRDaGFycyIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mdurl/decode.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mdurl/encode.js":
/*!**************************************!*\
  !*** ./node_modules/mdurl/encode.js ***!
  \**************************************/
/***/ ((module) => {

eval("\nvar encodeCache = {};\n// Create a lookup array where anything but characters in `chars` string\n// and alphanumeric chars is percent-encoded.\n//\nfunction getEncodeCache(exclude) {\n    var i, ch, cache = encodeCache[exclude];\n    if (cache) {\n        return cache;\n    }\n    cache = encodeCache[exclude] = [];\n    for(i = 0; i < 128; i++){\n        ch = String.fromCharCode(i);\n        if (/^[0-9a-z]$/i.test(ch)) {\n            // always allow unencoded alphanumeric characters\n            cache.push(ch);\n        } else {\n            cache.push(\"%\" + (\"0\" + i.toString(16).toUpperCase()).slice(-2));\n        }\n    }\n    for(i = 0; i < exclude.length; i++){\n        cache[exclude.charCodeAt(i)] = exclude[i];\n    }\n    return cache;\n}\n// Encode unsafe characters with percent-encoding, skipping already\n// encoded sequences.\n//\n//  - string       - string to encode\n//  - exclude      - list of characters to ignore (in addition to a-zA-Z0-9)\n//  - keepEscaped  - don't encode '%' in a correct escape sequence (default: true)\n//\nfunction encode(string, exclude, keepEscaped) {\n    var i, l, code, nextCode, cache, result = \"\";\n    if (typeof exclude !== \"string\") {\n        // encode(string, keepEscaped)\n        keepEscaped = exclude;\n        exclude = encode.defaultChars;\n    }\n    if (typeof keepEscaped === \"undefined\") {\n        keepEscaped = true;\n    }\n    cache = getEncodeCache(exclude);\n    for(i = 0, l = string.length; i < l; i++){\n        code = string.charCodeAt(i);\n        if (keepEscaped && code === 0x25 /* % */  && i + 2 < l) {\n            if (/^[0-9a-f]{2}$/i.test(string.slice(i + 1, i + 3))) {\n                result += string.slice(i, i + 3);\n                i += 2;\n                continue;\n            }\n        }\n        if (code < 128) {\n            result += cache[code];\n            continue;\n        }\n        if (code >= 0xD800 && code <= 0xDFFF) {\n            if (code >= 0xD800 && code <= 0xDBFF && i + 1 < l) {\n                nextCode = string.charCodeAt(i + 1);\n                if (nextCode >= 0xDC00 && nextCode <= 0xDFFF) {\n                    result += encodeURIComponent(string[i] + string[i + 1]);\n                    i++;\n                    continue;\n                }\n            }\n            result += \"%EF%BF%BD\";\n            continue;\n        }\n        result += encodeURIComponent(string[i]);\n    }\n    return result;\n}\nencode.defaultChars = \";/?:@&=+$,-_.!~*'()#\";\nencode.componentChars = \"-_.!~*'()\";\nmodule.exports = encode;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Y2VzQ29udGVudCI6WyJcbid1c2Ugc3RyaWN0JztcblxuXG52YXIgZW5jb2RlQ2FjaGUgPSB7fTtcblxuXG4vLyBDcmVhdGUgYSBsb29rdXAgYXJyYXkgd2hlcmUgYW55dGhpbmcgYnV0IGNoYXJhY3RlcnMgaW4gYGNoYXJzYCBzdHJpbmdcbi8vIGFuZCBhbHBoYW51bWVyaWMgY2hhcnMgaXMgcGVyY2VudC1lbmNvZGVkLlxuLy9cbmZ1bmN0aW9uIGdldEVuY29kZUNhY2hlKGV4Y2x1ZGUpIHtcbiAgdmFyIGksIGNoLCBjYWNoZSA9IGVuY29kZUNhY2hlW2V4Y2x1ZGVdO1xuICBpZiAoY2FjaGUpIHsgcmV0dXJuIGNhY2hlOyB9XG5cbiAgY2FjaGUgPSBlbmNvZGVDYWNoZVtleGNsdWRlXSA9IFtdO1xuXG4gIGZvciAoaSA9IDA7IGkgPCAxMjg7IGkrKykge1xuICAgIGNoID0gU3RyaW5nLmZyb21DaGFyQ29kZShpKTtcblxuICAgIGlmICgvXlswLTlhLXpdJC9pLnRlc3QoY2gpKSB7XG4gICAgICAvLyBhbHdheXMgYWxsb3cgdW5lbmNvZGVkIGFscGhhbnVtZXJpYyBjaGFyYWN0ZXJzXG4gICAgICBjYWNoZS5wdXNoKGNoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2FjaGUucHVzaCgnJScgKyAoJzAnICsgaS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKSkuc2xpY2UoLTIpKTtcbiAgICB9XG4gIH1cblxuICBmb3IgKGkgPSAwOyBpIDwgZXhjbHVkZS5sZW5ndGg7IGkrKykge1xuICAgIGNhY2hlW2V4Y2x1ZGUuY2hhckNvZGVBdChpKV0gPSBleGNsdWRlW2ldO1xuICB9XG5cbiAgcmV0dXJuIGNhY2hlO1xufVxuXG5cbi8vIEVuY29kZSB1bnNhZmUgY2hhcmFjdGVycyB3aXRoIHBlcmNlbnQtZW5jb2RpbmcsIHNraXBwaW5nIGFscmVhZHlcbi8vIGVuY29kZWQgc2VxdWVuY2VzLlxuLy9cbi8vICAtIHN0cmluZyAgICAgICAtIHN0cmluZyB0byBlbmNvZGVcbi8vICAtIGV4Y2x1ZGUgICAgICAtIGxpc3Qgb2YgY2hhcmFjdGVycyB0byBpZ25vcmUgKGluIGFkZGl0aW9uIHRvIGEtekEtWjAtOSlcbi8vICAtIGtlZXBFc2NhcGVkICAtIGRvbid0IGVuY29kZSAnJScgaW4gYSBjb3JyZWN0IGVzY2FwZSBzZXF1ZW5jZSAoZGVmYXVsdDogdHJ1ZSlcbi8vXG5mdW5jdGlvbiBlbmNvZGUoc3RyaW5nLCBleGNsdWRlLCBrZWVwRXNjYXBlZCkge1xuICB2YXIgaSwgbCwgY29kZSwgbmV4dENvZGUsIGNhY2hlLFxuICAgICAgcmVzdWx0ID0gJyc7XG5cbiAgaWYgKHR5cGVvZiBleGNsdWRlICE9PSAnc3RyaW5nJykge1xuICAgIC8vIGVuY29kZShzdHJpbmcsIGtlZXBFc2NhcGVkKVxuICAgIGtlZXBFc2NhcGVkICA9IGV4Y2x1ZGU7XG4gICAgZXhjbHVkZSA9IGVuY29kZS5kZWZhdWx0Q2hhcnM7XG4gIH1cblxuICBpZiAodHlwZW9mIGtlZXBFc2NhcGVkID09PSAndW5kZWZpbmVkJykge1xuICAgIGtlZXBFc2NhcGVkID0gdHJ1ZTtcbiAgfVxuXG4gIGNhY2hlID0gZ2V0RW5jb2RlQ2FjaGUoZXhjbHVkZSk7XG5cbiAgZm9yIChpID0gMCwgbCA9IHN0cmluZy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBjb2RlID0gc3RyaW5nLmNoYXJDb2RlQXQoaSk7XG5cbiAgICBpZiAoa2VlcEVzY2FwZWQgJiYgY29kZSA9PT0gMHgyNSAvKiAlICovICYmIGkgKyAyIDwgbCkge1xuICAgICAgaWYgKC9eWzAtOWEtZl17Mn0kL2kudGVzdChzdHJpbmcuc2xpY2UoaSArIDEsIGkgKyAzKSkpIHtcbiAgICAgICAgcmVzdWx0ICs9IHN0cmluZy5zbGljZShpLCBpICsgMyk7XG4gICAgICAgIGkgKz0gMjtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNvZGUgPCAxMjgpIHtcbiAgICAgIHJlc3VsdCArPSBjYWNoZVtjb2RlXTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmIChjb2RlID49IDB4RDgwMCAmJiBjb2RlIDw9IDB4REZGRikge1xuICAgICAgaWYgKGNvZGUgPj0gMHhEODAwICYmIGNvZGUgPD0gMHhEQkZGICYmIGkgKyAxIDwgbCkge1xuICAgICAgICBuZXh0Q29kZSA9IHN0cmluZy5jaGFyQ29kZUF0KGkgKyAxKTtcbiAgICAgICAgaWYgKG5leHRDb2RlID49IDB4REMwMCAmJiBuZXh0Q29kZSA8PSAweERGRkYpIHtcbiAgICAgICAgICByZXN1bHQgKz0gZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZ1tpXSArIHN0cmluZ1tpICsgMV0pO1xuICAgICAgICAgIGkrKztcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmVzdWx0ICs9ICclRUYlQkYlQkQnO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgcmVzdWx0ICs9IGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdbaV0pO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZW5jb2RlLmRlZmF1bHRDaGFycyAgID0gXCI7Lz86QCY9KyQsLV8uIX4qJygpI1wiO1xuZW5jb2RlLmNvbXBvbmVudENoYXJzID0gXCItXy4hfionKClcIjtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IGVuY29kZTtcbiJdLCJuYW1lcyI6WyJlbmNvZGVDYWNoZSIsImdldEVuY29kZUNhY2hlIiwiZXhjbHVkZSIsImkiLCJjaCIsImNhY2hlIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwidGVzdCIsInB1c2giLCJ0b1N0cmluZyIsInRvVXBwZXJDYXNlIiwic2xpY2UiLCJsZW5ndGgiLCJjaGFyQ29kZUF0IiwiZW5jb2RlIiwic3RyaW5nIiwia2VlcEVzY2FwZWQiLCJsIiwiY29kZSIsIm5leHRDb2RlIiwicmVzdWx0IiwiZGVmYXVsdENoYXJzIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiY29tcG9uZW50Q2hhcnMiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mdurl/encode.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mdurl/format.js":
/*!**************************************!*\
  !*** ./node_modules/mdurl/format.js ***!
  \**************************************/
/***/ ((module) => {

eval("\nmodule.exports = function format(url) {\n    var result = \"\";\n    result += url.protocol || \"\";\n    result += url.slashes ? \"//\" : \"\";\n    result += url.auth ? url.auth + \"@\" : \"\";\n    if (url.hostname && url.hostname.indexOf(\":\") !== -1) {\n        // ipv6 address\n        result += \"[\" + url.hostname + \"]\";\n    } else {\n        result += url.hostname || \"\";\n    }\n    result += url.port ? \":\" + url.port : \"\";\n    result += url.pathname || \"\";\n    result += url.search || \"\";\n    result += url.hash || \"\";\n    return result;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWR1cmwvZm9ybWF0LmpzIiwibWFwcGluZ3MiOiJBQUNBO0FBR0FBLE9BQU9DLE9BQU8sR0FBRyxTQUFTQyxPQUFPQyxHQUFHO0lBQ2xDLElBQUlDLFNBQVM7SUFFYkEsVUFBVUQsSUFBSUUsUUFBUSxJQUFJO0lBQzFCRCxVQUFVRCxJQUFJRyxPQUFPLEdBQUcsT0FBTztJQUMvQkYsVUFBVUQsSUFBSUksSUFBSSxHQUFHSixJQUFJSSxJQUFJLEdBQUcsTUFBTTtJQUV0QyxJQUFJSixJQUFJSyxRQUFRLElBQUlMLElBQUlLLFFBQVEsQ0FBQ0MsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHO1FBQ3BELGVBQWU7UUFDZkwsVUFBVSxNQUFNRCxJQUFJSyxRQUFRLEdBQUc7SUFDakMsT0FBTztRQUNMSixVQUFVRCxJQUFJSyxRQUFRLElBQUk7SUFDNUI7SUFFQUosVUFBVUQsSUFBSU8sSUFBSSxHQUFHLE1BQU1QLElBQUlPLElBQUksR0FBRztJQUN0Q04sVUFBVUQsSUFBSVEsUUFBUSxJQUFJO0lBQzFCUCxVQUFVRCxJQUFJUyxNQUFNLElBQUk7SUFDeEJSLFVBQVVELElBQUlVLElBQUksSUFBSTtJQUV0QixPQUFPVDtBQUNUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvZy8uL25vZGVfbW9kdWxlcy9tZHVybC9mb3JtYXQuanM/NzRmNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcbid1c2Ugc3RyaWN0JztcblxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGZvcm1hdCh1cmwpIHtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuXG4gIHJlc3VsdCArPSB1cmwucHJvdG9jb2wgfHwgJyc7XG4gIHJlc3VsdCArPSB1cmwuc2xhc2hlcyA/ICcvLycgOiAnJztcbiAgcmVzdWx0ICs9IHVybC5hdXRoID8gdXJsLmF1dGggKyAnQCcgOiAnJztcblxuICBpZiAodXJsLmhvc3RuYW1lICYmIHVybC5ob3N0bmFtZS5pbmRleE9mKCc6JykgIT09IC0xKSB7XG4gICAgLy8gaXB2NiBhZGRyZXNzXG4gICAgcmVzdWx0ICs9ICdbJyArIHVybC5ob3N0bmFtZSArICddJztcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgKz0gdXJsLmhvc3RuYW1lIHx8ICcnO1xuICB9XG5cbiAgcmVzdWx0ICs9IHVybC5wb3J0ID8gJzonICsgdXJsLnBvcnQgOiAnJztcbiAgcmVzdWx0ICs9IHVybC5wYXRobmFtZSB8fCAnJztcbiAgcmVzdWx0ICs9IHVybC5zZWFyY2ggfHwgJyc7XG4gIHJlc3VsdCArPSB1cmwuaGFzaCB8fCAnJztcblxuICByZXR1cm4gcmVzdWx0O1xufTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiZm9ybWF0IiwidXJsIiwicmVzdWx0IiwicHJvdG9jb2wiLCJzbGFzaGVzIiwiYXV0aCIsImhvc3RuYW1lIiwiaW5kZXhPZiIsInBvcnQiLCJwYXRobmFtZSIsInNlYXJjaCIsImhhc2giXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mdurl/format.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mdurl/index.js":
/*!*************************************!*\
  !*** ./node_modules/mdurl/index.js ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports.encode = __webpack_require__(/*! ./encode */ \"(rsc)/./node_modules/mdurl/encode.js\");\nmodule.exports.decode = __webpack_require__(/*! ./decode */ \"(rsc)/./node_modules/mdurl/decode.js\");\nmodule.exports.format = __webpack_require__(/*! ./format */ \"(rsc)/./node_modules/mdurl/format.js\");\nmodule.exports.parse = __webpack_require__(/*! ./parse */ \"(rsc)/./node_modules/mdurl/parse.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWR1cmwvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFHQUEsbUdBQWdDO0FBQ2hDQSxtR0FBZ0M7QUFDaENBLG1HQUFnQztBQUNoQ0EsZ0dBQWdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvZy8uL25vZGVfbW9kdWxlcy9tZHVybC9pbmRleC5qcz85MTkwIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuXG5tb2R1bGUuZXhwb3J0cy5lbmNvZGUgPSByZXF1aXJlKCcuL2VuY29kZScpO1xubW9kdWxlLmV4cG9ydHMuZGVjb2RlID0gcmVxdWlyZSgnLi9kZWNvZGUnKTtcbm1vZHVsZS5leHBvcnRzLmZvcm1hdCA9IHJlcXVpcmUoJy4vZm9ybWF0Jyk7XG5tb2R1bGUuZXhwb3J0cy5wYXJzZSAgPSByZXF1aXJlKCcuL3BhcnNlJyk7XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImVuY29kZSIsInJlcXVpcmUiLCJkZWNvZGUiLCJmb3JtYXQiLCJwYXJzZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mdurl/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mdurl/parse.js":
/*!*************************************!*\
  !*** ./node_modules/mdurl/parse.js ***!
  \*************************************/
/***/ ((module) => {

eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n//\n// Changes from joyent/node:\n//\n// 1. No leading slash in paths,\n//    e.g. in `url.parse('http://foo?bar')` pathname is ``, not `/`\n//\n// 2. Backslashes are not replaced with slashes,\n//    so `http:\\\\example.org\\` is treated like a relative path\n//\n// 3. Trailing colon is treated like a part of the path,\n//    i.e. in `http://example.org:foo` pathname is `:foo`\n//\n// 4. Nothing is URL-encoded in the resulting object,\n//    (in joyent/node some chars in auth and paths are encoded)\n//\n// 5. `url.parse()` does not have `parseQueryString` argument\n//\n// 6. Removed extraneous result properties: `host`, `path`, `query`, etc.,\n//    which can be constructed using other parts of the url.\n//\nfunction Url() {\n    this.protocol = null;\n    this.slashes = null;\n    this.auth = null;\n    this.port = null;\n    this.hostname = null;\n    this.hash = null;\n    this.search = null;\n    this.pathname = null;\n}\n// Reference: RFC 3986, RFC 1808, RFC 2396\n// define these here so at least they only have to be\n// compiled once on the first module load.\nvar protocolPattern = /^([a-z0-9.+-]+:)/i, portPattern = /:[0-9]*$/, // Special case for a simple path URL\nsimplePathPattern = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/, // RFC 2396: characters reserved for delimiting URLs.\n// We actually just auto-escape these.\ndelims = [\n    \"<\",\n    \">\",\n    '\"',\n    \"`\",\n    \" \",\n    \"\\r\",\n    \"\\n\",\n    \"\t\"\n], // RFC 2396: characters not allowed for various reasons.\nunwise = [\n    \"{\",\n    \"}\",\n    \"|\",\n    \"\\\\\",\n    \"^\",\n    \"`\"\n].concat(delims), // Allowed by RFCs, but cause of XSS attacks.  Always escape these.\nautoEscape = [\n    \"'\"\n].concat(unwise), // Characters that are never ever allowed in a hostname.\n// Note that any invalid chars are also handled, but these\n// are the ones that are *expected* to be seen, so we fast-path\n// them.\nnonHostChars = [\n    \"%\",\n    \"/\",\n    \"?\",\n    \";\",\n    \"#\"\n].concat(autoEscape), hostEndingChars = [\n    \"/\",\n    \"?\",\n    \"#\"\n], hostnameMaxLen = 255, hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/, hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/, // protocols that can allow \"unsafe\" and \"unwise\" chars.\n/* eslint-disable no-script-url */ // protocols that never have a hostname.\nhostlessProtocol = {\n    \"javascript\": true,\n    \"javascript:\": true\n}, // protocols that always contain a // bit.\nslashedProtocol = {\n    \"http\": true,\n    \"https\": true,\n    \"ftp\": true,\n    \"gopher\": true,\n    \"file\": true,\n    \"http:\": true,\n    \"https:\": true,\n    \"ftp:\": true,\n    \"gopher:\": true,\n    \"file:\": true\n};\n/* eslint-enable no-script-url */ function urlParse(url, slashesDenoteHost) {\n    if (url && url instanceof Url) {\n        return url;\n    }\n    var u = new Url();\n    u.parse(url, slashesDenoteHost);\n    return u;\n}\nUrl.prototype.parse = function(url, slashesDenoteHost) {\n    var i, l, lowerProto, hec, slashes, rest = url;\n    // trim before proceeding.\n    // This is to support parse stuff like \"  http://foo.com  \\n\"\n    rest = rest.trim();\n    if (!slashesDenoteHost && url.split(\"#\").length === 1) {\n        // Try fast path regexp\n        var simplePath = simplePathPattern.exec(rest);\n        if (simplePath) {\n            this.pathname = simplePath[1];\n            if (simplePath[2]) {\n                this.search = simplePath[2];\n            }\n            return this;\n        }\n    }\n    var proto = protocolPattern.exec(rest);\n    if (proto) {\n        proto = proto[0];\n        lowerProto = proto.toLowerCase();\n        this.protocol = proto;\n        rest = rest.substr(proto.length);\n    }\n    // figure out if it's got a host\n    // user@server is *always* interpreted as a hostname, and url\n    // resolution will treat //foo/bar as host=foo,path=bar because that's\n    // how the browser resolves relative URLs.\n    if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n        slashes = rest.substr(0, 2) === \"//\";\n        if (slashes && !(proto && hostlessProtocol[proto])) {\n            rest = rest.substr(2);\n            this.slashes = true;\n        }\n    }\n    if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {\n        // there's a hostname.\n        // the first instance of /, ?, ;, or # ends the host.\n        //\n        // If there is an @ in the hostname, then non-host chars *are* allowed\n        // to the left of the last @ sign, unless some host-ending character\n        // comes *before* the @-sign.\n        // URLs are obnoxious.\n        //\n        // ex:\n        // http://a@b@c/ => user:a@b host:c\n        // http://a@b?@c => user:a host:c path:/?@c\n        // v0.12 TODO(isaacs): This is not quite how Chrome does things.\n        // Review our test case against browsers more comprehensively.\n        // find the first instance of any hostEndingChars\n        var hostEnd = -1;\n        for(i = 0; i < hostEndingChars.length; i++){\n            hec = rest.indexOf(hostEndingChars[i]);\n            if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {\n                hostEnd = hec;\n            }\n        }\n        // at this point, either we have an explicit point where the\n        // auth portion cannot go past, or the last @ char is the decider.\n        var auth, atSign;\n        if (hostEnd === -1) {\n            // atSign can be anywhere.\n            atSign = rest.lastIndexOf(\"@\");\n        } else {\n            // atSign must be in auth portion.\n            // http://a@b/c@d => host:b auth:a path:/c@d\n            atSign = rest.lastIndexOf(\"@\", hostEnd);\n        }\n        // Now we have a portion which is definitely the auth.\n        // Pull that off.\n        if (atSign !== -1) {\n            auth = rest.slice(0, atSign);\n            rest = rest.slice(atSign + 1);\n            this.auth = auth;\n        }\n        // the host is the remaining to the left of the first non-host char\n        hostEnd = -1;\n        for(i = 0; i < nonHostChars.length; i++){\n            hec = rest.indexOf(nonHostChars[i]);\n            if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {\n                hostEnd = hec;\n            }\n        }\n        // if we still have not hit it, then the entire thing is a host.\n        if (hostEnd === -1) {\n            hostEnd = rest.length;\n        }\n        if (rest[hostEnd - 1] === \":\") {\n            hostEnd--;\n        }\n        var host = rest.slice(0, hostEnd);\n        rest = rest.slice(hostEnd);\n        // pull out port.\n        this.parseHost(host);\n        // we've indicated that there is a hostname,\n        // so even if it's empty, it has to be present.\n        this.hostname = this.hostname || \"\";\n        // if hostname begins with [ and ends with ]\n        // assume that it's an IPv6 address.\n        var ipv6Hostname = this.hostname[0] === \"[\" && this.hostname[this.hostname.length - 1] === \"]\";\n        // validate a little.\n        if (!ipv6Hostname) {\n            var hostparts = this.hostname.split(/\\./);\n            for(i = 0, l = hostparts.length; i < l; i++){\n                var part = hostparts[i];\n                if (!part) {\n                    continue;\n                }\n                if (!part.match(hostnamePartPattern)) {\n                    var newpart = \"\";\n                    for(var j = 0, k = part.length; j < k; j++){\n                        if (part.charCodeAt(j) > 127) {\n                            // we replace non-ASCII char with a temporary placeholder\n                            // we need this to make sure size of hostname is not\n                            // broken by replacing non-ASCII by nothing\n                            newpart += \"x\";\n                        } else {\n                            newpart += part[j];\n                        }\n                    }\n                    // we test again with ASCII char only\n                    if (!newpart.match(hostnamePartPattern)) {\n                        var validParts = hostparts.slice(0, i);\n                        var notHost = hostparts.slice(i + 1);\n                        var bit = part.match(hostnamePartStart);\n                        if (bit) {\n                            validParts.push(bit[1]);\n                            notHost.unshift(bit[2]);\n                        }\n                        if (notHost.length) {\n                            rest = notHost.join(\".\") + rest;\n                        }\n                        this.hostname = validParts.join(\".\");\n                        break;\n                    }\n                }\n            }\n        }\n        if (this.hostname.length > hostnameMaxLen) {\n            this.hostname = \"\";\n        }\n        // strip [ and ] from the hostname\n        // the host field still retains them, though\n        if (ipv6Hostname) {\n            this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n        }\n    }\n    // chop off from the tail first.\n    var hash = rest.indexOf(\"#\");\n    if (hash !== -1) {\n        // got a fragment string.\n        this.hash = rest.substr(hash);\n        rest = rest.slice(0, hash);\n    }\n    var qm = rest.indexOf(\"?\");\n    if (qm !== -1) {\n        this.search = rest.substr(qm);\n        rest = rest.slice(0, qm);\n    }\n    if (rest) {\n        this.pathname = rest;\n    }\n    if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) {\n        this.pathname = \"\";\n    }\n    return this;\n};\nUrl.prototype.parseHost = function(host) {\n    var port = portPattern.exec(host);\n    if (port) {\n        port = port[0];\n        if (port !== \":\") {\n            this.port = port.substr(1);\n        }\n        host = host.substr(0, host.length - port.length);\n    }\n    if (host) {\n        this.hostname = host;\n    }\n};\nmodule.exports = urlParse;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mdurl/parse.js\n");

/***/ })

};
;